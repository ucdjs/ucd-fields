import { exec } from "node:child_process";
import { readdir, readFile, writeFile } from "node:fs/promises";
import process from "node:process";
import { promisify } from "node:util";

const execAsync = promisify(exec);

async function run() {
  console.log("updating index.ts...");
  let files = await readdir("./src");
  files = files.filter((file) => file.endsWith(".ts") && file !== "index.ts");

  const content = `// This file is auto-generated by scripts/update-index.ts
// Do not edit this file directly.

${files.map((file) => `export * as ${file.replace(".ts", "").replace(".", "_")} from './${file.replace(".ts", "")}';`).join("\n")}
`;

  // update index.ts
  await writeFile("./src/index.ts", content, {
    encoding: "utf-8",
  });

  console.log("index.ts updated successfully!");

  console.log("updating exports...");
  // read pkg.json
  const pkg = JSON.parse(await readFile("./package.json", "utf-8"));

  const exports = pkg.exports;
  const newExports = {};

  const exportEntries = Object.entries(exports);

  for (const file of files) {
    const name = file.replace(".ts", "");
    exportEntries.push([`./${name}`, `./dist/${name}.js`]);
  }

  exportEntries.sort(([keyA], [keyB]) => {
    if (keyA === ".") return -1; // "." always first
    if (keyB === ".") return 1;
    if (keyA === "./package.json") return 1; // "./package.json" always last
    if (keyB === "./package.json") return -1;
    return keyA.localeCompare(keyB); // alphabetical sort for the rest
  });

  for (const [key, value] of exportEntries) {
    newExports[key] = value;
  }

  await writeFile("./package.json", JSON.stringify({ ...pkg, exports: newExports }, null, 2), {
    encoding: "utf-8",
  });
  console.log("exports updated successfully!");

  await execAsync("npx eslint ./src/index.ts ./package.json --fix");
}

run().catch((error) => {
  console.error(error);
  process.exit(1);
});
