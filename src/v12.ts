// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 12

//#region data-files/v12.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of a character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name.
     * Example: 'TEH_MARBUTA'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v12.0.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+298D"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+298E"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, which can be one of the following: "o" for Open, "c" for Close, or "n" for None.
     * Example: "o"
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v12.0.0/BidiCharacterTest.txt
/**
 * BidiCharacterTest interface represents a conformance test for implementations of the Unicode Bidirectional Algorithm.
 */
export interface BidiCharacterTest {
    /**
     * A sequence of hexadecimal code point values separated by space.
     * Example: "0041 0062 0063"
     */
    code_point_sequence: string;
    
    /**
     * A value representing the paragraph direction:
     * - 0 represents left-to-right
     * - 1 represents right-to-left
     * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm
     * Example: 0
     */
    paragraph_direction: "0" | "1" | "2";
    
    /**
     * The resolved paragraph embedding level.
     * Example: 0
     */
    resolved_paragraph_embedding_level: number;
    
    /**
     * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
     * Example: "0 1 1 x"
     */
    resolved_levels: string;
    
    /**
     * A list of indices showing the resulting visual ordering from left to right;
     * characters with a resolved level of 'x' are skipped.
     * Example: "0 1 2"
     */
    visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
    "code_point_sequence",
    "paragraph_direction",
    "resolved_paragraph_embedding_level",
    "resolved_levels",
    "visual_ordering_indices"
];
//#endregion

//#region data-files/v12.0.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mappings of Unicode characters that have the Bidi_Mirrored=Yes property.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value.
     * Example: '0041' for the character 'A'.
     */
    source_code_point: string;

    /**
     * The mirrored code point represented as a hexadecimal value.
     * Example: '0042' for the character 'B' which is the mirror of 'A'.
     */
    mirrored_code_point: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source_code_point",
    "mirrored_code_point"
];
//#endregion

//#region data-files/v12.0.0/BidiTest.txt
/**
 * This interface represents the structure of the BidiTest data.
 */
export interface BidiTest {
  /**
   * A Levels line indicates that all following data lines, up to the next Levels line,
   * have the same resulting ordering levels.
   * Format: @Levels: <levels>
   * Example: @Levels: 1 0
   */
  levels: string;

  /**
   * A Reorder line indicates that all following data lines, up to the next Reorder line,
   * have the same resulting reordering.
   * Format: @Reorder: <ordering>
   * Example: @Reorder: 1 0
   */
  reorder: string;

  /**
   * A data line has the following format: <input> ; <bitset>
   * <input> = An ordered list of BIDI property values
   * <bitset> = A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL
   * Example: L LRE R R; 7
   */
  data: string;
}

export const BIDI_TEST_FIELDS = ["levels", "reorder", "data"];
//#endregion

//#region data-files/v12.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041)
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A)
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v12.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}'?.
     * Example: "1", "12", "123'"
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻", "氵"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: "人", "水"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v12.0.0/CaseFolding.txt
/**
 * Interface representing the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: '0041' for 'A'
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following:
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that may cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: 'C', 'F', 'S', 'T'
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: '0061' for 'a', or '0061 0301' for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: 'LATIN CAPITAL LETTER A'
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v12.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusions defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, e.g., "2018-08-03"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_url: string;

    /**
     * A description of the file's purpose.
     */
    description: string;

    /**
     * The URL for more information on composition exclusions.
     * Example: "http://www.unicode.org/unicode/reports/tr15/#Primary_Exclusion_List_Table"
     */
    composition_exclusion_info_url: string;

    /**
     * The URL for the derived property Full_Composition_Exclusion.
     * Example: "DerivedNormalizationProps.txt"
     */
    full_composition_exclusion_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "unicode_character_database_url",
    "description",
    "composition_exclusion_info_url",
    "full_composition_exclusion_url"
];
//#endregion

//#region data-files/v12.0.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
  /**
   * The Unicode code point assigned to a character, format, control, or private-use.
   * Example: U+0041 for 'A'
   */
  code_point: string;

  /**
   * The version of Unicode in which the code point was first assigned.
   * Example: "1.1"
   */
  version: string;

  /**
   * Indicates the type of the code point assigned.
   * Can be one of the following types: "graphic", "format", "control", "private-use", "surrogate", "noncharacter".
   */
  type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";
}

export const DERIVED_AGE_FIELDS = [
  "code_point",
  "version",
  "type"
];
//#endregion

//#region data-files/v12.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties defined in the DerivedCoreProperties Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode version of the data.
     * Format: "X.Y.Z" where X, Y, and Z are integers.
     * Example: "12.0.0"
     */
    unicode_version: string;

    /**
     * The date when the data was last updated.
     * Format: ISO 8601 date string.
     * Example: "2019-01-22T08:18:27Z"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Format: Valid URL string.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Format: Valid URL string.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "unicode_version",
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalizationProps.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form to be applied. Possible values are "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility normalization.
     * Example: true
     */
    compatibility: boolean;

    /**
     * The character set to be used for normalization. Possible values are "NORM", "NORM_COMPAT".
     * Example: "NORM"
     */
    character_set: "NORM" | "NORM_COMPAT";

    /**
     * The options for normalization, which can include various flags.
     * Example: { ignore_case: true, strip_accents: false }
     */
    options: { ignore_case?: boolean; strip_accents?: boolean };
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "compatibility",
    "character_set",
    "options"
];
//#endregion

//#region data-files/v12.0.0/EastAsianWidth.txt
/**
 * East_Asian_Width Property
 *
 * This interface represents the East Asian Width property as defined in the Unicode Character Database.
 *
 * The format consists of two fields:
 * - `code_point`: A Unicode code point value or range of code point values (e.g., U+3400..U+4DBF).
 * - `east_asian_width`: The East Asian Width property, which can be one of the following values:
 *   - "A": Ambiguous
 *   - "F": Full-width
 *   - "H": Half-width
 *   - "N": Neutral
 *   - "Na": Narrow
 *   - "W": Wide
 *
 * All code points not explicitly listed are given the value "N". Unassigned code points in specific blocks default to "W".
 */
export interface EastAsianWidth {
  code_point: string;
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "code_point",
  "east_asian_width"
];
//#endregion

//#region data-files/v12.0.0/EmojiSources.txt
/**
 * This interface represents the mappings between Unicode code points and sequences and their corresponding Shift-JIS codes for different cell phone carriers.
 */
export interface EmojiSources {
  /**
   * The Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * The DoCoMo Shift-JIS code corresponding to the Unicode character or sequence.
   * Example: "0xF8A0"
   */
  docomo_shift_jis_code: string;
  /**
   * The KDDI Shift-JIS code corresponding to the Unicode character or sequence.
   * Example: "0xF8A1"
   */
  kddi_shift_jis_code: string;
  /**
   * The SoftBank Shift-JIS code corresponding to the Unicode character or sequence.
   * Example: "0xF8A2"
   */
  softbank_shift_jis_code: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v12.0.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and its corresponding equivalent ideograph.
 */
export interface EquivalentUnifiedIdeograph {
  /**
   * The source code point or code point range represented as a variable-length hexadecimal value.
   * Example: '4E00' or '4E00-4E0F'
   */
  source: string;

  /**
   * The equivalent CJK unified ideograph represented as a variable-length hexadecimal value.
   * Example: '4E8C'
   */
  equivalent: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "source",
  "equivalent"
];
//#endregion

//#region data-files/v12.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type identifier.
     * Format: "C", "V", "CV", etc.
     * Example: "C"
     */
    type: "C" | "V" | "CV";

    /**
     * The description of the syllable type.
     * Example: "Consonant"
     */
    description: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "type",
    "description"
];
//#endregion

//#region data-files/v12.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property aimed at the specification of syllabic structure for Indic scripts.
 *
 * The property is designed primarily to supplement the Indic_Syllabic_Category property.
 *
 * The following fields are included:
 *
 * - `unicode_code_point`: The Unicode code point value or range of code point values.
 *   - Format: A single code point (e.g., U+0BC1) or a range (e.g., U+0BC1..U+0BC2).
 *
 * - `indic_positional_category`: The Indic Positional Category property value.
 *   - Possible values include "Top", "Bottom", "Left", "Right", etc.
 *
 * - `comment`: A comment field that provides additional information about the character.
 *   - Format: Starts with a number sign '#', followed by the General_Category property value, Unicode character name(s), and code point count in square brackets for ranges.
 */
export interface IndicPositionalCategory {
  unicode_code_point: string;
  indic_positional_category: "Top" | "Bottom" | "Left" | "Right";
  comment: string;
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
  "unicode_code_point",
  "indic_positional_category",
  "comment"
];
//#endregion

//#region data-files/v12.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The property specifies the syllabic structure and segmentation rules for Indic scripts.
 *
 * The following scripts are assessed as Indic in the structural sense:
 * Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
 * Chakma, Cham, Devanagari, Dogra, Grantha, Gujarati, Gunjala Gondi,
 * Gurmukhi, Hanunoo, Javanese, Kaithi, Kannada, Kayah Li, Kharoshthi,
 * Khmer, Khojki, Khudawadi, Lao, Lepcha, Limbu, Mahajani, Makasar,
 * Malayalam, Marchen, Masaram Gondi, Meetei Mayek, Modi, Multani,
 * Myanmar, Nandinagari, Newa, New Tai Lue, Oriya, Phags-pa, Rejang,
 * Saurashtra, Sharada, Siddham, Sinhala, Soyombo, Sundanese, Syloti
 * Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham, Tai Viet, Takri, Tamil,
 * Telugu, Thai, Tibetan, Tirhuta, and Zanabazar Square.
 *
 * All characters for all other scripts not in that list take the default value for this property.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0900" or "U+0900-U+0903"
     */
    unicode_code_point: string;

    /**
     * Indic Syllabic Category property value.
     * Possible values include: "Vowel", "Consonant", "Consonant_Dead", "Vowel_Independent", etc.
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Consonant_Dead" | "Vowel_Independent";

    /**
     * Comment field showing the General_Category property value, the Unicode character name or names,
     * and, in lines with ranges of code points, the code point count in square brackets.
     * Example: "# Mn 0300 Combining Grave Accent [3]"
     */
    comment: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category",
    "comment"
];
//#endregion

//#region data-files/v12.0.0/Jamo.txt
/**
 * Interface representing the Jamo_Short_Name property.
 */
export interface Jamo {
    /**
     * The code point of a conjoining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo_Short_Name as a one-, two-, or three-character ASCII string.
     * Example: 'G' or 'GG'
     */
    jamo_short_name: string;
}

export const JAMO_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v12.0.0/LineBreak.txt
/**
 * This interface represents the Line Break property data as defined in the Unicode Character Database.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0041 or U+0041..U+005A
     */
    code_point: string;

    /**
     * Line Break property, which can be one of the following:
     * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
     * - Tailorable: "AI", "AL", "B2", "BA", "BB", "CB", "CJ", "CL", "CP", "EB",
     *   "EM", "EX", "H2", "H3", "HL", "HY", "ID", "IN", "IS", "JL",
     *   "JT", "JV", "NS", "NU", "OP", "PO", "PR", "QU", "RI", "SA",
     *   "SG", "SY", "XX"
     * Example: "BK"
     */
    line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                       "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | 
                       "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | 
                       "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | 
                       "SG" | "SY" | "XX";
}

export const LINE_BREAK_FIELDS = [
    "code_point",
    "line_break_property"
] as const;
//#endregion

//#region data-files/v12.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented as a hexadecimal string.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a formal name or an alternate name.
   * Example: "LATIN CAPITAL LETTER A".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", or "abbreviation".
   * Comparisons of type labels should ignore case.
   * Example: "control".
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v12.0.0/NamedSequences.txt
/**
 * Unicode Named Character Sequences
 *
 * This interface represents the named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = ["name", "code_point_sequence"];
//#endregion

//#region data-files/v12.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the named character sequences that have been designated to be provisional, rather than fully approved.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;
    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v12.0.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections as defined in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041" for 'A').
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered into UnicodeData.txt, in n.n.n format (e.g., "12.0.0").
     */
    unicode_version: string;

    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v12.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points to be normalized.
     * Example: "U+0041; U+0061"
     */
    source: string;
    /**
     * The normalized form in NFC.
     * Example: "U+0041"
     */
    nfc: string;
    /**
     * The normalized form in NFD.
     * Example: "U+0061"
     */
    nfd: string;
    /**
     * The normalized form in NFKC.
     * Example: "U+0041"
     */
    nfkc: string;
    /**
     * The normalized form in NFKD.
     * Example: "U+0061"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v12.0.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database for Nushu sources.
 */
export interface NushuSources {
    /**
     * The date of the data file in GMT format.
     * Example: "2018-08-03T00:00:00Z"
     */
    date: string;
    /**
     * Copyright information for the data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;
    /**
     * URL for terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * Documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v12.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date of the file creation in GMT format.
     * Example: "2019-01-22, 08:18:34 GMT"
     */
    date: string;
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database.
 * The properties include short names, long names, and additional aliases for Unicode data.
 */
export interface PropertyAliases {
    /**
     * Short name for the property, typically an abbreviation or duplicate of the long name.
     * Example: "AL"
     */
    short_name: string;

    /**
     * Long name for the property, typically the formal name used in documentation.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property, which may be useful in various contexts.
     * Example: "Arabic Letter, AL"
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v12.0.0/PropertyValueAliases.txt
/**
 * This interface represents the aliases for property values used in the Unicode Character Database (UCD).
 * Each property value name consists of multiple fields that describe the property and its values.
 */
export interface PropertyValueAliases {
    /**
     * The property for which the property value name is used.
     * Example: "Bidi_Class"
     */
    property: string;

    /**
     * The short name for the property value, typically an abbreviation or duplicate of the long name.
     * Example: "AL"
     */
    short_name: string;

    /**
     * The long name for the property value, typically the formal name used in documentation.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property value, if any.
     * Example: "Arabic Letter"
     */
    additional_aliases?: string[];
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
    "property",
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v12.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the Unicode Script Extensions property,
 * indicating which characters are commonly used with more than one script.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values.
     * The ordering of the values in that set is not material, but for stability in presentation
     * it is given here as alphabetical.
     * 
     * Example: "Latin, Greek"
     */
    script_extensions: "string";
    /**
     * A list of code points associated with the Script_Extensions value,
     * listed in code point order.
     * 
     * Example: "U+0041, U+0042"
     */
    code_points: "string";
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_extensions",
    "code_points"
];
//#endregion

//#region data-files/v12.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The script name, e.g., "Latin".
     */
    script_name: string;
    /**
     * The script code, e.g., "Latn".
     */
    script_code: string;
    /**
     * The range of Unicode code points for the script, e.g., "U+0000-U+007F".
     */
    code_point_range: string;
    /**
     * The direction of the script, e.g., "LTR" or "RTL".
     */
    direction: "LTR" | "RTL";
    /**
     * A brief description of the script.
     */
    description: string;
}

export const SCRIPTS_FIELDS = [
    "script_name",
    "script_code",
    "code_point_range",
    "direction",
    "description"
];
//#endregion

//#region data-files/v12.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior of casing.
     * This can include language IDs or casing contexts, separated by spaces.
     * Example: "en US" for English (United States)
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     * Example: "Uppercase mapping for Latin letters"
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v12.0.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Format: A sequence of characters representing the variation.
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Bold", "Italic"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Text", "Graphic"
   */
  shaping_environment: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environment"
];
//#endregion

//#region data-files/v12.0.0/TangutSources.txt
/**
 * This interface represents the data structure for TangutSources.
 */
export interface TangutSources {
    /**
     * The date of the file creation in GMT format.
     * Example: "2019-01-09T19:34:00Z"
     */
    date: string;
    /**
     * The copyright information for the file.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
    /**
     * Indicates if the file is a normative contributory data file.
     * Example: true
     */
    is_normative: boolean;
}

export const TANGUT_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "is_normative"
];
//#endregion

//#region data-files/v12.0.0/USourceData.txt
/**
 * Interface representing the basic data for U-source ideographs.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "A": Encoded in Extension A
     * - "B": Encoded in Extension B
     * - "C": Encoded in Extension C
     * - "D": Encoded in Extension D
     * - "E": Encoded in Extension E
     * - "F": Encoded in Extension F
     * - "G": Submitted by the UTC for IRG Working Set 2015
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded in the URO
     * - "UNC-2013": Included in the UTC's 2013 "Urgently Needed Characters" proposal
     * - "UNC-2015": Included in the UTC's 2015 "Urgently Needed Characters" proposal
     * - "UK-2015": Submitted by the UK for IRG Working Set 2015
     * - "V": Variant of an encoded character
     * - "W": Not suitable for encoding as a CJK Unified Ideograph
     * - "WS-2017": Submitted by the UTC for IRG Working Set 2017
     * - "X": No action taken
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: "A" | "B" | "C" | "D" | "E" | "F" | "G" | "N" | "U" | "UNC-2013" | "UNC-2015" | "UK-2015" | "V" | "W" | "WS-2017" | "X" | `"(UTC-\d{5})|(UCI-\d{5})`;

    /**
     * A Unicode code point. If the status is "V", this specifies the encoded character for which this entry is a variant.
     * Otherwise, it specifies the encoded character for this entry.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s).
     */
    sources: string;

    /**
     * General comments.
     */
    general_comments?: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources",
    "general_comments"
];
//#endregion

//#region data-files/v12.0.0/VerticalOrientation.txt
/**
 * This interface defines the Vertical_Orientation property as per Unicode specifications.
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     * Example: U+0041 for 'A' or U+0030..U+0039 for digits 0-9.
     */
    code_point: string;

    /**
     * Vertical_Orientation property value, which can be one of the following:
     * - "U" for Upright, the same orientation as in the code charts.
     * - "R" for Rotated 90 degrees clockwise compared to the code charts.
     * - "Tu" for Transformed typographically, with fallback to Upright.
     * - "Tr" for Transformed typographically, with fallback to Rotated.
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the file DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The date of the file creation in GMT format.
     * Example: "2019-01-22, 08:18:26 GMT"
     */
    date: string;
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties as defined in the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, e.g., "2019-01-22"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Format: URL, e.g., "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Format: URL, e.g., "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the DerivedCombiningClass data structure.
 */
export interface DerivedCombiningClass {
    /**
     * The date when the data was created or modified.
     * Format: YYYY-MM-DD, e.g., "2019-01-22"
     */
    date: string;
    /**
     * The copyright information related to the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Format: URL, e.g., "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Format: URL, e.g., "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2019-01-22T08:18:28Z"
     */
    date: string;

    /**
     * The copyright information for the document.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * The Unicode logo trademark information.
     * Example: "Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries."
     */
    trademark_info: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "trademark_info"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data from Unicode Character Database.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+0041"
     */
    character: string;
    
    /**
     * The East Asian Width property of the character.
     * Example: "Narrow"
     */
    east_asian_width: "Narrow" | "Wide" | "Fullwidth" | "Halfwidth" | "Narrow" | "Ambiguous";
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The name of the derived general category.
     * Example: "Lu"
     */
    name: string;

    /**
     * The description of the derived general category.
     * Example: "Uppercase Letter"
     */
    description: string;

    /**
     * The code point range for the derived general category.
     * Example: "U+0041..U+005A"
     */
    code_point_range: string;

    /**
     * The properties associated with the derived general category.
     * Example: "{ 'Uppercase': true }"
     */
    properties: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "name",
    "description",
    "code_point_range",
    "properties"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The derived joining group name.
     * Example: "Left" or "Right"
     */
    derived_joining_group: "Left" | "Right" | "Dual";

    /**
     * The characters that belong to this derived joining group.
     * Example: "U+0627", "U+0628"
     */
    characters: string[];

    /**
     * The properties associated with the derived joining group.
     * Example: "JoiningType"
     */
    properties: string[];
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "derived_joining_group",
    "characters",
    "properties"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining type.
 */
export interface DerivedJoiningType {
    /**
     * The joining type of the character.
     * Can be one of the following: "U", "C", "D", "R", "L", "T", "A", "E", "N".
     * Example: "U"
     */
    joining_type: "U" | "C" | "D" | "R" | "L" | "T" | "A" | "E" | "N";

    /**
     * The character code point in hexadecimal format.
     * Example: "0x0041" for 'A'
     */
    code_point: string;

    /**
     * The character name as defined in the Unicode Character Database.
     * Example: "LATIN CAPITAL LETTER A"
     */
    character_name: string;

    /**
     * The directionality of the character.
     * Can be one of the following: "L", "R", "AL", "EN", "ES", "CS", "ET", "AN", "BN", "NSM", "B", "S", "WS", "ON".
     * Example: "L"
     */
    directionality: "L" | "R" | "AL" | "EN" | "ES" | "CS" | "ET" | "AN" | "BN" | "NSM" | "B" | "S" | "WS" | "ON";

    /**
     * The category of the character.
     * Can be one of the following: "Lu", "Ll", "Lt", "Lm", "Lo", "Mn", "Mc", "Me", "Nd", "Nl", "No", "Pc", "Pd", "Ps", "Pe", "Pi", "Pf", "Po", "Sm", "Sc", "Sk", "So", "Zs", "Zl", "Zp".
     * Example: "Lu"
     */
    category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character_name",
    "directionality",
    "category"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2019-01-22T08:18:29Z"
     */
    date: string;
    /**
     * The copyright information for the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedName.txt
/**
 * This interface represents the derived name values for Unicode characters.
 */
export interface DerivedName {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+4E12 or U+2F89F
     */
    unicode_code_point: string;

    /**
     * Name property value or pattern derived from the code point.
     * Example: CJK UNIFIED IDEOGRAPH-* or CJK COMPATIBILITY IDEOGRAPH-*
     */
    name_property_value: string;
}

export const DERIVED_NAME_FIELDS = [
    "unicode_code_point",
    "name_property_value"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The date of the derived numeric type in ISO 8601 format.
     * Example: "2019-01-22T08:18:31Z"
     */
    date: string;
    /**
     * The copyright information for the derived numeric type.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as per Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character.
     * Example: "1.0"
     */
    numeric_value: string;
    
    /**
     * The numeric value in decimal format.
     * Example: "1.0"
     */
    numeric_value_decimal: string;
    
    /**
     * The numeric value in hexadecimal format.
     * Example: "0x1"
     */
    numeric_value_hexadecimal: string;
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_value_decimal",
    "numeric_value_hexadecimal"
];
//#endregion

//#region data-files/v12.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The grapheme break property value.
     * 
     * This property indicates how characters can be broken into graphemes.
     * Possible values include:
     * - "CR": Carriage Return
     * - "LF": Line Feed
     * - "Control": Control characters
     * - "Extend": Characters that can be extended
     * - "Regional_Indicator": Regional indicator symbols
     * - "Prepend": Characters that can be prepended
     * - "SpacingMark": Spacing marks
     * - "L": Letter
     * - "V": Vowel
     * - "T": Tone
     * - "LV": Consonant + Vowel
     * - "LVT": Consonant + Vowel + Tone
     * 
     * Example: "L"
     */
    grapheme_break_property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "grapheme_break_property"
];
//#endregion

//#region data-files/v12.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the default Grapheme Cluster Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;

    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v12.0.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 *
 * This interface represents the default line break test format.
 *
 * The format consists of a string that may contain hex Unicode code points,
 * optionally followed by a comment in parentheses.
 *
 * Example:
 * "0041 (LATIN CAPITAL LETTER A)"
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points, with an optional comment.
     *
     * Example: "0041 (LATIN CAPITAL LETTER A)"
     */
    line_break: string;
}

export const LINE_BREAK_TEST_FIELDS = ["line_break"];
//#endregion

//#region data-files/v12.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties defined in the SentenceBreakProperty Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The Unicode character code point for the character.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    code_point: string;

    /**
     * The category of the character according to Unicode.
     * Example values: "CR", "LF", "Control"
     */
    category: "CR" | "LF" | "Control" | string;

    /**
     * The description of the character's function in sentence breaking.
     * Example: "Line Feed"
     */
    description: string;

    /**
     * The Unicode version in which this property was introduced.
     * Format: X.Y (e.g., 12.0)
     */
    version: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "code_point",
    "category",
    "description",
    "version"
];
//#endregion

//#region data-files/v12.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Format: <string> (# <comment>)?
     * Example: "0041 0042 0043 (# Latin Capital Letters)"
     */
    unicode_code_points: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "unicode_code_points"
];
//#endregion

//#region data-files/v12.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty data structure.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * 
     * This property can take one of the following values: "normal", "break-all", "keep-all", "break-word".
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all" | "break-word";

    /**
     * The description of the word break property.
     * 
     * This is a textual description of the property.
     * Example: "This property defines how words should be broken when reaching the end of a line."
     */
    description: string;
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break",
    "description"
];
//#endregion

//#region data-files/v12.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the WordBreakTest data structure.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

