// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 5.2

//#region data-files/v5.2.0/ArabicShaping.txt
/**
 * This interface defines the shaping classes for Arabic, Syriac, and N'Ko positional shaping.
 * Each character is represented with its code point, name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point, in 4-digit hexadecimal form, of an Arabic, Syriac, or N'Ko character.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for that character, abbreviated from the normative Unicode character name.
     * Example: 'TEH MARBUTA'
     */
    short_name: string;

    /**
     * Defines the joining type of the character.
     * Possible values: "R", "L", "D", "C", "U", "T"
     * Example: 'R' for Right_Joining
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * Defines the joining group of the character based on its name.
     * Example: 'TEH_MARBUTA' for the character 'TEH MARBUTA'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "short_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v5.2.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph Property data from the Unicode Character Database.
 */
export interface BidiMirroring {
    /**
     * The code point of the original character represented as a hexadecimal value.
     * Example: '0041' for 'A'
     */
    original_code_point: string;

    /**
     * The code point of the mirrored character represented as a hexadecimal value.
     * Example: '0061' for 'a'
     */
    mirrored_code_point: string;

    /**
     * Indicates if the mirroring is a "BEST FIT".
     * This is a boolean value where true means it is the best fit for mirroring.
     */
    best_fit: boolean;
}

export const BIDI_MIRRORING_FIELDS = [
    "original_code_point",
    "mirrored_code_point",
    "best_fit"
];
//#endregion

//#region data-files/v5.2.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test for UBA (Unicode Bidi Algorithm) implementations.
 */
export interface BidiTest {
    /**
     * The bidi class property value, indicating the type of character.
     * Example: "AN"
     */
    bidi_class: string;

    /**
     * A set of codepoints with the specified bidi class property value.
     * Example: "[\u0600-\u0603\u0660-\u0669\u066B\u066C\u06DD]"
     */
    set: string;

    /**
     * An ordered space-delimited list of numbers indicating the resulting levels for each input property value.
     * Example: "1 0"
     */
    levels: string;

    /**
     * An ordered space-delimited list of numbers indicating the resulting ordering from left to right.
     * Example: "1 0"
     */
    reorder: string;

    /**
     * An ordered list of BIDI property values.
     * Example: "L LRE R R"
     */
    input: string;

    /**
     * A bitset for paragraph levels (P): 1 = automatic, 2 = LTR, 4 = RTL.
     * Example: "7"
     */
    bitset: number;
}

export const BIDI_TEST_FIELDS = [
    "bidi_class",
    "set",
    "levels",
    "reorder",
    "input",
    "bitset"
];
//#endregion

//#region data-files/v5.2.0/Blocks.txt
/**
 * Interface representing Unicode character blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A for 'z')
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v5.2.0/CJKRadicals.txt
/**
 * Interface representing the mapping from radical numbers to CJK characters.
 */
export interface CJKRadicals {
    /**
     * The radical number, which can be a number between 0 and 999, and may end with an apostrophe.
     * Example: "123'"
     */
    radical_number: string;

    /**
     * The CJK Radical character corresponding to the radical number.
     * Example: "氵"
     */
    cjk_radical: string;

    /**
     * The CJK Unified Ideograph formed from the radical.
     * Example: "水"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "radical_number",
    "cjk_radical",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v5.2.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following: "C" (common), "F" (full), "S" (simple), or "T" (Turkic special case).
     * Example: "C"
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: "0061" for 'a' or "0061 0301" for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: "LATIN CAPITAL LETTER A"
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v5.2.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The characters that are excluded from composition.
     * Example: "U+0020" for space character.
     */
    excluded_characters: string;

    /**
     * The date when the exclusions were last updated.
     * Format: YYYY-MM-DD, e.g., "2009-05-22".
     */
    last_updated: string;

    /**
     * The copyright information regarding the exclusions.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;

    /**
     * The URL for terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for more information on the exclusions.
     * Example: "http://www.unicode.org/unicode/reports/tr15/#Primary Exclusion List Table"
     */
    more_info_url: string;

    /**
     * The URL for the derived property Full_Composition_Exclusion.
     * Example: "DerivedNormalizationProps.txt"
     */
    derived_property_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "excluded_characters",
    "last_updated",
    "copyright",
    "terms_of_use_url",
    "more_info_url",
    "derived_property_url"
];
//#endregion

//#region data-files/v5.2.0/DerivedAge.txt
/**
 * This interface represents the derived properties of Unicode characters, detailing when various code points were first assigned.
 */
export interface DerivedAge {
    /**
     * The date when the code point was assigned.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2009-09-17, 22:52:52 GMT"
     */
    assigned_date: string;

    /**
     * The version of Unicode in which the code point was assigned.
     * Format: Major.Minor.Patch
     * Example: "5.2.0"
     */
    unicode_version: string;

    /**
     * The type of the code point assigned.
     * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

    /**
     * Notes regarding the assignment of the code point.
     * Example: "The term 'assigned' means that a previously reserved code point was assigned to be a character."
     */
    notes: string;
}

export const DERIVED_AGE_FIELDS = [
    "assigned_date",
    "unicode_version",
    "code_point_type",
    "notes"
];
//#endregion

//#region data-files/v5.2.0/DerivedCoreProperties.txt
/**
 * Interface representing the derived core properties from the Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character's general category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character's script.
     * Example: "Latin" for Latin script characters.
     */
    script: string;

    /**
     * The Unicode character's numeric value, if applicable.
     * Example: "3.14" for the character 'π'.
     */
    numeric_value?: string;

    /**
     * The Unicode character's bidirectional category.
     * Example: "L" for left-to-right characters.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The Unicode character's combining class.
     * Example: "0" for base characters.
     */
    combining_class: number;

    /**
     * The Unicode character's decomposition mapping.
     * Example: "0041" for the character 'A'.
     */
    decomposition?: string;

    /**
     * The Unicode character's uppercase mapping.
     * Example: "0041" for the character 'a'.
     */
    uppercase_mapping?: string;

    /**
     * The Unicode character's lowercase mapping.
     * Example: "0061" for the character 'A'.
     */
    lowercase_mapping?: string;

    /**
     * The Unicode character's titlecase mapping.
     * Example: "0041" for the character 'a'.
     */
    titlecase_mapping?: string;

    /**
     * The Unicode character's numeric type.
     * Example: "decimal" for decimal numbers.
     */
    numeric_type?: "decimal" | "fraction" | "currency";
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "general_category",
    "script",
    "numeric_value",
    "bidi_category",
    "combining_class",
    "decomposition",
    "uppercase_mapping",
    "lowercase_mapping",
    "titlecase_mapping",
    "numeric_type"
];
//#endregion

//#region data-files/v5.2.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties for DerivedNormalization.
 */
export interface DerivedNormalizationProps {
    /**
     * The Unicode character that is being normalized.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_character: string;

    /**
     * The normalization form to be applied.
     * Example: "NFC", "NFD", "NFKC", "NFKD".
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A flag indicating whether to ignore case during normalization.
     * Example: true or false.
     */
    ignore_case: boolean;

    /**
     * The version of the Unicode standard being used.
     * Example: "5.2.0".
     */
    unicode_version: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "unicode_character",
    "normalization_form",
    "ignore_case",
    "unicode_version"
];
//#endregion

//#region data-files/v5.2.0/EastAsianWidth.txt
/**
 * EastAsianWidth
 *
 * This interface represents the East Asian Width properties for Unicode characters.
 * Each character is associated with a Unicode value and its corresponding East Asian Width property.
 *
 * The East Asian Width property can take one of the following values:
 * - "N": Not East Asian
 * - "A": Ambiguous
 * - "H": Half-width
 * - "W": Full-width
 * - "F": Full-width (for compatibility)
 * - "Na": Not applicable
 *
 * All code points not explicitly listed are given the value "N".
 * Unassigned code points that default to "W" include ranges in specific blocks.
 *
 * See UAX #11: East Asian Width for more information.
 */
export interface EastAsianWidth {
    /**
     * The Unicode value of the character.
     * Format: U+XXXX (where XXXX is a hexadecimal value)
     */
    unicode_value: string;

    /**
     * The East Asian Width property of the character.
     * Possible values: "N", "A", "H", "W", "F", "Na"
     */
    east_asian_width_property: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "unicode_value",
    "east_asian_width_property"
];
//#endregion

//#region data-files/v5.2.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "A", "B", etc.
     */
    code: "A" | "B" | "C";

    /**
     * The description of the syllable type.
     * Example: "Consonant + Vowel"
     */
    description: string;

    /**
     * The Unicode value associated with the syllable type.
     * Format: U+AC00, U+AC01, etc.
     */
    unicode: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "code",
    "description",
    "unicode"
];
//#endregion

//#region data-files/v5.2.0/Jamo.txt
/**
 * Interface representing the Jamo Short Name property.
 */
export interface Jamo {
    /**
     * The code point of a combining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo Short Name as a one-, two-, or three-character ASCII string.
     * Example: 'G', 'GG', 'N'
     */
    jamo_short_name: string;
}

export const JAMO_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v5.2.0/LineBreak.txt
/**
 * LineBreak interface representing the line break properties of Unicode characters.
 */
export interface LineBreak {
    /**
     * Unicode value of the character.
     * Example: U+0041 for 'A'
     */
    unicode_value: string;

    /**
     * LineBreak property of the character.
     * Can be one of the following:
     * - Normative: "BK", "CR", "LF", "CM", "SG", "GL", "CB", "SP", "ZW", "NL", "WJ", "JL", "JV", "JT", "H2", "H3"
     * - Informative: "XX", "OP", "CL", "CP", "QU", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BB", "BA", "SA", "AI", "B2"
     * Unassigned code points default to "XX".
     * Example: "CR" for carriage return
     */
    line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "CP" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2";
}

export const LINE_BREAK_FIELDS = [
    "unicode_value",
    "line_break_property"
];
//#endregion

//#region data-files/v5.2.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
    /**
     * The code point of the Unicode character, represented as a hexadecimal string.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The alias assigned to the Unicode character.
     * Example: "LATIN CAPITAL LETTER A" for the character 'A'.
     */
    alias: string;
}

export const NAME_ALIASES_FIELDS = ["code_point", "alias"];
//#endregion

//#region data-files/v5.2.0/NamedSequences.txt
/**
 * Interface representing the NamedSequences data structure.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "Latin"
     */
    name: string;
    /**
     * The code point sequence for USI.
     * Example: "U+0041 U+0042 U+0043"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v5.2.0/NamedSequencesProv.txt
/**
 * Provisional Named Sequences
 *
 * This interface represents the provisional named sequences as defined in the Unicode Character Database.
 * Each sequence consists of a name and a corresponding code point sequence.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "LATIN SMALL LETTER A"
     */
    name: string;

    /**
     * The code point sequence for the named sequence.
     * Format: A semicolon-separated list of hexadecimal code points.
     * Example: "0061; 0062; 0063"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v5.2.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections as specified in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041").
     */
    unicode_code_point: string;
    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;
    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;
    /**
     * Version of Unicode for which the correction was entered, in n.n.n format (e.g., "5.2.0").
     */
    unicode_version: string;
    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v5.2.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite as defined in the Unicode Character Database.
 */
export interface NormalizationTest {
  /**
   * Conformance rule for NFC normalization.
   * Must satisfy: c2 == NFC(c1) == NFC(c2) == NFC(c3)
   * Example: If c1 is 'a', c2 must be the NFC of 'a'.
   */
  c2: string;

  /**
   * Conformance rule for NFD normalization.
   * Must satisfy: c3 == NFD(c1) == NFD(c2) == NFD(c3)
   * Example: If c1 is 'a', c3 must be the NFD of 'a'.
   */
  c3: string;

  /**
   * Conformance rule for NFKC normalization.
   * Must satisfy: c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)
   * Example: If c1 is 'a', c4 must be the NFKC of 'a'.
   */
  c4: string;

  /**
   * Conformance rule for NFKD normalization.
   * Must satisfy: c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)
   * Example: If c1 is 'a', c5 must be the NFKD of 'a'.
   */
  c5: string;

  /**
   * Code point X must satisfy: X == NFC(X) == NFD(X) == NFKC(X) == NFKD(X)
   * Example: If X is a code point, it must be equal to its NFC, NFD, NFKC, and NFKD forms.
   */
  X: string;
}

export const NORMALIZATION_TEST_FIELDS = [
  "c2",
  "c3",
  "c4",
  "c5",
  "X"
];
//#endregion

//#region data-files/v5.2.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date of the file creation in GMT format.
     * Example: "2009-08-22, 04:58:40 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation link for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.2.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database (UCD).
 *
 * The properties include:
 * - abbreviated_name: A short form of the property name.
 * - long_name: A detailed description of the property.
 * - additional_aliases: Any other names that may be used for the property.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * Example:
 * - abbreviated_name: "AL"
 * - long_name: "Arabic Letter"
 * - additional_aliases: ["Arabic_Letter", "AL"]
 */
export interface PropertyAliases {
  abbreviated_name: string;
  long_name: string;
  additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v5.2.0/PropertyValueAliases.txt
/**
 * This interface defines the property value aliases used in the Unicode Character Database (UCD).
 *
 * Each property value name consists of the following fields:
 * - property: The property for which the property value name is used.
 * - abbreviated_name: An abbreviated name for the property value, or 'n/a' if not available.
 * - long_name: A long descriptive name for the property value.
 *
 * In the case of the 'ccc' property, there are four fields:
 * - property: The property for which the property value name is used.
 * - numeric: A numeric representation of the property value.
 * - abbreviated_name: An abbreviated name for the property value.
 * - long_name: A long descriptive name for the property value.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * For more information, see UTS #18: Unicode Regular Expressions.
 */
export interface PropertyValueAliases {
  property: string;
  abbreviated_name: "n/a" | string;
  long_name: string;
  numeric?: number;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name",
  "numeric"
];
//#endregion

//#region data-files/v5.2.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface Scripts {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2009-08-22T04:58:43Z"
     */
    date: string;

    /**
     * The version of the scripts file.
     * Example: "5.2.0"
     */
    version: string;

    /**
     * Copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;

    /**
     * Terms of use URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * Documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.2.0/SpecialCasing.txt
/**
 * This interface represents the special casing properties of Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character in hexadecimal format.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior.
     * Example: "en" for English, "Not_fr" for not French
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the entry.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v5.2.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "U+E0100 U+E0101"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "This character appears as a bold version."
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "This character may appear differently in a specific font."
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived bidi class.
 */
export interface DerivedBidiClass {
    /**
     * The date of the entry in the format YYYY-MM-DD.
     * Example: "2009-08-26"
     */
    date: string;
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation reference for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The property name, represented as a string.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property, which can be one of several predefined options.
     * Example: "Y" or "N"
     */
    property_value: "Y" | "N";
    
    /**
     * A description of the property, providing additional context.
     * Example: "Indicates whether the character is a bidirectional control character."
     */
    description: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "description"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2009-08-22T04:58:13Z"
     */
    date: string;
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation link for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the Unicode Character Database derived decomposition type.
 */
export interface DerivedDecompositionType {
    /**
     * The decomposition mapping for the character.
     * Example: "<decomposition>"
     */
    decomposition: string;

    /**
     * The character's canonical combining class.
     * Example: 0 (for non-spacing marks)
     */
    canonical_combining_class: number;

    /**
     * The character's bidirectional category.
     * Example: "L" (for left-to-right)
     */
    bidirectional_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B" | "S" | "WS" | "ON";

    /**
     * The character's numeric value, if applicable.
     * Example: 1.5
     */
    numeric_value?: number;

    /**
     * The character's script.
     * Example: "Latin"
     */
    script: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "decomposition",
    "canonical_combining_class",
    "bidirectional_category",
    "numeric_value",
    "script"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the Derived East Asian Width data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The Unicode character code point.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    code_point: string;

    /**
     * The East Asian Width property of the character.
     * Possible values: "N", "A", "H", "W", "F", "Na"
     */
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";

    /**
     * The character itself, if applicable.
     */
    character?: string;

    /**
     * The name of the character, if available.
     */
    character_name?: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width",
    "character",
    "character_name"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the derived general category from the Unicode Character Database.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode code point of the character.
     * Example: 65 for 'A'.
     */
    code_point: number;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The numeric value of the character if applicable.
     * Example: 1.0 for '1'.
     */
    numeric_value?: number;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "code_point",
    "character_name",
    "numeric_value"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The name of the derived joining group.
     * Example: "LeftToRight"
     */
    name: string;

    /**
     * The type of the joining group.
     * Example: "Join_Causing"
     */
    type: "Join_Causing" | "Join_NonCausing";

    /**
     * The characters that belong to this joining group.
     * Example: "U+0041, U+0042"
     */
    characters: string;

    /**
     * The date when this joining group was last updated.
     * Format: YYYY-MM-DD
     * Example: "2009-05-22"
     */
    last_updated: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "name",
    "type",
    "characters",
    "last_updated"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining type.
 */
export interface DerivedJoiningType {
    /**
     * The character's derived joining type.
     * This can be one of the following values: "D", "R", "C", "T", "U", "A", "N".
     * Example: "D"
     */
    derived_joining_type: "D" | "R" | "C" | "T" | "U" | "A" | "N";

    /**
     * The character's code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The character's name in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The character's numeric value, if applicable.
     * Example: 65 for 'A'.
     */
    numeric_value?: number;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "derived_joining_type",
    "code_point",
    "character_name",
    "numeric_value"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in the format YYYY-MM-DD, HH:MM:SS GMT.
     * Example: "2009-08-22, 04:58:23 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation link for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: 1.0
     */
    value: number;

    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    type: "integer" | "decimal";

    /**
     * The character associated with the numeric value.
     * Example: 'A'
     */
    character: string;

    /**
     * The script associated with the character.
     * Example: "Latin"
     */
    script: string;

    /**
     * The version of the Unicode standard that this data is based on.
     * Example: "5.2.0"
     */
    version: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "value",
    "type",
    "character",
    "script",
    "version"
];
//#endregion

//#region data-files/v5.2.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value associated with a character.
     * Example: "1.0"
     */
    numeric_value: "string";
    /**
     * The type of numeric value.
     * Example: "decimal"
     */
    numeric_type: "string";
    /**
     * The character associated with the numeric value.
     * Example: "A"
     */
    character: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the GraphemeBreakProperty data.
 */
export interface GraphemeBreakProperty {
    /**
     * The Unicode character.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The grapheme break property of the character.
     * Example: "CR" for carriage return.
     */
    property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";

    /**
     * The description of the grapheme break property.
     * Example: "Carriage Return" for "CR".
     */
    description: string;
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property",
    "description"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the Grapheme Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0062 0063"
     */
    code_points: string;

    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 */
export interface LineBreakTest {
    /**
     * Date of the test in ISO 8601 format.
     * Example: "2009-09-19T00:42:14Z"
     */
    date: string;

    /**
     * Unicode Character Database copyright information.
     * Example: "Copyright (c) 1991-2009 Unicode, Inc."
     */
    copyright: string;

    /**
     * Terms of use URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * Documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation: string;

    /**
     * Format description for the line break test.
     * Example: "<string> (# <comment>)?"
     */
    format: string;

    /**
     * Description of the string format containing hex Unicode code points.
     * Example: "<string> contains hex Unicode code points, with"
     */
    string_description: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation",
    "format",
    "string_description"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties related to sentence breaking as defined in the Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The character that indicates a sentence break.
     * Example: '.'
     */
    sentence_break_character: string;

    /**
     * The type of sentence break.
     * Example: "other"
     */
    sentence_break_type: "other" | "CR" | "LF" | "Control" | "Sep" | "Format" | "Sp" | "Lower" | "Upper" | "ATerm" | "STerm" | "OTerm";

    /**
     * Indicates whether the character is a sentence terminator.
     * Example: true
     */
    is_sentence_terminator: boolean;

    /**
     * The Unicode code point of the character.
     * Example: 46 for '.'
     */
    code_point: number;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "sentence_break_character",
    "sentence_break_type",
    "is_sentence_terminator",
    "code_point"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/SentenceBreakTest.txt
/**
 * Default Sentence Break Test
 *
 * This interface represents the structure of the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the properties related to word breaking as defined in the Unicode Character Database.
 */
export interface WordBreakProperty {
    /**
     * Represents the word break property value.
     * Can be one of the following: "word", "nonword", "break", "no-break".
     * Example: "word" indicates a standard word break.
     */
    value: "word" | "nonword" | "break" | "no-break";

    /**
     * Indicates if the property is applicable to a specific character.
     * Example: true if the character has a defined word break property.
     */
    applicable: boolean;

    /**
     * The Unicode code point of the character.
     * Example: 0x0041 for 'A'.
     */
    code_point: number;

    /**
     * The name of the character associated with the word break property.
     * Example: "LATIN CAPITAL LETTER A" for 'A'.
     */
    character_name: string;
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "value",
    "applicable",
    "code_point",
    "character_name"
];
//#endregion

//#region data-files/v5.2.0/auxiliary/WordBreakTest.txt
/**
 * Default Word Break Test
 *
 * Format:
 * <string> (# <comment>)? 
 * <string> contains hex Unicode code points, with
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

