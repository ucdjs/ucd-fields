// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 12.1

//#region data-files/v12.1.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping characters, including their code points, names, joining types, and joining groups.
 */
export interface ArabicShaping {
    /**
     * The code point of the character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name.
     * Example: 'TEH_MARBUTA'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v12.1.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+298D"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+298D" or "<none>"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, one of the following: "o" for Open, "c" for Close, or "n" for None.
     * Example: "o" for Open, "c" for Close, "n" for None
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v12.1.0/BidiCharacterTest.txt
/**
 * BidiCharacterTest
 *
 * This interface represents a conformance test for implementations of the
 * Unicode Bidirectional Algorithm, specified in UAX #9. Each test case
 * consists of a single line of text with specific fields detailing the
 * character code points and their resolved levels.
 */
export interface BidiCharacterTest {
    /**
     * A sequence of hexadecimal code point values separated by space.
     * Example: "0041 005A 0627"
     */
    code_points: string;

    /**
     * A value representing the paragraph direction:
     * - 0 represents left-to-right
     * - 1 represents right-to-left
     * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
     * Example: 0
     */
    paragraph_direction: "0" | "1" | "2";

    /**
     * The resolved paragraph embedding level.
     * Example: 0
     */
    resolved_paragraph_embedding_level: number;

    /**
     * A list of resolved levels; characters removed in rule X9 are
     * indicated with an 'x'.
     * Example: "0 1 x 2"
     */
    resolved_levels: string;

    /**
     * A list of indices showing the resulting visual ordering from
     * left to right; characters with a resolved level of 'x' are skipped.
     * Example: "0 1 3"
     */
    visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
    "code_points",
    "paragraph_direction",
    "resolved_paragraph_embedding_level",
    "resolved_levels",
    "visual_ordering_indices"
];
//#endregion

//#region data-files/v12.1.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mapping of Unicode characters that have the Bidi_Mirrored=Yes property value.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value.
     * Example: '0041' for 'A'
     */
    source: string;

    /**
     * The mirrored code point represented as a hexadecimal value.
     * Example: '0061' for 'a'
     */
    mirrored: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source",
    "mirrored"
];
//#endregion

//#region data-files/v12.1.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest data, which provides a conformance test for UBA (Unicode Bidi Algorithm) implementations.
 */
export interface BidiTest {
    /**
     * A Levels line indicates that all following data lines, up to the next Levels line,
     * have the same resulting ordering levels.
     * Format: @Levels: <levels>
     * Example: @Levels: 1 0
     */
    levels: string;

    /**
     * A Reorder line indicates that all following data lines, up to the next Reorder line,
     * have the same resulting reordering.
     * Format: @Reorder: <ordering>
     * Example: @Reorder: 1 0
     */
    reorder: string;

    /**
     * A data line has the following format: <input> ; <bitset>
     * <input> = An ordered list of BIDI property values
     * <bitset> = A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL
     * Example: L LRE R R; 7
     */
    data: string;
}

export const BIDI_TEST_FIELDS = [
    "levels",
    "reorder",
    "data"
];
//#endregion

//#region data-files/v12.1.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A for 'z')
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v12.1.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}?'?
     * Example: "1", "12", "123'"
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻", "氵"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical.
     * Example: "人", "水"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v12.1.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character.
     * Format: Hexadecimal (e.g., U+0041 for 'A').
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Possible values: "C" (common), "F" (full), "S" (simple), "T" (Turkic special case).
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding.
     * Format: A single character or multiple characters separated by spaces.
     * Example: "a" for simple case folding, "ä a" for full case folding.
     */
    mapping: string;

    /**
     * The name of the character.
     * This is a descriptive name for the character represented by the code point.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v12.1.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusions defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD HH:MM:SS GMT
     * Example: "2019-03-08 23:59:00 GMT"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * The URL for more information on the primary exclusion list table.
     * Example: "http://www.unicode.org/unicode/reports/tr15/#Primary_Exclusion_List_Table"
     */
    primary_exclusion_list_url: string;

    /**
     * The URL for the derived property Full_Composition_Exclusion.
     * Example: "DerivedNormalizationProps.txt"
     */
    derived_property_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "primary_exclusion_list_url",
    "derived_property_url"
];
//#endregion

//#region data-files/v12.1.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
    /**
     * The date when the code point was first assigned in Unicode.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2019-04-01, 09:10:08 GMT"
     */
    assigned_date: string;

    /**
     * The version of Unicode in which the code point was assigned.
     * Format: Major.Minor.Patch
     * Example: "12.1.0"
     */
    unicode_version: string;

    /**
     * Indicates whether the code point is a graphic, format, control, private-use, surrogate, or noncharacter.
     * Example: "graphic"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";
}

export const DERIVED_AGE_FIELDS = [
    "assigned_date",
    "unicode_version",
    "code_point_type"
];
//#endregion

//#region data-files/v12.1.0/DerivedCoreProperties.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface DerivedCoreProperties {
    /**
     * The date when the data was generated in ISO 8601 format.
     * Example: "2019-03-10T10:53:06Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalizationProps.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility normalization.
     * Example: true
     */
    compatibility: boolean;

    /**
     * The version of the normalization algorithm used.
     * Example: "12.1.0"
     */
    version: string;

    /**
     * A description of the normalization properties.
     * Example: "Normalization properties for Unicode 12.1.0"
     */
    description: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "compatibility",
    "version",
    "description"
];
//#endregion

//#region data-files/v12.1.0/EastAsianWidth.txt
/**
 * East Asian Width Property
 *
 * This interface represents the East Asian Width property of Unicode characters.
 *
 * The East_Asian_Width property consists of the following values:
 * - "A": Ambiguous
 * - "F": Full-width
 * - "H": Half-width
 * - "N": Neutral
 * - "Na": Narrow
 * - "W": Wide
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 * The unassigned code points in specific blocks default to "W". For example:
 * - CJK Unified Ideographs Extension A: U+3400..U+4DBF
 * - CJK Unified Ideographs: U+4E00..U+9FFF
 * - CJK Compatibility Ideographs: U+F900..U+FAFF
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * For more information, see UAX #11: East Asian Width at http://www.unicode.org/reports/tr11/
 */
export interface EastAsianWidth {
    code_point: string;
    east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width"
];
//#endregion

//#region data-files/v12.1.0/EmojiSources.txt
/**
 * This interface represents the mappings between Unicode code points and sequences and their corresponding Shift-JIS codes for different cell phone carriers.
 */
export interface EmojiSources {
  /**
   * The Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * The DoCoMo Shift-JIS code corresponding to the Unicode character or sequence.
   * Example: "0xF8A0"
   */
  docomo_shift_jis_code: string;
  /**
   * The KDDI Shift-JIS code corresponding to the Unicode character or sequence.
   * Example: "0xF8A1"
   */
  kddi_shift_jis_code: string;
  /**
   * The SoftBank Shift-JIS code corresponding to the Unicode character or sequence.
   * Example: "0xF8A2"
   */
  softbank_shift_jis_code: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v12.1.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and its corresponding unified ideograph.
 */
export interface EquivalentUnifiedIdeograph {
  /**
   * A code point or code point range represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: '4E00' or '4E00-4E0F'
   */
  source: string;

  /**
   * A code point represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: '4E8C'
   */
  target: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "source",
  "target"
];
//#endregion

//#region data-files/v12.1.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "A", "B", etc.
     */
    code: "A" | "B" | "C";

    /**
     * The description of the syllable type.
     * Example: "Consonant + Vowel"
     */
    description: string;

    /**
     * The Unicode value of the syllable type.
     * Format: U+AC00, U+AC01, etc.
     */
    unicode: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "code",
    "description",
    "unicode"
];
//#endregion

//#region data-files/v12.1.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property aimed at the specification of syllabic structure for Indic scripts.
 *
 * The property is designed primarily to supplement the Indic_Syllabic_Category property.
 *
 * The following characters are assigned the positional categories:
 * - "Top"
 * - "Bottom"
 * - "Left"
 * - "Right"
 *
 * Each character may have contextually variable placement based on typeface design, historic period, or local conventions.
 *
 * Format:
 * - Field 0: Unicode code point value or range of code point values (e.g., U+0BC1)
 * - Field 1: Indic_Positional_Category property value (e.g., "Top")
 *
 * Note: All characters for scripts not listed take the default value for this property.
 */
export interface IndicPositionalCategory {
    unicode_code_point: string;
    indic_positional_category: "Top" | "Bottom" | "Left" | "Right";
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_positional_category"
];
//#endregion

//#region data-files/v12.1.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The properties defined in this interface are:
 * - `unicode_code_point`: A string representing the Unicode code point value or range of code point values. Example: "U+0900" or "U+0900-U+0903".
 * - `indic_syllabic_category`: A string representing the Indic Syllabic Category property value. Example: "Vowel", "Consonant", etc.
 * - `comment`: A string providing additional information, including the General_Category property value, Unicode character name(s), and code point count in square brackets. Example: "# Mn, Combining Enclosing Circle, [4]".
 */
export interface IndicSyllabicCategory {
    unicode_code_point: string;
    indic_syllabic_category: string;
    comment: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category",
    "comment"
];
//#endregion

//#region data-files/v12.1.0/Jamo.txt
/**
 * This interface defines the Jamo_Short_Name property.
 *
 * Each entry represents a conjoining jamo character that participates in the algorithmic determination of Hangul syllable character names.
 *
 * @property {"string"} code_point - The code point of a conjoining jamo character in 4-digit hexadecimal form (e.g., "1100").
 * @property {"string"} jamo_short_name - The Jamo_Short_Name as a one-, two-, or three-character ASCII string (e.g., "G", "GG", "N").
 */
export interface JamoShortName {
  code_point: string;
  jamo_short_name: string;
}

export const JAMO_SHORT_NAME_FIELDS = [
  "code_point",
  "jamo_short_name"
];
//#endregion

//#region data-files/v12.1.0/LineBreak.txt
/**
 * This interface represents the Line Break property data in the Unicode Character Database.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0041 or U+0041..U+005A
     */
    code_point: string;

    /**
     * Line Break property, which can be one of the following:
     * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
     * - Tailorable: "AI", "AL", "B2", "BA", "BB", "CB", "CJ", "CL", "CP", "EB",
     *   "EM", "EX", "H2", "H3", "HL", "HY", "ID", "IN", "IS", "JL",
     *   "JT", "JV", "NS", "NU", "OP", "PO", "PR", "QU", "RI", "SA",
     *   "SG", "SY", "XX"
     * Example: "BK"
     */
    line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                       "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | 
                       "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | 
                       "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | 
                       "SG" | "SY" | "XX";
}

export const LINE_BREAK_FIELDS = [
    "code_point",
    "line_break_property"
];
//#endregion

//#region data-files/v12.1.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented as a hexadecimal string.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a formal name or an abbreviation.
   * Example: "LATIN CAPITAL LETTER A" or "C1".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", or "abbreviation".
   * Comparisons of type labels should ignore case.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v12.1.0/NamedSequences.txt
/**
 * This interface represents the Unicode Named Character Sequences.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     */
    name: string;
    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v12.1.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v12.1.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections as specified in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041" for 'A').
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered, in n.n.n format (e.g., "12.1.0").
     */
    unicode_version: string;

    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v12.1.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
  /**
   * The source code points to be normalized.
   * Format: one or more code points separated by semicolons.
   * Example: "U+0041; U+0042"
   */
  source: string;

  /**
   * The normalized form of the source code points in NFC.
   * Format: one or more code points separated by semicolons.
   * Example: "U+0041"
   */
  nfc: string;

  /**
   * The normalized form of the source code points in NFD.
   * Format: one or more code points separated by semicolons.
   * Example: "U+0061"
   */
  nfd: string;

  /**
   * The normalized form of the source code points in NFKC.
   * Format: one or more code points separated by semicolons.
   * Example: "U+0041"
   */
  nfkc: string;

  /**
   * The normalized form of the source code points in NFKD.
   * Format: one or more code points separated by semicolons.
   * Example: "U+0061"
   */
  nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
  "source",
  "nfc",
  "nfd",
  "nfkc",
  "nfkd"
];
//#endregion

//#region data-files/v12.1.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database for Nushu sources.
 */
export interface NushuSources {
    /**
     * The date of the data entry in GMT format.
     * Example: "2019-03-08T23:59:00Z"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for documentation related to the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/PropList.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface PropList {
    /**
     * The date when the data was generated in GMT format.
     * Example: "2019-03-10T10:53:16Z"
     */
    date: string;
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/PropertyAliases.txt
/**
 * This interface defines the aliases for properties used in the Unicode Character Database (UCD).
 * The properties include short names, long names, and additional aliases for various Unicode properties.
 *
 * Each property has a unique combination of property name and property value.
 *
 * For example:
 * - Short Name: AL (Arabic Letter for Bidi_Class)
 * - Long Name: Arabic Letter
 * - Additional Aliases: ["Arabic Letter", "AL"]
 */
export interface PropertyAliases {
    /**
     * The short name for the property, typically an abbreviation or a duplicate of the long name.
     */
    short_name: string;

    /**
     * The long name for the property, typically the formal name used in documentation.
     */
    long_name: string;

    /**
     * Additional aliases for the property, which may be useful in various contexts.
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v12.1.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database.
 * Each property value has a corresponding property name, short name, and long name.
 *
 * The fields are as follows:
 * - property_name: The name of the property for which the value is used.
 * - short_name: A short abbreviation or duplicate of the long name for the property value.
 * - long_name: The formal name used in documentation about the property value.
 *
 * For example:
 * - property_name: "Bidi_Class"
 * - short_name: "AL"
 * - long_name: "Arabic Letter"
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyValueAliases {
  property_name: string;
  short_name: string;
  long_name: string;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property_name",
  "short_name",
  "long_name"
];
//#endregion

//#region data-files/v12.1.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the Unicode Script Extensions property,
 * indicating which characters are commonly used with more than one script.
 * Each code point has one or more property values corresponding to Script property values.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values.
     * The ordering of the values is not material, but is given here as alphabetical.
     * Example: "Latin", "Cyrillic"
     */
    script_extensions: "string"[];

    /**
     * A list of code points associated with the Script_Extensions value,
     * listed in code point order.
     * Example: "U+0041", "U+0042"
     */
    code_points: "string"[];
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_extensions",
    "code_points"
];
//#endregion

//#region data-files/v12.1.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2019-04-01T09:10:42Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * The URL for the Unicode Script Property report.
     * Example: "http://www.unicode.org/reports/tr24/"
     */
    script_property_url: string;

    /**
     * The URL for the sections related to Assignment Script Values.
     * Example: "http://www.unicode.org/reports/tr24/#Assignment_Script_Values"
     */
    assignment_script_values_url: string;

    /**
     * The URL for the sections related to Assignment ScriptX Values.
     * Example: "http://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values"
     */
    assignment_scriptx_values_url: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "script_property_url",
    "assignment_script_values_url",
    "assignment_scriptx_values_url"
];
//#endregion

//#region data-files/v12.1.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0061" for 'a'.
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'.
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'.
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior of casing.
     * This can include language IDs or casing contexts, separated by spaces.
     * Example: "en US" or "Not_en".
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     * Example: "Uppercase mapping for Latin letters."
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v12.1.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "[0;31m"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Red text"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Terminal, Web"
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v12.1.0/TangutSources.txt
/**
 * This file is a normative contributory data file in the Unicode Character Database.
 */
export interface TangutSources {
    /**
     * The date of the file creation in GMT format.
     * Example: "2019-03-08T23:59:00Z"
     */
    date: string;

    /**
     * The copyright information for the file.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * Indicates the version of the file.
     * Example: "12.1.0"
     */
    version: string;
}

export const TANGUT_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "version"
];
//#endregion

//#region data-files/v12.1.0/USourceData.txt
/**
 * Interface representing the basic data for U-source ideographs.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "A": Encoded in Extension A
     * - "B": Encoded in Extension B
     * - "C": Encoded in Extension C
     * - "D": Encoded in Extension D
     * - "E": Encoded in Extension E
     * - "F": Encoded in Extension F
     * - "G": Submitted by the UTC for IRG Working Set 2015
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded in the URO
     * - "UNC-2013": Included in the UTC's 2013 "Urgently Needed Characters" proposal
     * - "UNC-2015": Included in the UTC's 2015 "Urgently Needed Characters" proposal
     * - "UK-2015": Submitted by the UK for IRG Working Set 2015
     * - "V": Variant of an encoded character
     * - "W": Not suitable for encoding as a CJK Unified Ideograph
     * - "WS-2017": Submitted by the UTC for IRG Working Set 2017
     * - "X": No action taken
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: "A" | "B" | "C" | "D" | "E" | "F" | "G" | "N" | "U" | "UNC-2013" | "UNC-2015" | "UK-2015" | "V" | "W" | "WS-2017" | "X" | `"(UTC-\d{5})|(UCI-\d{5})`;

    /**
     * A Unicode code point. If the status is "V", this specifies the encoded character for which this entry is a variant.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s) of the ideograph.
     */
    sources: string;

    /**
     * General comments regarding the ideograph.
     */
    general_comments?: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources",
    "general_comments"
];
//#endregion

//#region data-files/v12.1.0/VerticalOrientation.txt
/**
 * This interface defines the Vertical_Orientation property as per Unicode specifications.
 *
 * The Vertical_Orientation property indicates the orientation of characters in vertical text layout.
 *
 * The possible values for the Vertical_Orientation property are:
 * - "U": Upright, the same orientation as in the code charts.
 * - "R": Rotated 90 degrees clockwise compared to the code charts.
 * - "Tu": Transformed typographically, with fallback to Upright.
 * - "Tr": Transformed typographically, with fallback to Rotated.
 *
 * Certain ranges of unassigned code points default to "U". All other code points, assigned and unassigned,
 * that are not listed explicitly are given the value "R".
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     */
    code_point: string;
    /**
     * Vertical_Orientation property value, one of the following:
     * - "U"
     * - "R"
     * - "Tu"
     * - "Tr"
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the file DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The date of the file creation in ISO 8601 format.
     * Example: "2019-03-10T10:53:05Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property.
     * Example: "true" or "false"
     */
    property_value: "true" | "false";
    
    /**
     * The date when the property was last updated.
     * Format: YYYY-MM-DD
     * Example: "2019-03-10"
     */
    last_updated: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "last_updated"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2019-03-10T10:53:05Z"
     */
    date: string;

    /**
     * The copyright information for the document.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The Unicode character for the decomposition.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_character: string;

    /**
     * The decomposition type, which can be one of the following: "canonical", "compatibility".
     * Example: "canonical".
     */
    decomposition_type: "canonical" | "compatibility";

    /**
     * The decomposition mapping, which provides the characters that make up the decomposition.
     * Example: "U+0041 U+030A" for 'A' with a combining ring above.
     */
    decomposition_mapping: string;

    /**
     * The source of the decomposition data, which can be one of the following: "Unicode Character Database", "Unicode Technical Report".
     * Example: "Unicode Character Database".
     */
    source: "Unicode Character Database" | "Unicode Technical Report";
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "unicode_character",
    "decomposition_type",
    "decomposition_mapping",
    "source"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The Unicode character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The East Asian Width property of the character.
     * Possible values: "N", "A", "H", "W", "F", "Na".
     */
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";

    /**
     * The character itself.
     * Example: 'A' for the code point U+0041.
     */
    character: string;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width",
    "character",
    "character_name"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2019-03-10, 10:53:08 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The derived joining group name.
     * Example: "Left" or "Right".
     */
    joining_group: string;

    /**
     * The character's properties related to joining.
     * Example: "Join_Causing" or "Non_Joiner".
     */
    joining_type: "Join_Causing" | "Non_Joiner" | "Join_Causing_And_Non_Joiner";

    /**
     * The character's directionality.
     * Example: "L" for left-to-right or "R" for right-to-left.
     */
    directionality: "L" | "R" | "AL";

    /**
     * The character's category.
     * Example: "Lu" for uppercase letters.
     */
    category: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "code_point",
    "joining_group",
    "joining_type",
    "directionality",
    "category"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Derived Joining Type data.
 */
export interface DerivedJoiningType {
    /**
     * The character that this joining type applies to.
     * Format: U+XXXX (e.g., U+0061 for 'a')
     */
    character: string;

    /**
     * The derived joining type of the character.
     * Union type representing the joining type.
     * Possible values: "U", "L", "R", "D", "C", "T", "A"
     */
    derived_joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "A";

    /**
     * The code point of the character in hexadecimal format.
     * Example: 0061 for 'a'
     */
    code_point: string;

    /**
     * The name of the character.
     * Example: "LATIN SMALL LETTER A"
     */
    name: string;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "character",
    "derived_joining_type",
    "code_point",
    "name"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2019-03-10T10:53:09Z"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use of the data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedName.txt
/**
 * This interface represents the derived name values for Unicode characters.
 */
export interface DerivedName {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+4E12 or U+2F89F
     */
    unicode_code_point: string;

    /**
     * Name property value or pattern.
     * Patterns may contain a '*' character, which is replaced by the code point in hex.
     * Example: "CJK UNIFIED IDEOGRAPH-*" becomes "CJK UNIFIED IDEOGRAPH-4E12" for U+4E12.
     */
    name_property_value: string;
}

export const DERIVED_NAME_FIELDS = [
    "unicode_code_point",
    "name_property_value"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the DerivedNumericType from the Unicode Character Database.
 */
export interface DerivedNumericType {
    /**
     * The numeric value of the character.
     * Example: "1.0"
     */
    numeric_value: string;

    /**
     * The numeric type of the character.
     * Example: "decimal"
     */
    numeric_type: "decimal" | "digit" | "numeric";

    /**
     * The character itself.
     * Example: "1"
     */
    character: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character"
];
//#endregion

//#region data-files/v12.1.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as per Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The version of the derived numeric values.
     * Format: "X.Y.Z"
     * Example: "12.1.0"
     */
    version: "string";

    /**
     * The date when the derived numeric values were generated.
     * Format: "YYYY-MM-DD HH:MM:SS GMT"
     * Example: "2019-03-10 10:53:11 GMT"
     */
    date: "string";

    /**
     * The copyright information for the derived numeric values.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: "string";

    /**
     * The URL for the terms of use.
     * Format: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: "string";

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Format: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "version",
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The grapheme break property value.
     * 
     * This property indicates how characters can be broken into graphemes.
     * Possible values include:
     * - "CR": Carriage Return
     * - "LF": Line Feed
     * - "Control": Control characters
     * - "Extend": Characters that can be extended
     * - "Regional_Indicator": Regional indicator symbols
     * - "Prepend": Characters that can be prepended
     * - "SpacingMark": Spacing marks
     * - "L": Letter
     * - "V": Vowel
     * - "T": Tone
     * - "LV": LV syllables
     * - "LVT": LVT syllables
     * 
     * Example: "L" indicates a letter that can start a grapheme.
     */
    grapheme_break_property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "grapheme_break_property"
];
//#endregion

//#region data-files/v12.1.0/auxiliary/GraphemeBreakTest.txt
/**
 * Default Grapheme Cluster Break Test
 *
 * This interface represents the structure of the default grapheme cluster break test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;

    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = ["code_points", "comment"];
//#endregion

//#region data-files/v12.1.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 *
 * This interface represents the default line break test format, which includes a string containing hex Unicode code points.
 */
export interface LineBreakTest {
    /**
     * A string that contains hex Unicode code points. For example: "U+0041 U+0042 U+0043"
     */
    line_break_string: string;
    /**
     * An optional comment associated with the line break string. For example: "# This is a comment"
     */
    comment?: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "line_break_string",
    "comment"
];
//#endregion

//#region data-files/v12.1.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties defined in the SentenceBreakProperty Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2019-03-10, 10:53:28 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2019 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v12.1.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v12.1.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty data.
 */
export interface WordBreakProperty {
    /**
     * The Unicode character property value for word breaking.
     * Example: "word_break"
     */
    word_break: "word_break" | "break_all" | "keep_all" | "normal";

    /**
     * The description of the word break property.
     * Example: "This property defines how text is broken into words."
     */
    description: string;

    /**
     * The version of the Unicode standard that this property applies to.
     * Example: "12.1.0"
     */
    version: string;

    /**
     * The date when this property was last updated.
     * Format: YYYY-MM-DD
     * Example: "2019-03-10"
     */
    last_updated: string;
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break",
    "description",
    "version",
    "last_updated"
];
//#endregion

//#region data-files/v12.1.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the WordBreakTest data structure.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points, possibly followed by a comment.
     * Example: "0041 (# A)"
     */
    string: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

