// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 14


// #region ArabicShaping
export interface ArabicShaping {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const ARABIC_SHAPING_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region BidiBrackets
export interface BidiBrackets {
  unicode_code_point: string; // Unicode code point value, represented as a hexadecimal value
  bidi_paired_bracket: string | "none"; // Bidi_Paired_Bracket property value, a code point value or none
  bidi_paired_bracket_type: "o" | "c" | "n"; // Bidi_Paired_Bracket_Type property value, one of Open (o), Close (c), or None (n)
}

export const BIDI_BRACKETS_FIELDS = [
  "unicode_code_point",
  "bidi_paired_bracket",
  "bidi_paired_bracket_type"
];

// #endregion

// #region BidiMirroring
export interface BidiMirroring {
  bidi_mirroring_glyph: "none" | string; // The mapping for the Bidi_Mirroring_Glyph property, which can be none or a specific character code.
}

export const BIDI_MIRRORING_FIELDS = [
  "bidi_mirroring_glyph"
];

// #endregion

// #region Blocks
export interface Blocks {
  start_code: string; // The starting code point of the block, in hexadecimal form
  end_code: string; // The ending code point of the block, in hexadecimal form
  block_name: string; // The name of the Unicode block
}

export const BLOCKS_FIELDS = [
  "start_code",
  "end_code",
  "block_name"
];

// #endregion

// #region CJKRadicals
export interface CjkRadicals {
  cjk_radical_number: string; // The CJK radical number, which matches the regular expression [1-9][0-9]{0,2} and may end with an apostrophe.
  cjk_radical_character: string; // The CJK radical character corresponding to the radical number.
  cjk_unified_ideograph: string; // The CJK unified ideograph formed from the radical.
}

export const CJK_RADICALS_FIELDS = [
  "cjk_radical_number",
  "cjk_radical_character",
  "cjk_unified_ideograph"
];

// #endregion

// #region CaseFolding
export interface CaseFolding {
  code: string; // The Unicode code point of the character, in hexadecimal form
  status: "C" | "F" | "S" | "T"; // The status of the case folding mapping
  mapping: string; // The case folding mapping for the character
  name: string; // The name of the character
}

export const CASE_FOLDING_FIELDS = [
  "code",
  "status",
  "mapping",
  "name"
];

// #endregion

// #region CompositionExclusions
export interface CompositionExclusions {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  composition_exclusion: boolean; // Indicates whether the character is excluded from composition according to the Unicode Composition Exclusion Table
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
  "code_point",
  "name",
  "composition_exclusion"
];

// #endregion

// #region DerivedAge
export interface DerivedAge {
  type_name: string; // The name of the derived property type
}

export const DERIVED_AGE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedCoreProperties
export interface DerivedCoreProperties {
  type_name: string; // The name of the type as defined in the Unicode Character Database
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedNormalizationProps
export interface DerivedNormalizationProps {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
  "type_name"
];

// #endregion

// #region EastAsianWidth
export interface EastAsianWidth {
  unicode_code_point: string; // Unicode code point value or range of code point values
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W"; // East Asian Width property, indicating the width category of the character
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "unicode_code_point",
  "east_asian_width"
];

// #endregion

// #region EmojiSources
export interface EmojiSources {
  unicode_code_point_or_sequence: string; // Unicode code point or sequence representing the character or symbol.
  docomo_shift_jis_code: string; // Shift-JIS code for DoCoMo carrier symbols, if available.
  kddi_shift_jis_code: string; // Shift-JIS code for KDDI carrier symbols, if available.
  softbank_shift_jis_code: string; // Shift-JIS code for SoftBank carrier symbols, if available.
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];

// #endregion

// #region EquivalentUnifiedIdeograph
export interface EquivalentUnifiedIdeograph {
  equivalent_unified_ideograph: "none" | string; // The equivalent CJK unified ideograph for the specified code point or code point range.
  code_point: string; // The code point or code point range represented as a variable-length hexadecimal value.
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "equivalent_unified_ideograph",
  "code_point"
];

// #endregion

// #region HangulSyllableType
export interface HangulSyllableType {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region IndicPositionalCategory
export interface IndicPositionalCategory {
  unicode_code_point: string; // Unicode code point value or range of code point values
  indic_positional_category: string; // Indic_Positional_Category property value, indicating the positional category of the character in Indic scripts.
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
  "unicode_code_point",
  "indic_positional_category"
];

// #endregion

// #region IndicSyllabicCategory
export interface IndicSyllabicCategory {
  unicode_code_point: string; // Unicode code point value or range of code point values
  indic_syllabic_category: string; // Indic_Syllabic_Category property value
  comment: string; // Comment field showing General_Category property value, Unicode character name(s), and code point count in square brackets if applicable.
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
  "unicode_code_point",
  "indic_syllabic_category",
  "comment"
];

// #endregion

// #region Jamo
export interface Jamo {
  code_point: string; // The code point of a conjoining jamo character, in 4-digit hexadecimal form
  jamo_short_name: string; // The Jamo_Short_Name as a one-, two-, or three-character ASCII string
}

export const JAMO_FIELDS = [
  "code_point",
  "jamo_short_name"
];

// #endregion

// #region LineBreak
export interface LineBreak {
  unicode_code_point: string; // Unicode code point value or range of code point values
  line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | "SG" | "SY" | "XX"; // Line_Break property, indicating how line breaks should be handled for the code point
}

export const LINE_BREAK_FIELDS = [
  "unicode_code_point",
  "line_break_property"
];

// #endregion

// #region NameAliases
export interface NameAliases {
  code_point: string; // The code point of a character, in hexadecimal form
  alias: string; // The formal name alias for the Unicode character
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation"; // The type of the alias, indicating its category as defined in the documentation
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];

// #endregion

// #region NamedSequences
export interface NamedSequences {
  name_of_sequence: string; // The name of the Unicode named character sequence
  code_point_sequence: string[]; // The sequence of code points corresponding to the named sequence, represented as an array of strings
}

export const NAMED_SEQUENCES_FIELDS = [
  "name_of_sequence",
  "code_point_sequence"
];

// #endregion

// #region NamedSequencesProv
export interface NamedSequencesProv {
  name_of_sequence: string; // The name of the Unicode named character sequence.
  code_point_sequence: string[]; // A sequence of code points represented as an array of strings.
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
  "name_of_sequence",
  "code_point_sequence"
];

// #endregion

// #region NormalizationCorrections
export interface NormalizationCorrections {
  unicode_code_point: string; // The Unicode code point of the character, in hexadecimal form
  original_decomposition: string; // The original (erroneous) decomposition of the character
  corrected_decomposition: string; // The corrected decomposition of the character
  unicode_version: string; // The version of Unicode for which the correction was entered, in n.n.n format
  comment: string; // Indicates the Unicode Corrigendum which documents the correction
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
  "unicode_code_point",
  "original_decomposition",
  "corrected_decomposition",
  "unicode_version",
  "comment"
];

// #endregion

// #region NushuSources
export interface NushuSources {
  type_name: string; // The name of the type as specified in the Unicode Character Database.
}

export const NUSHU_SOURCES_FIELDS = [
  "type_name"
];

// #endregion

// #region PropList
export interface PropList {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const PROP_LIST_FIELDS = [
  "type_name"
];

// #endregion

// #region PropertyAliases
export interface PropertyAliases {
  short_name: string; // The short name for the property, typically an abbreviation or a duplicate of the long name.
  long_name: string; // The long name for the property, typically the formal name used in documentation.
  aliases: string[]; // Additional aliases for the property that may be useful in different contexts.
}

export const PROPERTY_ALIASES_FIELDS = [
  "short_name",
  "long_name",
  "aliases"
];

// #endregion

// #region PropertyValueAliases
export interface PropertyValueAliases {
  property: string; // The property for which the property value name is used.
  short_name: string; // The short name for the property value, typically an abbreviation.
  long_name: string; // The long name for the property value, typically the formal name used in documentation.
  additional_aliases: string[]; // Other aliases that may be useful.
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "short_name",
  "long_name",
  "additional_aliases"
];

// #endregion

// #region ScriptExtensions
export interface ScriptExtensions {
  script_extensions: string[]; // A set of one or more abbreviated Script property values associated with code points.
  code_points: number[]; // A list of code points associated with each Script_Extensions value, listed in code point order.
}

export const SCRIPT_EXTENSIONS_FIELDS = [
  "script_extensions",
  "code_points"
];

// #endregion

// #region Scripts
export interface Scripts {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const SCRIPTS_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region SpecialCasing
export interface SpecialCasing {
  code: string; // The Unicode code point of a character, expressed in hexadecimal form
  lower: string; // The lowercase mapping of the character
  title: string; // The titlecase mapping of the character
  upper: string; // The uppercase mapping of the character
  condition_list: string[]; // A list of conditions that override normal behavior, represented as language IDs or casing contexts
  comment: string; // A comment providing additional information about the entry
}

export const SPECIAL_CASING_FIELDS = [
  "code",
  "lower",
  "title",
  "upper",
  "condition_list",
  "comment"
];

// #endregion

// #region StandardizedVariants
export interface StandardizedVariants {
  variation_sequence: string; // The variation sequence defined in the Unicode Standard.
  description: string; // The description of the desired appearance for the variation sequence.
  shaping_environments: string; // Specifies where the appearance is only different in particular shaping environments.
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];

// #endregion

// #region TangutSources
export interface TangutSources {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const TANGUT_SOURCES_FIELDS = [
  "type_name"
];

// #endregion

// #region USourceData
export interface USourceData {
  u_source_id: string; // The U-source ID
  status: "A" | "B" | "C" | "Comp" | "D" | "E" | "F" | "G" | "N" | "U" | "UK-2015" | "V" | "W" | "WS-2017" | "X" | "UTC-xxxxx" | "UCI-xxxxx"; // Text indicating the ideograph's status
  unicode_code_point: string; // A Unicode code point, specifying the encoded character for this entry
  radical_stroke_count: number; // Radical-stroke count
  virtual_kangxi_position: number; // Virtual KangXi dictionary position
  ideographic_description_sequence: string; // Ideographic Description Sequence (IDS), if possible
  sources: string[]; // Source(s) of the ideograph
  general_comments: string; // General comments about the ideograph
  total_strokes: number; // Total strokes of the ideograph
  first_residual_stroke: number; // First residual stroke of the ideograph
}

export const U_SOURCE_DATA_FIELDS = [
  "u_source_id",
  "status",
  "unicode_code_point",
  "radical_stroke_count",
  "virtual_kangxi_position",
  "ideographic_description_sequence",
  "sources",
  "general_comments",
  "total_strokes",
  "first_residual_stroke"
];

// #endregion

// #region VerticalOrientation
export interface VerticalOrientation {
  unicode_code_point: string; // Unicode code point value or range of code point values in hexadecimal form
  vertical_orientation: "U" | "R" | "Tu" | "Tr"; // Vertical orientation property value, indicating the orientation of the character
}

export const VERTICAL_ORIENTATION_FIELDS = [
  "unicode_code_point",
  "vertical_orientation"
];

// #endregion

// #region DerivedBidiClass
export interface DerivedBidiClass {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_BIDI_CLASS_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedBinaryProperties
export interface DerivedBinaryProperties {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedCombiningClass
export interface DerivedCombiningClass {
  derived_combining_class: string; // The derived combining class of a character, indicating how it combines with other characters.
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
  "derived_combining_class"
];

// #endregion

// #region DerivedDecompositionType
export interface DerivedDecompositionType {
  type_name: string; // The name of the type as defined in the Unicode Character Database
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedEastAsianWidth
export interface DerivedEastAsianWidth {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedGeneralCategory
export interface DerivedGeneralCategory {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedJoiningGroup
export interface DerivedJoiningGroup {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_JOINING_GROUP_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedJoiningType
export interface DerivedJoiningType {
  type_name: string; // The name of the type as defined in the Unicode data file
}

export const DERIVED_JOINING_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedLineBreak
export interface DerivedLineBreak {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_LINE_BREAK_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedName
export interface DerivedName {
  code_point: string; // Unicode code point value or range of code point values
  name_property: string; // Name property value or pattern derived from the code point
}

export const DERIVED_NAME_FIELDS = [
  "code_point",
  "name_property"
];

// #endregion

// #region DerivedNumericType
export interface DerivedNumericType {
  type_name: string; // The name of the derived numeric type as specified in the Unicode data file.
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedNumericValues
export interface DerivedNumericValues {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
  "type_name"
];

// #endregion

// #region emoji-data
export interface EmojiData {
  codepoint: string; // The code point(s) of the emoji, represented in hexadecimal form.
  property: string; // The property associated with the emoji.
  comments: string; // Comments or additional information about the emoji.
}

export const EMOJI_DATA_FIELDS = [
  "codepoint",
  "property",
  "comments"
];

// #endregion

// #region emoji-variation-sequences
export interface EmojiVariationSequences {
  type_name: string; // The name of the type as specified in the document.
}

export const EMOJI_VARIATION_SEQUENCES_FIELDS = [
  "type_name"
];

// #endregion

// #region GraphemeBreakProperty
export interface GraphemeBreakProperty {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region SentenceBreakProperty
export interface SentenceBreakProperty {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
  "type_name"
];

// #endregion

// #region WordBreakProperty
export interface WordBreakProperty {
  type_name: string; // The name of the type as specified in the Unicode data file
}

export const WORD_BREAK_PROPERTY_FIELDS = [
  "type_name"
];

// #endregion
