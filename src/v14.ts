// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 14

//#region data-files/v14.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of a character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name.
     * Example: 'Teh_Marbuta'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v14.0.0/BidiBrackets.txt
/**
 * BidiBrackets
 *
 * This interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 *
 * @property {string} unicode_code_point - Unicode code point value, represented as a hexadecimal value (e.g., "U+298D").
 * @property {string} bidi_paired_bracket - Bidi_Paired_Bracket property value, a code point value or <none> (e.g., "U+298E").
 * @property {"o" | "c" | "n"} bidi_paired_bracket_type - Bidi_Paired_Bracket_Type property value, which can be one of the following: "o" for Open, "c" for Close, or "n" for None.
 */
export interface BidiBrackets {
  unicode_code_point: string;
  bidi_paired_bracket: string;
  bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
  "unicode_code_point",
  "bidi_paired_bracket",
  "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v14.0.0/BidiCharacterTest.txt
/**
 * BidiCharacterTest interface represents a conformance test for implementations of the Unicode Bidirectional Algorithm.
 */
export interface BidiCharacterTest {
    /**
     * A sequence of hexadecimal code point values separated by space.
     * Example: "0041 0052 0061"
     */
    code_point_sequence: string;

    /**
     * A value representing the paragraph direction:
     * - 0 represents left-to-right
     * - 1 represents right-to-left
     * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
     * Example: 0
     */
    paragraph_direction: "0" | "1" | "2";

    /**
     * The resolved paragraph embedding level.
     * Example: 0
     */
    resolved_paragraph_embedding_level: number;

    /**
     * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
     * Example: "0 1 x 2"
     */
    resolved_levels: string;

    /**
     * A list of indices showing the resulting visual ordering from left to right; characters with a resolved level of 'x' are skipped.
     * Example: "0 1 3"
     */
    visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
    "code_point_sequence",
    "paragraph_direction",
    "resolved_paragraph_embedding_level",
    "resolved_levels",
    "visual_ordering_indices"
];
//#endregion

//#region data-files/v14.0.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mappings of Unicode characters that have the Bidi_Mirrored=Yes property value.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value.
     * Example: '0041' for 'A'
     */
    source: string;

    /**
     * The mirrored code point represented as a hexadecimal value.
     * Example: '0042' for 'B'
     */
    mirrored: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source",
    "mirrored"
];
//#endregion

//#region data-files/v14.0.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test data.
 */
export interface BidiTest {
    /**
     * An ordered space-delimited list of numbers indicating the resulting levels
     * for each input property value. The UBA does not assign levels to certain values;
     * those are indicated with an 'x'.
     * 
     * Example:
     *   @Levels:    1 0
     *   @Levels:    x 1 x 2
     */
    levels: string;

    /**
     * An ordered space-delimited list of numbers indicating the resulting
     * visual ordering from left to right. The numbers are zero-based, and
     * are indexes into the input string. Items with a level of 'x' are skipped.
     * 
     * Example:
     *   @Reorder:    1 0
     *   @Reorder:    3 1
     */
    reorder: string;

    /**
     * An ordered list of BIDI property values.
     */
    input: string;

    /**
     * A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL.
     * Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
     * 
     * Example:
     *    L LRE R R; 7
     *    L LRE R AL; 7
     */
    bitset: string;
}

export const BIDI_TEST_FIELDS = [
    "levels",
    "reorder",
    "input",
    "bitset"
];
//#endregion

//#region data-files/v14.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041)
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A)
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v14.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}'?.
     * Example: "1", "2'"
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: "人"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v14.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: '0041' for 'A'
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following:
     * - 'C': common case folding, shared by both simple and full mappings.
     * - 'F': full case folding, mappings that cause strings to grow in length.
     * - 'S': simple case folding, mappings to single characters where different from F.
     * - 'T': special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: 'C'
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: '0061' for 'a' or '0061 0062' for 'ab'
     */
    mapping: string;

    /**
     * The name of the character, typically its Unicode name.
     * Example: 'LATIN CAPITAL LETTER A'
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v14.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusions defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2021-03-30, 23:59:00 GMT"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_documentation_url: string;

    /**
     * The URL for more information on the primary exclusion list table.
     * Example: "https://www.unicode.org/reports/tr15/#Primary_Exclusion_List_Table"
     */
    primary_exclusion_list_table_url: string;

    /**
     * The URL for the derived property Full_Composition_Exclusion.
     * Example: "DerivedNormalizationProps.txt"
     */
    full_composition_exclusion_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "unicode_character_database_documentation_url",
    "primary_exclusion_list_table_url",
    "full_composition_exclusion_url"
];
//#endregion

//#region data-files/v14.0.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
  /**
   * The date when the code point was first assigned in Unicode.
   * Format: YYYY-MM-DD HH:MM:SS GMT
   * Example: "2021-07-10 00:35:00 GMT"
   */
  date: string;

  /**
   * The version of Unicode in which the code point was assigned.
   * Format: Major.Minor.Patch
   * Example: "14.0.0"
   */
  version: string;

  /**
   * Indicates if the code point is a graphic, format, control, private-use, surrogate, or noncharacter.
   * Example values: "graphic", "format", "control"
   */
  type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

  /**
   * Notes regarding the assignment of the code point.
   * Example: "The term 'assigned' means that a previously reserved code point was assigned."
   */
  notes: string;
}

export const DERIVED_AGE_FIELDS = [
  "date",
  "version",
  "type",
  "notes"
];
//#endregion

//#region data-files/v14.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties defined in the DerivedCoreProperties Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode version of the data.
     * Example: "14.0.0"
     */
    unicode_version: string;
    
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2021-08-12, 23:12:53 GMT"
     */
    date: string;
    
    /**
     * The copyright information for the data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;
    
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "unicode_version",
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties for DerivedNormalization.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility decomposition.
     * Example: true
     */
    compatibility_decomposition: boolean;

    /**
     * A boolean indicating whether to use canonical decomposition.
     * Example: false
     */
    canonical_decomposition: boolean;

    /**
     * A boolean indicating whether to apply normalization.
     * Example: true
     */
    apply_normalization: boolean;

    /**
     * A string representing the locale to be used for normalization.
     * Example: "en-US"
     */
    locale: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "compatibility_decomposition",
    "canonical_decomposition",
    "apply_normalization",
    "locale"
];
//#endregion

//#region data-files/v14.0.0/EastAsianWidth.txt
/**
 * EastAsianWidth interface representing the East Asian Width property data.
 */
export interface EastAsianWidth {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+3400..U+4DBF
     */
    code_point: string;
    /**
     * East_Asian_Width property value, which can be one of the following:
     * - "A": Ambiguous
     * - "F": Full-width
     * - "H": Half-width
     * - "N": Neutral
     * - "Na": Narrow
     * - "W": Wide
     * Example: "W"
     */
    east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width"
];
//#endregion

//#region data-files/v14.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 *
 * Each mapping is symmetric for equivalent Unicode and carrier symbols or sequences.
 * This interface includes the following fields:
 *
 * - `unicode_code_point_or_sequence`: The Unicode code point or sequence (e.g., "U+1F600").
 * - `docomo_shift_jis_code`: The DoCoMo Shift-JIS code (e.g., "0xF8A0").
 * - `kddi_shift_jis_code`: The KDDI Shift-JIS code (e.g., "0xF8A1").
 * - `softbank_shift_jis_code`: The SoftBank Shift-JIS code (e.g., "0xF8A2").
 */
export interface EmojiSources {
  unicode_code_point_or_sequence: string;
  docomo_shift_jis_code?: string;
  kddi_shift_jis_code?: string;
  softbank_shift_jis_code?: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v14.0.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and its corresponding unified ideograph.
 */
export interface EquivalentUnifiedIdeograph {
  /**
   * A code point or code point range represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: "4E00" or "4E00-4E0F"
   */
  source: string;

  /**
   * A code point represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: "4E8C"
   */
  target: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "source",
  "target"
];
//#endregion

//#region data-files/v14.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "HANGUL_SYLLABLE_TYPE_CODE"
     * Example: "L"
     */
    hangul_syllable_type_code: "L" | "V" | "LV" | "LVT";

    /**
     * The description of the syllable type.
     * Format: string
     * Example: "Consonant"
     */
    description: string;

    /**
     * The Unicode value of the syllable type.
     * Format: integer
     * Example: 0x1100
     */
    unicode_value: number;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "hangul_syllable_type_code",
    "description",
    "unicode_value"
];
//#endregion

//#region data-files/v14.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property aimed at the specification of syllabic structure for Indic scripts.
 * It includes properties for Unicode code points and their corresponding positional categories.
 */
export interface IndicPositionalCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0BC1" or "U+0BC1..U+0BC2"
     */
    unicode_code_point: string;

    /**
     * Indic Positional Category property value.
     * Possible values include:
     * - "Top"
     * - "Bottom"
     * - "Left"
     * - "Right"
     * Example: "Top"
     */
    indic_positional_category: "Top" | "Bottom" | "Left" | "Right";

    /**
     * General Category property value, Unicode character name(s), and code point count in square brackets.
     * Example: "Lo, Tamil Vowel Sign U [2]"
     */
    comment: string;
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_positional_category",
    "comment"
];
//#endregion

//#region data-files/v14.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The property specifies the syllabic structure and segmentation rules for Indic scripts.
 *
 * The following scripts are assessed as Indic in the structural sense:
 * Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
 * Chakma, Cham, Devanagari, Dives Akuru, Dogra, Grantha, Gujarati,
 * Gunjala Gondi, Gurmukhi, Hanunoo, Javanese, Kaithi, Kannada,
 * Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Lepcha, Limbu,
 * Mahajani, Makasar, Malayalam, Marchen, Masaram Gondi, Meetei Mayek,
 * Modi, Multani, Myanmar, Nandinagari, Newa, New Tai Lue, Oriya,
 * Phags-pa, Rejang, Saurashtra, Sharada, Siddham, Sinhala, Soyombo,
 * Sundanese, Syloti Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham,
 * Tai Viet, Takri, Tamil, Telugu, Thai, Tibetan, Tirhuta, and
 * Zanabazar Square.
 *
 * All characters for all other scripts not in that list take the default value for this property,
 * unless they are individually listed in this data file.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0900" or "U+0900-U+097F"
     */
    unicode_code_point: string;
    /**
     * Indic Syllabic Category property value.
     * Example: "Vowel", "Consonant"
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Other";
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category"
];
//#endregion

//#region data-files/v14.0.0/Jamo.txt
/**
 * Interface representing the Jamo_Short_Name property.
 */
export interface Jamo {
    /**
     * The code point of a conjoining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo_Short_Name as a one-, two-, or three-character ASCII string.
     * Example: 'G', 'GG', 'N'
     */
    jamo_short_name: string;
}

export const JAMO_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v14.0.0/LineBreak.txt
/**
 * This interface represents the Line Break property data in the Unicode Character Database.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0041 or U+0041..U+005A
     */
    code_point: string;

    /**
     * Line_Break property, which can be one of the following:
     * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
     * - Tailorable: "AI", "AL", "B2", "BA", "BB", "CB", "CJ", "CL", "CP", "EB",
     *   "EM", "EX", "H2", "H3", "HL", "HY", "ID", "IN", "IS", "JL",
     *   "JT", "JV", "NS", "NU", "OP", "PO", "PR", "QU", "RI", "SA",
     *   "SG", "SY", "XX"
     * Example: "BK"
     */
    line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                       "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | 
                       "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | 
                       "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | 
                       "SG" | "SY" | "XX";
}

export const LINE_BREAK_FIELDS = ["code_point", "line_break_property"];
//#endregion

//#region data-files/v14.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented in hexadecimal format.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a formal name or an abbreviation.
   * Example: "LATIN CAPITAL LETTER A" or "C1".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", or "abbreviation".
   * Comparisons of type labels should ignore case.
   * Example: "control" for control codes.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v14.0.0/NamedSequences.txt
/**
 * Unicode Named Character Sequences
 *
 * This interface represents the named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;
    /**
     * The code point sequence for the USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = ["name", "code_point_sequence"];
//#endregion

//#region data-files/v14.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the named character sequences that are designated as provisional in the Unicode Character Database.
 * Each sequence consists of a name and a corresponding code point sequence.
 */
export interface NamedSequencesProv {
    /**
     * The name of the character sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the character sequence, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v14.0.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041").
     */
    unicode_code_point: string;
    /**
     * Original erroneous decomposition of the character.
     */
    original_decomposition: string;
    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;
    /**
     * Version of Unicode for which the correction was entered, in n.n.n format (e.g., "14.0.0").
     */
    unicode_version: string;
    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v14.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points.
     * Example: "U+0041; U+0061"
     */
    source: string;
    /**
     * The NFC normalized code points.
     * Example: "U+0041"
     */
    nfc: string;
    /**
     * The NFD normalized code points.
     * Example: "U+0041"
     */
    nfd: string;
    /**
     * The NFKC normalized code points.
     * Example: "U+0041"
     */
    nfkc: string;
    /**
     * The NFKD normalized code points.
     * Example: "U+0041"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v14.0.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database for Nushu sources.
 */
export interface NushuSources {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD HH:MM:SS GMT
     * Example: "2021-04-30 23:59:00 GMT"
     */
    date: string;

    /**
     * Copyright information for the data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * URL for terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * Documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date when the file was created or last modified.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2021-08-12, 23:13:05 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use of the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/PropertyAliases.txt
/**
 * This interface defines the aliases for properties used in the Unicode Character Database (UCD).
 * The properties include short names, long names, and additional aliases for various Unicode data.
 *
 * Each property has specific constraints and formats:
 * - Short Name: Typically an abbreviation or a duplicate of the long name.
 * - Long Name: The formal name used in documentation.
 * - Additional aliases may be provided.
 *
 * Loose matching is applied to property names and values, ignoring case distinctions, whitespace, and underscores.
 * Numeric equivalencies are also considered for numeric property values.
 *
 * Note: Property value names are not unique across properties, and some property names may overlap with property value names.
 */
export interface PropertyAliases {
  short_name: string;  // The short name for the property, typically an abbreviation.
  long_name: string;   // The long name for the property, the formal name used in documentation.
  additional_aliases?: string[]; // Additional aliases for the property, if any.
}

export const PROPERTY_ALIASES_FIELDS = [
  "short_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v14.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database.
 * Each property value is associated with a specific property and includes various aliases.
 */
export interface PropertyValueAliases {
    /**
     * The property for which the property value name is used.
     * Example: "Bidi_Class"
     */
    property: string;

    /**
     * The short name for the property value, typically an abbreviation.
     * Example: "AL"
     */
    short_name: string;

    /**
     * The long name for the property value, typically the formal name used in documentation.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property value, if any.
     * Example: "Arabic Letter, AL"
     */
    additional_aliases?: string[];
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
    "property",
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v14.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the Unicode Script Extensions property,
 * indicating which characters are commonly used with more than one script.
 * Each code point has one or more associated script property values.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values.
     * The ordering of the values in that set is not material, but for stability in presentation,
     * it is given here as alphabetical.
     * Example: "Latin, Greek"
     */
    script_property_values: "string";

    /**
     * The list of code points associated with the Script_Extensions value,
     * listed in code point order.
     * Example: "U+0041, U+0042"
     */
    code_points: "string";
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_property_values",
    "code_points"
];
//#endregion

//#region data-files/v14.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2021-07-10T00:35:31Z"
     */
    date: string;
    /**
     * Copyright information regarding the Unicode data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;
    /**
     * A link to the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * A link to the documentation for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_link: string;
    /**
     * A link to UAX #24, which discusses the Unicode Script Property.
     * Example: "https://www.unicode.org/reports/tr24/"
     */
    uax_24_link: string;
    /**
     * A link to the section discussing Assignment Script Values.
     * Example: "https://www.unicode.org/reports/tr24/#Assignment_Script_Values"
     */
    assignment_script_values_link: string;
    /**
     * A link to the section discussing Assignment ScriptX Values.
     * Example: "https://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values"
     */
    assignment_scriptx_values_link: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_link",
    "uax_24_link",
    "assignment_script_values_link",
    "assignment_scriptx_values_link"
];
//#endregion

//#region data-files/v14.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0061" for 'a'.
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'.
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'.
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior of casing.
     * This can include language IDs or casing contexts, separated by spaces.
     * Example: "en US" for English (United States).
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     * This is for human-readable purposes and is not used in processing.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v14.0.0/StandardizedVariants.txt
/**
 * Specification of the variation sequences that are defined in the Unicode Standard.
 * This interface represents standardized variation sequences, including ideographic and emoji variations.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "[0;31m"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Red text"
   */
  description: string;

  /**
   * Where the appearance is only different in particular shaping environments.
   * Example: "Terminal, Web"
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v14.0.0/TangutSources.txt
/**
 * This interface represents the data structure for TangutSources.
 */
export interface TangutSources {
    /**
     * The date of the file creation in GMT format.
     * Example: "2021-08-12, 16:12:00 GMT"
     */
    date: string;
    /**
     * The copyright information for the file.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
    /**
     * A description of the file's purpose within the Unicode Character Database.
     */
    description: string;
}

export const TANGUT_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "description"
];
//#endregion

//#region data-files/v14.0.0/USourceData.txt
/**
 * This interface represents the basic data for U-source ideographs.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "A": Encoded in Extension A
     * - "B": Encoded in Extension B
     * - "C": Encoded in Extension C
     * - "Comp": Encoded as a compatibility ideograph
     * - "D": Encoded in Extension D
     * - "E": Encoded in Extension E
     * - "F": Encoded in Extension F
     * - "G": Encoded in Extension G
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded in the URO or as a unified ideograph in the CJK Compatibility Ideographs block
     * - "UK-2015": Submitted by the UK for IRG Working Set 2015
     * - "V": Variant of an encoded character
     * - "W": Not suitable for encoding as a CJK Unified Ideograph
     * - "WS-2017": Submitted by the UTC for IRG Working Set 2017
     * - "X": No action taken
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: "A" | "B" | "C" | "Comp" | "D" | "E" | "F" | "G" | "N" | "U" | "UK-2015" | "V" | "W" | "WS-2017" | "X" | `(UTC-\d{5})|(UCI-\d{5})`;

    /**
     * A Unicode code point. If the status is "V", this specifies the encoded character for which this entry is a variant.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s).
     */
    sources: string;

    /**
     * General comments.
     */
    general_comments: string;

    /**
     * Total strokes.
     */
    total_strokes: number;

    /**
     * First residual stroke.
     */
    first_residual_stroke: number;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources",
    "general_comments",
    "total_strokes",
    "first_residual_stroke"
];
//#endregion

//#region data-files/v14.0.0/VerticalOrientation.txt
/**
 * This interface defines the Vertical_Orientation property as per Unicode specifications.
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     * Example: U+0041 for 'A' or U+0030..U+0039 for digits 0-9.
     */
    code_point: string;

    /**
     * Vertical_Orientation property value, which can be one of the following:
     * - "U" for Upright, the same orientation as in the code charts
     * - "R" for Rotated 90 degrees clockwise compared to the code charts
     * - "Tu" for Transformed typographically, with fallback to Upright
     * - "Tr" for Transformed typographically, with fallback to Rotated
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the file DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The date when the data was generated in GMT format.
     * Example: "2021-07-10T00:35:02Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * Indicates whether the character is a control character.
     * Example: "true" if the character is a control character, otherwise "false".
     */
    control_character: "true" | "false";

    /**
     * Indicates whether the character is a whitespace character.
     * Example: "true" if the character is a whitespace character, otherwise "false".
     */
    whitespace_character: "true" | "false";

    /**
     * Indicates whether the character is a punctuation character.
     * Example: "true" if the character is a punctuation character, otherwise "false".
     */
    punctuation_character: "true" | "false";

    /**
     * Indicates whether the character is a letter.
     * Example: "true" if the character is a letter, otherwise "false".
     */
    letter: "true" | "false";

    /**
     * Indicates whether the character is a digit.
     * Example: "true" if the character is a digit, otherwise "false".
     */
    digit: "true" | "false";
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "control_character",
    "whitespace_character",
    "punctuation_character",
    "letter",
    "digit"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedCombiningClass.txt
/**
 * DerivedCombiningClass
 */
export interface DerivedCombiningClass {
    /**
     * The Unicode code point of the character.
     * Example: "U+0041" for 'A'
     */
    code_point: string;
    
    /**
     * The canonical name of the character.
     * Example: "LATIN CAPITAL LETTER A"
     */
    canonical_name: string;
    
    /**
     * The combining class of the character.
     * Example: "0" for non-spacing characters
     */
    combining_class: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "code_point",
    "canonical_name",
    "combining_class"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The Unicode character for which the decomposition is defined.
     * Example: 'A'
     */
    character: string;

    /**
     * The decomposition mapping for the character.
     * Example: 'A' -> 'A' + '̵'
     */
    decomposition: string;

    /**
     * The type of decomposition.
     * Can be one of the following: "canonical", "compatibility"
     */
    type: "canonical" | "compatibility";

    /**
     * The source of the decomposition data.
     * Example: 'Unicode Character Database'
     */
    source: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition",
    "type",
    "source"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the Derived East Asian Width data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+0041"
     */
    character: string;
    /**
     * The width category of the character.
     * Example: "Narrow"
     */
    width: "Narrow" | "Wide" | "Ambiguous" | "Fullwidth";
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "width"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The Unicode character category, e.g., "Lu" for uppercase letters.
     */
    category: string;

    /**
     * The description of the category, e.g., "Uppercase Letter".
     */
    description: string;

    /**
     * The numeric value associated with the category, e.g., 1 for letters.
     */
    numeric_value: number;

    /**
     * A boolean indicating if the category is a letter.
     */
    is_letter: boolean;

    /**
     * A boolean indicating if the category is a digit.
     */
    is_digit: boolean;

    /**
     * A boolean indicating if the category is a punctuation mark.
     */
    is_punctuation: boolean;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "category",
    "description",
    "numeric_value",
    "is_letter",
    "is_digit",
    "is_punctuation"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup data structure.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode character or character sequence that this group represents.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "U" for Unicode
     * - "C" for Conditional
     * Example: "U" indicates a standard joining type.
     */
    joining_type: "U" | "C";

    /**
     * The direction of the joining, which can be either:
     * - "L" for Left
     * - "R" for Right
     * Example: "L" indicates a left joining direction.
     */
    joining_direction: "L" | "R";

    /**
     * A description of the joining group.
     * Example: "This group includes characters that join to the left."
     */
    description: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "character",
    "joining_type",
    "joining_direction",
    "description"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the DerivedJoiningType.
 */
export interface DerivedJoiningType {
    /**
     * The joining type of the character.
     * Can be one of the following: "U", "C", "D", "L", "R", "T", "B", "A", "N".
     * Example: "U" for Unicode.
     */
    joining_type: "U" | "C" | "D" | "L" | "R" | "T" | "B" | "A" | "N";

    /**
     * The character code point in hexadecimal format.
     * Example: "0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The character itself.
     * Example: "A" for the character 'A'.
     */
    character: string;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A" for the character 'A'.
     */
    character_name: string;

    /**
     * The script of the character.
     * Example: "Latin" for the character 'A'.
     */
    script: string;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character",
    "character_name",
    "script"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2021-07-10T00:35:09Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedName.txt
/**
 * This interface represents the derived names of Unicode characters based on their code points.
 */
export interface DerivedName {
  /**
   * Unicode code point value or range of code point values.
   * Example: U+4E12 or U+2F89F
   */
  unicode_code_point: string;

  /**
   * Name property value or pattern derived from the code point.
   * Example: CJK UNIFIED IDEOGRAPH-* where * is replaced by the code point.
   */
  name_property_value: string;
}

export const DERIVED_NAME_FIELDS = [
  "unicode_code_point",
  "name_property_value"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: "1.0"
     */
    value: string;

    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    type: "integer" | "decimal";

    /**
     * The source of the numeric value, indicating where it was derived from.
     * Example: "derived"
     */
    source: string;

    /**
     * The version of the Unicode standard that this numeric value is associated with.
     * Example: "14.0.0"
     */
    version: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "value",
    "type",
    "source",
    "version"
];
//#endregion

//#region data-files/v14.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as per Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character.
     * Example: "1.0"
     */
    numeric_value: string;

    /**
     * The numeric type of the character.
     * Example: "decimal"
     */
    numeric_type: "decimal" | "fractional" | "other";

    /**
     * The numeric value in a different format, if applicable.
     * Example: "1/2"
     */
    numeric_value_alt?: string;
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "numeric_value_alt"
];
//#endregion

//#region data-files/v14.0.0/emoji/emoji-data.txt
/**
 * Emoji Data for UTS #51
 * Used with Emoji Version 14.0 and subsequent minor revisions (if any)
 */
export interface EmojiData {
    /**
     * Codepoint(s) of the emoji character(s).
     * Format: U+XXXX, U+YYYY
     * Example: U+1F600
     */
    codepoints: string;

    /**
     * Property of the emoji character(s).
     * Example: "base"
     */
    property: string;

    /**
     * Comments related to the emoji character(s).
     * Example: "grinning face"
     */
    comments: string;
}

export const EMOJI_DATA_FIELDS = [
    "codepoints",
    "property",
    "comments"
];
//#endregion

//#region data-files/v14.0.0/emoji/emoji-variation-sequences.txt
/**
 * Emoji Variation Sequences for UTS #51
 * Used with Emoji Version 14.0 and subsequent minor revisions (if any)
 */
export interface EmojiVariationSequences {
    /**
     * The date when the emoji variation sequences were last updated.
     * Format: YYYY-MM-DD, e.g., "2021-06-08"
     */
    date: string;

    /**
     * The version of the emoji specification that this data corresponds to.
     * Format: Major.Minor.Patch, e.g., "14.0.0"
     */
    version: string;

    /**
     * The copyright information for the emoji data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the emoji data.
     * Format: URL, e.g., "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for documentation and usage of the emoji variation sequences.
     * Format: URL, e.g., "http://www.unicode.org/reports/tr51"
     */
    documentation_url: string;
}

export const EMOJI_VARIATION_SEQUENCES_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The grapheme break property value.
     * Example: "CR"
     */
    grapheme_break_property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";

    /**
     * The character associated with the grapheme break property.
     * Example: "U+0041"
     */
    character: string;

    /**
     * The Unicode code point of the character.
     * Example: "65"
     */
    code_point: string;
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "grapheme_break_property",
    "character",
    "code_point"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the Grapheme Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 *
 * This interface represents the default line break test as defined in the Unicode Character Database.
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Format: <string> (# <comment>)?
     * Example: "U+0041 U+0042 U+0043"
     */
    line_break: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "line_break"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties defined in the SentenceBreakProperty Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2021-08-12, 23:13:21 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2021 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the structure of the SentenceBreakTest data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points, with optional comments.
     * Example: "0041 (# Latin Capital Letter A)"
     */
    string: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty data.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * 
     * This property can take one of the following values: "word", "break", "keep", "normal".
     * Example: "word"
     */
    word_break: "word" | "break" | "keep" | "normal";

    /**
     * The description of the word break property.
     * 
     * This is a textual description explaining the behavior of the word break property.
     * Example: "This property defines how word boundaries are determined."
     */
    description: string;
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break",
    "description"
];
//#endregion

//#region data-files/v14.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the Word Break Test data.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

