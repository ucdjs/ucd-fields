// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 6.2


// #region ArabicShaping
export interface ArabicShaping {
  code_point: string; // The code point of a character, in 4-digit hexadecimal form
  name: string; // A short schematic name for the character, descriptive of the shape
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const ARABIC_SHAPING_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region BidiMirroring
export interface BidiMirroring {
  bidi_mirroring_glyph: "none" | string; // The glyph that is the mirror image of the original character's glyph, or 'none' if no suitable character exists.
  code_point: string; // The code point of the character, represented as a variable-length hexadecimal value.
  mapping: string; // A mapping from one code point to another for character-based mirroring.
}

export const BIDI_MIRRORING_FIELDS = [
  "bidi_mirroring_glyph",
  "code_point",
  "mapping"
];

// #endregion

// #region Blocks
export interface Blocks {
  start_code: string; // The starting code point of the block, in hexadecimal form
  end_code: string; // The ending code point of the block, in hexadecimal form
  block_name: string; // The name of the Unicode block
}

export const BLOCKS_FIELDS = [
  "start_code",
  "end_code",
  "block_name"
];

// #endregion

// #region CJKRadicals
export interface CjkRadicals {
  radical_number: string; // The radical number, which matches the regular expression [0-9]{1,3} with an optional apostrophe.
  cjk_radical_character: string; // The CJK Radical character corresponding to the radical number.
  cjk_unified_ideograph: string; // The CJK Unified Ideograph formed from the radical.
}

export const CJK_RADICALS_FIELDS = [
  "radical_number",
  "cjk_radical_character",
  "cjk_unified_ideograph"
];

// #endregion

// #region CaseFolding
export interface CaseFolding {
  code_point: string; // The code point of a character, in hexadecimal form
  status: "C" | "F" | "S" | "T"; // The status of the case folding mapping
  mapping: string; // The case folding mapping for the character
  name: string; // A short schematic name for the character
}

export const CASE_FOLDING_FIELDS = [
  "code_point",
  "status",
  "mapping",
  "name"
];

// #endregion

// #region CompositionExclusions
export interface CompositionExclusions {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region DerivedAge
export interface DerivedAge {
  type_name: string; // The name of the derived property type
}

export const DERIVED_AGE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedCoreProperties
export interface DerivedCoreProperties {
  type_name: string; // The name of the type as specified in the Unicode Character Database.
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedNormalizationProps
export interface DerivedNormalizationProps {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region EastAsianWidth
export interface EastAsianWidth {
  unicode_value: string; // The Unicode value of the character, represented in hexadecimal form.
  east_asian_width_property: "N" | "A" | "H" | "W" | "F" | "Na"; // The East Asian Width property of the character, indicating its width category.
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "unicode_value",
  "east_asian_width_property"
];

// #endregion

// #region EmojiSources
export interface EmojiSources {
  unicode_code_point_or_sequence: string; // The Unicode code point or sequence represented in hexadecimal form
  docomo_shift_jis_code: string; // The Shift-JIS code for DoCoMo carrier symbols, if available
  kddi_shift_jis_code: string; // The Shift-JIS code for KDDI carrier symbols, if available
  softbank_shift_jis_code: string; // The Shift-JIS code for SoftBank carrier symbols, if available
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];

// #endregion

// #region HangulSyllableType
export interface HangulSyllableType {
  hangul_syllable_type: string; // The type of Hangul syllable, indicating its structure and composition.
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
  "hangul_syllable_type"
];

// #endregion

// #region IndicMatraCategory
export interface IndicMatraCategory {
  code_point: string; // Code Point or Code Point Range of the character.
  indic_matra_category: string; // The Indic Matra Category of the character.
}

export const INDIC_MATRA_CATEGORY_FIELDS = [
  "code_point",
  "indic_matra_category"
];

// #endregion

// #region IndicSyllabicCategory
export interface IndicSyllabicCategory {
  code_point: string; // The code point of a character, in hexadecimal form
  indic_syllabic_category: string; // The syllabic category of the Indic character, defining its role in syllable construction
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
  "code_point",
  "indic_syllabic_category"
];

// #endregion

// #region Jamo
export interface Jamo {
  code_point: string; // The code point of a conjoining jamo character, in 4-digit hexadecimal form
  jamo_short_name: string; // The Jamo_Short_Name as a one-, two-, or three-character ASCII string
}

export const JAMO_FIELDS = [
  "code_point",
  "jamo_short_name"
];

// #endregion

// #region LineBreak
export interface LineBreak {
  unicode_value: string; // The Unicode value of the character, typically represented in hexadecimal form.
  line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "CP" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2" | "HL" | "CJ" | "RI"; // The line break property of the character, which can be normative or informative.
}

export const LINE_BREAK_FIELDS = [
  "unicode_value",
  "line_break_property"
];

// #endregion

// #region NameAliases
export interface NameAliases {
  code_point: string; // The code point of a character, in hexadecimal form
  alias: string; // The formal name alias for the Unicode character
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation"; // The type of the alias, indicating its classification
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];

// #endregion

// #region NamedSequences
export interface NamedSequences {
  name_of_sequence: string; // The name of the sequence as defined in the Unicode Character Database.
  code_point_sequence: number[]; // A sequence of code points represented as an array of numbers.
}

export const NAMED_SEQUENCES_FIELDS = [
  "name_of_sequence",
  "code_point_sequence"
];

// #endregion

// #region NamedSequencesProv
export interface NamedSequencesProv {
  name_of_sequence: string; // The name of the named sequence.
  code_point_sequence: string[]; // A sequence of code points represented as an array of strings.
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
  "name_of_sequence",
  "code_point_sequence"
];

// #endregion

// #region NormalizationCorrections
export interface NormalizationCorrections {
  unicode_code_point: string; // The Unicode code point of the character, in hexadecimal form
  original_decomposition: string; // The original (erroneous) decomposition of the character
  corrected_decomposition: string; // The corrected decomposition of the character
  unicode_version: string; // The version of Unicode for which the correction was entered, in n.n.n format
  comment: string; // Indicates the Unicode Corrigendum which documents the correction
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
  "unicode_code_point",
  "original_decomposition",
  "corrected_decomposition",
  "unicode_version",
  "comment"
];

// #endregion

// #region PropList
export interface PropList {
  type_name: string; // The name of the type as specified in the Unicode Character Database
}

export const PROP_LIST_FIELDS = [
  "type_name"
];

// #endregion

// #region PropertyAliases
export interface PropertyAliases {
  abbreviated_name: string; // An abbreviated name for the property.
  long_name: string; // A long name for the property.
  additional_aliases: string[]; // Other aliases that may be listed in additional fields.
}

export const PROPERTY_ALIASES_FIELDS = [
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];

// #endregion

// #region PropertyValueAliases
export interface PropertyValueAliases {
  property: string; // The property for which the property value name is used.
  abbreviated_name: string; // An abbreviated name for the property value.
  long_name: string; // A long name for the property value.
  additional_aliases: string[]; // Other aliases that may be listed for the property value.
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];

// #endregion

// #region ScriptExtensions
export interface ScriptExtensions {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  script_extensions: string[]; // A list of script extensions associated with the character
}

export const SCRIPT_EXTENSIONS_FIELDS = [
  "code_point",
  "name",
  "script_extensions"
];

// #endregion

// #region Scripts
export interface Scripts {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const SCRIPTS_FIELDS = [
  "type_name"
];

// #endregion

// #region SpecialCasing
export interface SpecialCasing {
  code: string; // The Unicode code point of the character, in hexadecimal form
  lower: string; // The lowercase mapping of the character
  title: string; // The titlecase mapping of the character
  upper: string; // The uppercase mapping of the character
  condition_list: string[]; // A list of conditions under which the mappings apply, represented as language IDs or contexts
  comment: string; // A comment providing additional information about the entry
}

export const SPECIAL_CASING_FIELDS = [
  "code",
  "lower",
  "title",
  "upper",
  "condition_list",
  "comment"
];

// #endregion

// #region StandardizedVariants
export interface StandardizedVariants {
  variation_sequence: string; // The variation sequence defined in the Unicode Standard.
  description: string; // Description of the desired appearance of the variation sequence.
  shaping_environments: string; // Indicates where the appearance is only different in particular shaping environments.
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];

// #endregion

// #region USourceData
export interface USourceData {
  u_source_id: string; // The U-source ID
  status: "C" | "D" | "E" | "F" | "N" | "U" | "V" | "W" | "X"; // A letter indicating the ideograph's status
  unicode_code_point: string; // A Unicode code point, which may vary based on the status
  radical_stroke_count: number; // Radical-stroke count
  virtual_kangxi_dictionary_position: string; // Virtual KangXi dictionary position
  ideographic_description_sequence: string; // Ideographic Description Sequence (IDS), if possible
  sources: string; // Source(s)
}

export const U_SOURCE_DATA_FIELDS = [
  "u_source_id",
  "status",
  "unicode_code_point",
  "radical_stroke_count",
  "virtual_kangxi_dictionary_position",
  "ideographic_description_sequence",
  "sources"
];

// #endregion

// #region DerivedBidiClass
export interface DerivedBidiClass {
  derived_bidi_class: string; // The derived bidirectional class of the character.
  date: string; // The date of the file creation or last modification.
  unicode_character_database: string; // Indicates that this file is part of the Unicode Character Database.
  copyright: string; // Copyright information for the Unicode data.
  terms_of_use: string; // Link to the terms of use for the Unicode data.
  documentation: string; // Link to the documentation for the Unicode data.
}

export const DERIVED_BIDI_CLASS_FIELDS = [
  "derived_bidi_class",
  "date",
  "unicode_character_database",
  "copyright",
  "terms_of_use",
  "documentation"
];

// #endregion

// #region DerivedBinaryProperties
export interface DerivedBinaryProperties {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedCombiningClass
export interface DerivedCombiningClass {
  derived_combining_class: string; // The derived combining class of a character, indicating how it combines with other characters.
  date: string; // The date when the data was last updated.
  unicode_character_database: string; // The source of the data, indicating it is from the Unicode Character Database.
  copyright: string; // Copyright information for the Unicode data.
  terms_of_use: string; // Link to the terms of use for the Unicode data.
  documentation: string; // Link to the documentation for the Unicode data.
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
  "derived_combining_class",
  "date",
  "unicode_character_database",
  "copyright",
  "terms_of_use",
  "documentation"
];

// #endregion

// #region DerivedDecompositionType
export interface DerivedDecompositionType {
  type_name: string; // The name of the type as defined in the Unicode Character Database
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedEastAsianWidth
export interface DerivedEastAsianWidth {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region DerivedGeneralCategory
export interface DerivedGeneralCategory {
  type_name: string; // The name of the type as specified in the Unicode data file.
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedJoiningGroup
export interface DerivedJoiningGroup {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const DERIVED_JOINING_GROUP_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region DerivedJoiningType
export interface DerivedJoiningType {
  type_name: string; // The name of the type as defined in the Unicode Character Database
}

export const DERIVED_JOINING_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedLineBreak
export interface DerivedLineBreak {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const DERIVED_LINE_BREAK_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region DerivedNumericType
export interface DerivedNumericType {
  type_name: string; // The name of the derived numeric type as specified in the document.
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
  "type_name"
];

// #endregion

// #region DerivedNumericValues
export interface DerivedNumericValues {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region GraphemeBreakProperty
export interface GraphemeBreakProperty {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region SentenceBreakProperty
export interface SentenceBreakProperty {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion

// #region WordBreakProperty
export interface WordBreakProperty {
  code_point: string; // The code point of a character, in hexadecimal form
  name: string; // A short schematic name for the character
  joining_type: "R" | "L" | "D" | "C" | "U" | "T"; // Defines the joining type (R = Right_Joining, L = Left_Joining, D = Dual_Joining, C = Join_Causing, U = Non_Joining, T = Transparent)
  joining_group: string; // Defines the joining group, based schematically on character names
}

export const WORD_BREAK_PROPERTY_FIELDS = [
  "code_point",
  "name",
  "joining_type",
  "joining_group"
];

// #endregion
