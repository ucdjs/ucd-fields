// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 6.2

//#region data-files/v6.2.0/ArabicShaping.txt
/**
 * This interface defines the properties for ArabicShaping data, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of an Arabic, Syriac, N'Ko, or Mandaic character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name, with parts joined by underscores.
     * Example: 'Teh_Marbuta'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v6.2.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph property mappings in Unicode.
 */
export interface BidiMirroring {
    /**
     * The code point of the original character, represented as a hexadecimal value.
     * Example: '0041' for 'A'.
     */
    original_code_point: string;

    /**
     * The code point of the mirrored character, represented as a hexadecimal value.
     * Example: '0061' for 'a'.
     */
    mirrored_code_point: string;

    /**
     * Indicates if the mirroring is a best fit.
     * This is a boolean value where true means it is a best fit mirroring.
     * Example: true if the mapping is a best fit.
     */
    best_fit: boolean;
}

export const BIDI_MIRRORING_FIELDS = [
    "original_code_point",
    "mirrored_code_point",
    "best_fit"
];
//#endregion

//#region data-files/v6.2.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test data.
 */
export interface BidiTest {
    /**
     * An ordered space-delimited list of numbers indicating the resulting levels
     * for each input property value. The UBA does not assign levels to certain values;
     * those are indicated with an 'x'.
     * 
     * Example:
     *   @Levels:    1 0
     *   @Levels:    x 1 x 2
     */
    levels: string;

    /**
     * An ordered space-delimited list of numbers indicating the resulting
     * visual ordering from left to right. The numbers are zero-based, and
     * are indexes into the input string. Items with a level of 'x' are skipped.
     * 
     * Example:
     *   @Reorder:    1 0
     *   @Reorder:    3 1
     */
    reorder: string;

    /**
     * An ordered list of BIDI property values.
     */
    input: string;

    /**
     * A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL.
     * Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
     * 
     * Example:
     *    L LRE R R; 7
     *    L LRE R AL; 7
     */
    bitset: string;
}

export const BIDI_TEST_FIELDS = ["levels", "reorder", "input", "bitset"];
//#endregion

//#region data-files/v6.2.0/Blocks.txt
/**
 * Interface representing Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block, represented as a hexadecimal value.
     * Example: "0041" for 'A'.
     */
    start_code: string;

    /**
     * The ending code point of the block, represented as a hexadecimal value.
     * Example: "007A" for 'z'.
     */
    end_code: string;

    /**
     * The name of the block, which may contain spaces and is case insensitive.
     * Example: "Basic Latin".
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v6.2.0/CJKRadicals.txt
/**
 * Interface representing the mapping from radical numbers to CJK characters.
 */
export interface CJKRadicals {
    /**
     * The radical number, which can be a number from 0 to 999 and may end with an apostrophe.
     * Example: "123'"
     */
    radical_number: string;

    /**
     * The CJK Radical character corresponding to the radical number.
     * Example: "氵"
     */
    cjk_radical: string;

    /**
     * The CJK Unified Ideograph formed from the radical.
     * Example: "水"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "radical_number",
    "cjk_radical",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v6.2.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character.
     * Format: Hexadecimal (e.g., U+0041 for 'A').
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Possible values: "C" (common), "F" (full), "S" (simple), "T" (Turkic special case).
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding.
     * Format: A single character or multiple characters separated by spaces.
     * Example: "a" for simple case folding, "ß" for full case folding.
     */
    mapping: string;

    /**
     * The name of the character.
     * This is a descriptive name for the character represented by the code point.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v6.2.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 *
 * @property {string} file_name - The name of the file containing the composition exclusions.
 * @property {string} date - The date when the file was created, formatted as YYYY-MM-DD, HH:MM:SS GMT.
 * @property {string} description - A brief description of the file's purpose and content.
 * @property {string} copyright - The copyright information for the file.
 * @property {string} terms_of_use - A link to the terms of use for the Unicode data.
 * @property {string} more_information - A link to more information regarding the composition exclusions.
 * @property {string} derivation - A link to the derived property for full composition exclusions.
 */
export interface CompositionExclusions {
  file_name: string;
  date: string;
  description: string;
  copyright: string;
  terms_of_use: string;
  more_information: string;
  derivation: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
  "file_name",
  "date",
  "description",
  "copyright",
  "terms_of_use",
  "more_information",
  "derivation"
];
//#endregion

//#region data-files/v6.2.0/DerivedAge.txt
/**
 * This interface represents the derived properties of Unicode characters, detailing when various code points were first assigned.
 */
export interface DerivedAge {
    /**
     * The date when the code point was assigned in Unicode.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2012-09-20, 21:30:39 GMT"
     */
    assigned_date: string;

    /**
     * The version of Unicode in which the code point was assigned.
     * Example: "1.1"
     */
    unicode_version: string;

    /**
     * Indicates the type of code point assigned.
     * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

    /**
     * Additional notes regarding the assignment of the code point.
     * Example: "The term 'assigned' means that a previously reserved code point was assigned to be a character."
     */
    notes: string;
}

export const DERIVED_AGE_FIELDS = [
    "assigned_date",
    "unicode_version",
    "code_point_type",
    "notes"
];
//#endregion

//#region data-files/v6.2.0/DerivedCoreProperties.txt
/**
 * Interface representing the derived core properties from the Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character's general category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character's script.
     * Example: "Latin" for Latin script characters.
     */
    script: string;

    /**
     * The Unicode character's numeric value, if applicable.
     * Example: "1.0" for the character '1'.
     */
    numeric_value?: string;

    /**
     * The Unicode character's bidirectional category.
     * Example: "L" for left-to-right characters.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The Unicode character's combining class.
     * Example: 0 for base characters.
     */
    combining_class: number;

    /**
     * The Unicode character's decomposition mapping.
     * Example: "0041" for 'A'.
     */
    decomposition?: string;

    /**
     * The Unicode character's decimal digit value, if applicable.
     * Example: 1 for the character '1'.
     */
    decimal_digit_value?: number;

    /**
     * The Unicode character's digit value, if applicable.
     * Example: 1 for the character '1'.
     */
    digit_value?: number;

    /**
     * The Unicode character's mirrored property.
     * Example: "N" for not mirrored.
     */
    mirrored: "Y" | "N";

    /**
     * The Unicode character's uppercase mapping.
     * Example: "0041" for 'A'.
     */
    uppercase_mapping?: string;

    /**
     * The Unicode character's lowercase mapping.
     * Example: "0061" for 'a'.
     */
    lowercase_mapping?: string;

    /**
     * The Unicode character's titlecase mapping.
     * Example: "01C5" for 'ǅ'.
     */
    titlecase_mapping?: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "general_category",
    "script",
    "numeric_value",
    "bidi_category",
    "combining_class",
    "decomposition",
    "decimal_digit_value",
    "digit_value",
    "mirrored",
    "uppercase_mapping",
    "lowercase_mapping",
    "titlecase_mapping"
];
//#endregion

//#region data-files/v6.2.0/DerivedNormalizationProps.txt
/**
 * Interface representing the derived normalization properties.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * The version of the normalization algorithm used.
     * Example: "6.2.0"
     */
    version: string;

    /**
     * The date when the normalization properties were last updated.
     * Format: YYYY-MM-DD
     * Example: "2012-05-23"
     */
    last_updated: string;

    /**
     * A boolean indicating whether the normalization properties are valid.
     * Example: true
     */
    is_valid: boolean;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "version",
    "last_updated",
    "is_valid"
];
//#endregion

//#region data-files/v6.2.0/EastAsianWidth.txt
/**
 * EastAsianWidth
 *
 * This interface represents the East Asian Width properties of Unicode characters.
 * Each character is associated with a Unicode value and its corresponding East Asian Width property.
 *
 * The East Asian Width property can take one of the following values:
 * - "N": Not East Asian
 * - "A": Ambiguous
 * - "H": Half-width
 * - "W": Full-width
 * - "F": Full-width (for compatibility)
 * - "Na": Not applicable
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 *
 * Unassigned code points that default to "W" include ranges in specific blocks such as:
 * - CJK Unified Ideographs Extension A: U+3400..U+4DBF
 * - CJK Unified Ideographs: U+4E00..U+9FFF
 * - CJK Compatibility Ideographs: U+F900..U+FAFF
 * - CJK Unified Ideographs Extension B: U+20000..U+2A6DF
 * - CJK Unified Ideographs Extension C: U+2A700..U+2B73F
 * - CJK Unified Ideographs Extension D: U+2B740..U+2B81F
 * - CJK Compatibility Ideographs Supplement: U+2F800..U+2FA1F
 * - Any other reserved code points on Planes 2 and 3: U+20000..U+2FFFD, U+30000..U+3FFFD
 */
export interface EastAsianWidth {
    unicode_value: string;
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "unicode_value",
    "east_asian_width"
];
//#endregion

//#region data-files/v6.2.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
    /**
     * Unicode code point or sequence.
     * Example: U+1F600
     */
    unicode_code_point_or_sequence: string;
    /**
     * DoCoMo Shift-JIS code, if available.
     * Example: 0xE63A
     */
    docomo_shift_jis_code: string | null;
    /**
     * KDDI Shift-JIS code, if available.
     * Example: 0xE63B
     */
    kddi_shift_jis_code: string | null;
    /**
     * SoftBank Shift-JIS code, if available.
     * Example: 0xE63C
     */
    softbank_shift_jis_code: string | null;
}

export const EMOJI_SOURCES_FIELDS = [
    "unicode_code_point_or_sequence",
    "docomo_shift_jis_code",
    "kddi_shift_jis_code",
    "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v6.2.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Example: "L", "V", "T"
     */
    code: "L" | "V" | "T";

    /**
     * The description of the syllable type.
     * Example: "Leading", "Vowel", "Trailing"
     */
    description: string;

    /**
     * The Unicode value associated with the syllable type.
     * Example: 0x1100 for "L"
     */
    unicode_value: number;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "code",
    "description",
    "unicode_value"
];
//#endregion

//#region data-files/v6.2.0/IndicMatraCategory.txt
/**
 * This interface defines the Indic Matra Category, which is a provisional property aimed at specifying syllabic structure for Indic scripts.
 *
 * The property is designed primarily to supplement the Indic_Syllabic_Category property.
 *
 * Note that this provisional property is not intended as a prescriptive property regarding display or font design.
 */
export interface IndicMatraCategory {
    /**
     * Code Point or Code Point Range
     * 
     * Format: A single code point or a range of code points.
     * Example: "U+0900" or "U+0900-U+090F"
     */
    code_point: string;

    /**
     * Indic Matra Category
     * 
     * This field indicates the category of the matra. It can take values such as:
     * - "dependent_vowel"
     * - "virama"
     * 
     * Example: "dependent_vowel"
     */
    indic_matra_category: "dependent_vowel" | "virama";
}

export const INDIC_MATRA_CATEGORY_FIELDS = [
    "code_point",
    "indic_matra_category"
];
//#endregion

//#region data-files/v6.2.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property for Unicode characters.
 *
 * The Indic Syllabic Category is an enumerated property that specifies the syllabic structure
 * and segmentation rules for Indic scripts. It includes various categories relevant to how
 * Indic syllables (or aksaras) are constructed.
 */
export interface IndicSyllabicCategory {
    /**
     * The code point or code point range of the character.
     * Format: U+XXXX or U+XXXX..U+YYYY
     * Example: U+0905 for the character 'अ'
     */
    code_point: string;

    /**
     * The Indic syllabic category of the character.
     * Possible values include:
     * - "Vowel"
     * - "Consonant"
     * - "Vowel_Independent"
     * - "Consonant_Cluster"
     * - "Other"
     * Example: "Vowel" for characters like 'अ' (U+0905)
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Vowel_Independent" | "Consonant_Cluster" | "Other";
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "code_point",
    "indic_syllabic_category"
];
//#endregion

//#region data-files/v6.2.0/Jamo.txt
/**
 * This interface defines the Jamo_Short_Name property.
 *
 * Each entry represents a conjoining jamo character that participates in the algorithmic determination of Hangul syllable character names.
 *
 * @property {"string"} code_point - The code point of a conjoining jamo character in 4-digit hexadecimal form (e.g., "1100").
 * @property {"string"} jamo_short_name - The Jamo_Short_Name as a one-, two-, or three-character ASCII string (e.g., "G", "GG").
 */
export interface Jamo {
  code_point: string;
  jamo_short_name: string;
}

export const JAMO_FIELDS = [
  "code_point",
  "jamo_short_name"
];
//#endregion

//#region data-files/v6.2.0/LineBreak.txt
/**
 * This interface represents the line break properties for Unicode characters.
 */
export interface LineBreak {
    /**
     * The Unicode value of the character.
     * Example: U+0041 for 'A'
     */
    unicode_value: string;

    /**
     * The line break property of the character.
     * Can be one of the following:
     * - Normative: "BK", "CR", "LF", "CM", "SG", "GL", "CB", "SP", "ZW", "NL", "WJ", "JL", "JV", "JT", "H2", "H3"
     * - Informative: "XX", "OP", "CL", "CP", "QU", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BB", "BA", "SA", "AI", "B2", "HL", "CJ", "RI"
     * Example: "CR" for Carriage Return
     */
    line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "CP" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2" | "HL" | "CJ" | "RI";
}

export const LINE_BREAK_FIELDS = [
    "unicode_value",
    "line_break_property"
];
//#endregion

//#region data-files/v6.2.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented in hexadecimal format.
   * Example: 'U+0041' for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a correction, control, alternate, figment, or abbreviation.
   * Example: 'LATIN CAPITAL LETTER A' for 'A'.
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: 'correction', 'control', 'alternate', 'figment', 'abbreviation'.
   * Example: 'control' for control characters.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v6.2.0/NamedSequences.txt
/**
 * Interface representing named sequences from the Unicode Character Database.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;
    /**
     * The code point sequence for USI, represented as a string of space-separated values.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v6.2.0/NamedSequencesProv.txt
/**
 * Provisional Named Sequences
 *
 * This interface represents the provisional named sequences as defined in the Unicode Character Database.
 * Each entry consists of a name and a corresponding code point sequence.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the named sequence, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v6.2.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041").
     */
    unicode_code_point: string;
    
    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;
    
    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;
    
    /**
     * Version of Unicode for which the correction was entered into UnicodeData.txt, in n.n.n format (e.g., "6.2.0").
     */
    unicode_version: string;
    
    /**
     * Indicates the Unicode Corrigendum which documents the correction (e.g., "Corrigendum #3").
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v6.2.0/NormalizationTest.txt
/**
 * Interface representing the normalization test data.
 */
export interface NormalizationTest {
    /**
     * The source code points.
     * Example: "U+0041; U+0061"
     */
    source: string;

    /**
     * The NFC normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfc: string;

    /**
     * The NFD normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfd: string;

    /**
     * The NFKC normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfkc: string;

    /**
     * The NFKD normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v6.2.0/PropList.txt
/**
 * Unicode Character Database
 *
 * This interface represents the structure of the Unicode Character Database.
 */
export interface PropList {
    /**
     * The date when the database was created.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2012-05-23, 20:34:59 GMT"
     */
    date: string;

    /**
     * The version of the database.
     * Format: Major.Minor.Patch
     * Example: "6.2.0"
     */
    version: string;

    /**
     * The copyright information for the database.
     * Example: "Copyright (c) 1991-2012 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation link for the database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v6.2.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database (UCD).
 * The properties include abbreviated names, long names, and additional aliases for various Unicode properties.
 *
 * Each property name may have multiple aliases, and loose matching is applied to property names and values.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyAliases {
  /**
   * Abbreviated name for the property.
   */
  abbreviated_name: string;

  /**
   * Long name for the property.
   */
  long_name: string;

  /**
   * Additional aliases for the property, if any.
   */
  additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v6.2.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database (UCD).
 *
 * Each property value name consists of the following fields:
 * - `property`: The property for which the property value name is used (e.g., Bidi_Class).
 * - `abbreviated_name`: An abbreviated name for the property value (e.g., AL).
 * - `long_name`: A long descriptive name for the property value (e.g., Arabic Letter).
 *
 * In the case of the `ccc` property, there are four fields:
 * - `property`: The property for which the property value name is used.
 * - `numeric`: A numeric representation of the property value.
 * - `abbreviated_name`: An abbreviated name for the property value.
 * - `long_name`: A long descriptive name for the property value.
 *
 * Note that property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * For more information, see UTS #18: Unicode Regular Expressions.
 */
export interface PropertyValueAliases {
  property: string;
  abbreviated_name: string;
  long_name: string;
  numeric?: number;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name",
  "numeric"
];
//#endregion

//#region data-files/v6.2.0/ScriptExtensions.txt
/**
 * Interface representing the Script Extensions data.
 */
export interface ScriptExtensions {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The script or scripts associated with the code point.
     * This can be a single script or a combination of scripts, represented as a string.
     * Example: "Latin", "Cyrillic", or "Latin,Cyrillic".
     */
    script: string;

    /**
     * Additional information about the character, if available.
     * This is an optional field and can be a string describing the character's usage or properties.
     * Example: "Commonly used in both Latin and Cyrillic scripts."
     */
    description?: string;
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "code_point",
    "script",
    "description"
];
//#endregion

//#region data-files/v6.2.0/Scripts.txt
/**
 * Unicode Character Database
 *
 * @property {string} unicode_version - The version of the Unicode standard.
 * @property {string} date - The date of the database release in ISO 8601 format (e.g., "2012-06-04T17:21:29Z").
 * @property {string} copyright - The copyright information for the Unicode database.
 * @property {string} terms_of_use - The URL for the terms of use for the Unicode database.
 * @property {string} documentation - The URL for the documentation related to the Unicode database.
 */
export interface Scripts {
  unicode_version: string;
  date: string;
  copyright: string;
  terms_of_use: string;
  documentation: string;
}

export const SCRIPTS_FIELDS = [
  "unicode_version",
  "date",
  "copyright",
  "terms_of_use",
  "documentation"
];
//#endregion

//#region data-files/v6.2.0/SpecialCasing.txt
/**
 * This interface represents the special casing properties of Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character in hexadecimal format.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior.
     * Example: "en" for English, "Not_fr" for not French
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the entry.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v6.2.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "[0;31m"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Red text"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Terminal, Web"
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v6.2.0/USourceData.txt
/**
 * This interface represents the data structure for U-source ideographs.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;
    /**
     * A letter indicating the ideograph's status. Possible values include:
     * - "C": Included in Extension C
     * - "D": Included in Extension D
     * - "E": Included in Extension E
     * - "F": Submitted for Extension F
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded
     * - "V": Variant of an encoded character
     * - "W": Not to encode
     * - "X": No action taken
     */
    status: "C" | "D" | "E" | "F" | "N" | "U" | "V" | "W" | "X";
    /**
     * A Unicode code point. The format is U+XXXX where XXXX is a hexadecimal number.
     * - If status is "C", "D", "E", or "U", this is the code point of the character.
     * - If status is "V", this is the code point of the character for which this is a variant.
     * - Empty otherwise.
     */
    unicode_code_point: string;
    /**
     * Radical-stroke count, represented as a number.
     */
    radical_stroke_count: number;
    /**
     * Virtual KangXi dictionary position, represented as a string.
     */
    virtual_kangxi_position: string;
    /**
     * Ideographic Description Sequence (IDS), if possible. This is a string representation.
     */
    ideographic_description_sequence: string;
    /**
     * Source(s) of the ideograph, represented as a string.
     */
    sources: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the file DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The bidirectional category of the character.
     * Example: "L" for Left-to-Right, "R" for Right-to-Left.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The character itself as a string.
     * Example: "A" for the character 'A'.
     */
    character: string;

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1 for the character '1'.
     */
    numeric_value?: number;

    /**
     * The mirrored character, if applicable.
     * Example: "A" for the mirrored character of 'A'.
     */
    mirrored_character?: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "code_point",
    "bidi_category",
    "character",
    "numeric_value",
    "mirrored_character"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The property name, represented as a string.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property, which can be a union of specific string values.
     * Example: "Yes" | "No"
     */
    property_value: "Yes" | "No";
    
    /**
     * A description of the property, providing additional context.
     * Example: "Indicates whether the character is a Bidi control character."
     */
    description: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "description"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The Unicode character code point, represented as a hexadecimal string.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The combining class value, which is an integer indicating the type of combining character.
     * Example: 0 for no combining, 1 for a non-spacing mark.
     */
    combining_class: number;

    /**
     * The canonical name of the character, which may include diacritics.
     * Example: "LATIN CAPITAL LETTER A".
     */
    canonical_name: string;

    /**
     * The character itself, represented as a string.
     * Example: "A".
     */
    character: string;

    /**
     * The script associated with the character, represented as a string.
     * Example: "Latin".
     */
    script: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "code_point",
    "combining_class",
    "canonical_name",
    "character",
    "script"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the Unicode Character Database derived decomposition type.
 */
export interface DerivedDecompositionType {
    /**
     * The Unicode character that this decomposition type represents.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_character: string;

    /**
     * The decomposition mapping for the character.
     * Example: "U+0061 U+0301" for 'á' (a with acute).
     */
    decomposition_mapping: string;

    /**
     * The type of decomposition.
     * Example: "canonical" or "compatibility".
     */
    decomposition_type: "canonical" | "compatibility";

    /**
     * The source of the decomposition data.
     * Example: "Unicode 6.2.0".
     */
    source: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "unicode_character",
    "decomposition_mapping",
    "decomposition_type",
    "source"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The East Asian width property of the character.
     * Example: "Narrow", "Wide", "Fullwidth", "Halfwidth".
     */
    east_asian_width: "Narrow" | "Wide" | "Fullwidth" | "Halfwidth";

    /**
     * The Unicode code point of the character.
     * Example: 65 for 'A'.
     */
    code_point: number;

    /**
     * The category of the character.
     * Example: "Letter", "Number", "Symbol".
     */
    category: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width",
    "code_point",
    "category"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1.0 for a character with a numeric value.
     */
    numeric_value?: number;

    /**
     * The name of the character in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The code point of the character in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code_point: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "numeric_value",
    "character_name",
    "code_point"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The name of the derived joining group.
     * Example: "Left"
     */
    derived_joining_group_name: string;

    /**
     * The code point of the character.
     * Example: "U+0041"
     */
    code_point: string;

    /**
     * The joining type of the character.
     * Example: "D"
     */
    joining_type: "D" | "L" | "R" | "T";

    /**
     * The character that this group is derived from.
     * Example: "U+0031"
     */
    derived_from: string;

    /**
     * The Unicode version in which this group was introduced.
     * Example: "6.2.0"
     */
    unicode_version: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "derived_joining_group_name",
    "code_point",
    "joining_type",
    "derived_from",
    "unicode_version"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining type.
 */
export interface DerivedJoiningType {
    /**
     * The character's joining type, which can be one of the following: "U", "L", "R", "D", "C", "T", "A".
     * Example: "U"
     */
    joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "A";

    /**
     * The character's code point in hexadecimal format.
     * Example: "0041"
     */
    code_point: string;

    /**
     * The character's name as defined in the Unicode standard.
     * Example: "LATIN CAPITAL LETTER A"
     */
    character_name: string;

    /**
     * The character's directionality, which can be one of the following: "L", "R", "AL", "EN", "AN", "NSM", "B", "S", "WS", "ON".
     * Example: "L"
     */
    directionality: "L" | "R" | "AL" | "EN" | "AN" | "NSM" | "B" | "S" | "WS" | "ON";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character_name",
    "directionality"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2012-08-13, 19:20:17 GMT"
     */
    date: string;
    /**
     * The source of the data, including copyright information.
     * Example: "Unicode Character Database"
     */
    source: string;
    /**
     * The copyright holder of the data.
     * Example: "Copyright (c) 1991-2012 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the data.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation reference for the data.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "source",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: "1.0"
     */
    numeric_value: string;
    
    /**
     * The type of the numeric value.
     * Example: "decimal"
     */
    numeric_type: "decimal" | "integer" | "fraction";
    
    /**
     * The source of the numeric value.
     * Example: "Unicode"
     */
    source: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source"
];
//#endregion

//#region data-files/v6.2.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value associated with a character.
     * Example: "1.0"
     */
    numeric_value: "string";
    
    /**
     * The type of numeric value.
     * Example: "integer" or "decimal"
     */
    numeric_type: "string";
    
    /**
     * The character associated with the numeric value.
     * Example: "A"
     */
    character: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the properties defined in the GraphemeBreakProperty-6.2.0.txt file.
 */
export interface GraphemeBreakProperty {
    /**
     * The Unicode character that represents the grapheme break property.
     * Example: "CR"
     */
    property: "CR" | "LF" | "Control" | "Extend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";

    /**
     * The description of the grapheme break property.
     * Example: "Line Feed"
     */
    description: string;

    /**
     * The code point of the character.
     * Example: "U+000A"
     */
    code_point: string;

    /**
     * The category of the grapheme break property.
     * Example: "Line Break"
     */
    category: string;
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "property",
    "description",
    "code_point",
    "category"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the Grapheme Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0062 0063"
     */
    code_points: string;

    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 */
export interface LineBreakTest {
    /**
     * Date of the test in ISO 8601 format.
     * Example: "2012-08-22T12:41:17Z"
     */
    date: string;

    /**
     * Unicode Character Database copyright information.
     * Example: "Copyright (c) 1991-2012 Unicode, Inc."
     */
    copyright: string;

    /**
     * Terms of use URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * Documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation: string;

    /**
     * Format description for the line break test.
     * Example: "<string> (# <comment>)?"
     */
    format: string;

    /**
     * Description of the string format containing hex Unicode code points.
     * Example: "<string> contains hex Unicode code points, with"
     */
    string_description: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation",
    "format",
    "string_description"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties defined in the SentenceBreakProperty Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The character's general category, which can be one of the following: "L", "V", "T", "S", "W", "X", "Z".
     * Example: "L" for letters.
     */
    general_category: string;

    /**
     * The specific subcategory of the character, which can be one of the following: "Lu", "Ll", "Lt", "Lm", "Lo", "Nl", "No", "Mn", "Mc", "Me", "Cf", "Cs", "Co", "Cn".
     * Example: "Lu" for uppercase letters.
     */
    sub_category: string;

    /**
     * The numeric value associated with the character, if applicable. This can be a number or "NaN".
     * Example: 1.0 for a character with a numeric value.
     */
    numeric_value: number | "NaN";

    /**
     * The bidirectional category of the character, which can be one of the following: "L", "R", "AL", "EN", "ES", "ET", "AN", "CS", "B", "S", "WS", "ON", "BN".
     * Example: "L" for left-to-right characters.
     */
    bidi_category: string;

    /**
     * The script associated with the character, which can be one of the following: "Latin", "Cyrillic", "Arabic", "Han", "Greek", "Hebrew", etc.
     * Example: "Latin" for Latin script characters.
     */
    script: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "general_category",
    "sub_category",
    "numeric_value",
    "bidi_category",
    "script"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the Default Sentence Break Test.
 */
export interface SentenceBreakTest {
    /**
     * The date and time of the test in GMT format.
     * Example: "2012-08-22, 12:41:18 GMT"
     */
    date: string;

    /**
     * The Unicode character database copyright information.
     * Example: "Copyright (c) 1991-2012 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode character database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation link for the Unicode character database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;

    /**
     * The format description of the sentence break test.
     * Example: "<string> (# <comment>)?"
     */
    format: string;

    /**
     * Description of the string format containing hex Unicode code points.
     */
    string_format: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation",
    "format",
    "string_format"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * 
     * This property can take one of the following values: "normal", "break-all", "keep-all", "break-word".
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all" | "break-word";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break"
];
//#endregion

//#region data-files/v6.2.0/auxiliary/WordBreakTest.txt
/**
 * Default Word Break Test
 *
 * This interface represents the structure of the word break test data.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0061 0062 0063"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

