// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 4.1

//#region data-files/v4.1.0/ArabicShaping.txt
/**
 * This interface defines the shaping classes for Arabic and Syriac positional shaping.
 */
export interface ArabicShaping {
    /**
     * The code point, in 4-digit hexadecimal form, of an Arabic or Syriac character.
     * Example: "0629"
     */
    code_point: string;

    /**
     * A short schematic name for that character, abbreviated from the normative Unicode character name.
     * Example: "TEH MARBUTA"
     */
    short_name: string;

    /**
     * Defines the joining type of the character.
     * Possible values: "R" (Right_Joining), "L" (Left_Joining), "D" (Dual_Joining),
     * "C" (Join_Causing), "U" (Non_Joining), "T" (Transparent).
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * Defines the joining group based on character names, with parts joined by underscores.
     * Example: "Teh_Marbuta"
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "short_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v4.1.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph property, which lists characters that have the mirrored property
 * where there is another Unicode character that typically has a glyph that is the mirror image of the original
 * character's glyph. Each mapping line contains two fields, separated by a semicolon (';').
 * 
 * The first field is the code point of the original character, represented as a variable-length hexadecimal value
 * with 4 to 6 digits (e.g., '0041' for 'A'). The second field is the code point of the mirrored character,
 * also represented as a variable-length hexadecimal value (e.g., '0061' for 'a').
 * 
 * Note that some characters may have the "mirrored" property but no appropriate mirrors, which are listed as
 * comments at the end of the file.
 */
export interface BidiMirroring {
  /**
   * The code point of the original character, represented as a hexadecimal value.
   * Example: '0041'
   */
  original_code_point: string;
  
  /**
   * The code point of the mirrored character, represented as a hexadecimal value.
   * Example: '0061'
   */
  mirrored_code_point: string;
}

export const BIDI_MIRRORING_FIELDS = [
  "original_code_point",
  "mirrored_code_point"
];
//#endregion

//#region data-files/v4.1.0/Blocks.txt
/**
 * Interface representing Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Example: 0x0000
     */
    start_code: number;

    /**
     * The ending code point of the block.
     * Example: 0x007F
     */
    end_code: number;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v4.1.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following: "C" (common), "F" (full), "S" (simple), or "T" (Turkic special case).
     * Example: "C"
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: "0061" for 'a' or "0061 0301" for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: "LATIN CAPITAL LETTER A"
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v4.1.0/CompositionExclusions.txt
/**
 * This interface represents the data structure for the Composition Exclusions from the Unicode Character Database.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS TZ
     * Example: "2005-03-17, 15:21:00 PST"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "Copyright (c) 1991-2005 Unicode, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for more information about the primary exclusion list table.
     * Example: "http://www.unicode.org/unicode/reports/tr15/#Primary Exclusion List Table"
     */
    more_info_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "more_info_url"
];
//#endregion

//#region data-files/v4.1.0/DerivedAge.txt
/**
 * This interface represents the Unicode Character Database: Derived Property Data.
 */
export interface DerivedAge {
    /**
     * The date when the Unicode version was released.
     * Format: YYYY-MM-DD
     * Example: "2005-02-26"
     */
    date: string;

    /**
     * The version of Unicode.
     * Example: "4.1.0"
     */
    version: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "Copyright (c) 1991-2005 Unicode, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation.
     * Example: "UCD.html"
     */
    documentation_url: string;

    /**
     * Notes regarding the Unicode data.
     * Example: "The term 'assigned' means that a previously reserved code point was assigned to be a character."
     */
    notes: string;

    /**
     * The URL for details on the contents of each version.
     * Example: "http://www.unicode.org/versions/enumeratedversions.html"
     */
    version_details_url: string;
}

export const DERIVED_AGE_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "notes",
    "version_details_url"
];
//#endregion

//#region data-files/v4.1.0/DerivedCoreProperties.txt
/**
 * Interface representing the derived core properties from the Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character's general category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character's script.
     * Example: "Latin" for Latin script characters.
     */
    script: string;

    /**
     * The Unicode character's numeric value, if applicable.
     * Example: "1.0" for the character '1'.
     */
    numeric_value?: string;

    /**
     * The Unicode character's bidirectional category.
     * Example: "L" for left-to-right characters.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The Unicode character's combining class.
     * Example: 0 for base characters.
     */
    combining_class: number;

    /**
     * The Unicode character's decimal digit value, if applicable.
     * Example: 1 for the character '1'.
     */
    decimal_digit_value?: number;

    /**
     * The Unicode character's mirrored property.
     * Example: true for characters that are mirrored.
     */
    mirrored: boolean;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "general_category",
    "script",
    "numeric_value",
    "bidi_category",
    "combining_class",
    "decimal_digit_value",
    "mirrored"
];
//#endregion

//#region data-files/v4.1.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalizationProps.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility normalization.
     * Example: true
     */
    use_compatibility: boolean;

    /**
     * The character set to be used for normalization, specified as a string.
     * Example: "Unicode"
     */
    character_set: string;

    /**
     * An optional string that specifies the locale for normalization.
     * Example: "en-US"
     */
    locale?: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "use_compatibility",
    "character_set",
    "locale"
];
//#endregion

//#region data-files/v4.1.0/EastAsianWidth.txt
/**
 * EastAsianWidth Properties
 *
 * This interface represents the East Asian Width properties of Unicode characters.
 * Each character is associated with a Unicode value and its corresponding East Asian Width property.
 *
 * The East Asian Width property can take one of the following values:
 * - "N": Not East Asian
 * - "A": Ambiguous
 * - "H": Half-width
 * - "W": Full-width
 * - "F": Full-width (for compatibility)
 * - "Na": Not applicable
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * @see UAX #11: East Asian Character Width for more information.
 */
export interface EastAsianWidth {
    unicode_value: string;
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "unicode_value",
    "east_asian_width"
];
//#endregion

//#region data-files/v4.1.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "A", "B", "C"
     * Example: "A"
     */
    code: "A" | "B" | "C";

    /**
     * The description of the syllable type.
     * Example: "Type A"
     */
    description: string;

    /**
     * The Unicode value of the syllable type.
     * Format: integer
     * Example: 44032
     */
    unicode_value: number;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "code",
    "description",
    "unicode_value"
];
//#endregion

//#region data-files/v4.1.0/Jamo.txt
/**
 * This interface defines the Jamo Short Name property.
 *
 * Each entry represents a combining jamo character that participates in the algorithmic determination of Hangul syllable character names.
 *
 * @property {"string"} code_point - The code point of a combining jamo character in 4-digit hexadecimal form. Example: "1100"
 * @property {"string"} jamo_short_name - The Jamo Short Name as a one-, two-, or three-character ASCII string. Example: "G" or "GG"
 */
export interface Jamo {
  code_point: string;
  jamo_short_name: string;
}

export const JAMO_FIELDS = [
  "code_point",
  "jamo_short_name"
];
//#endregion

//#region data-files/v4.1.0/LineBreak.txt
/**
 * This interface represents the line break properties for Unicode characters.
 */
export interface LineBreak {
    /**
     * The Unicode value of the character.
     * Example: U+0020 for space character.
     */
    unicode_value: string;

    /**
     * The line break property of the character.
     * This can be one of the following values:
     * - Normative: "BK", "CR", "LF", "CM", "SG", "GL", "CB", "SP", "ZW", "NL", "WJ", "JL", "JV", "JT", "H2", "H3"
     * - Informative: "XX", "OP", "CL", "QU", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BB", "BA", "SA", "AI", "B2"
     * All code points not explicitly listed are given the value "XX".
     * Example: "CR" for carriage return.
     */
    line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2";
}

export const LINE_BREAK_FIELDS = ["unicode_value", "line_break_property"];
//#endregion

//#region data-files/v4.1.0/NamedSequences.txt
/**
 * Interface representing the NamedSequences data structure.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "Latin Capital Letter A"
     */
    name: string;
    /**
     * The code point sequence for USI.
     * Example: "U+0041"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v4.1.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
  /**
   * Unicode code point, represented as a hexadecimal string.
   * Example: "U+0041"
   */
  unicode_code_point: string;

  /**
   * Original erroneous decomposition of the character.
   * Example: "A"
   */
  original_decomposition: string;

  /**
   * Corrected decomposition of the character.
   * Example: "LATIN CAPITAL LETTER A"
   */
  corrected_decomposition: string;

  /**
   * Version of Unicode for which the correction was entered, in n.n.n format.
   * Example: "4.1.0"
   */
  unicode_version: string;

  /**
   * Comment indicating the Unicode Corrigendum which documents the correction.
   * Example: "Corrigendum #4"
   */
  comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
  "unicode_code_point",
  "original_decomposition",
  "corrected_decomposition",
  "unicode_version",
  "comment"
];
//#endregion

//#region data-files/v4.1.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite for Unicode character database.
 */
export interface NormalizationTest {
    /**
     * Conformance invariant for NFC normalization.
     * Must be true for all conformant implementations.
     * Example: c2 == NFC(c1) == NFC(c2) == NFC(c3)
     */
    c1: string;
    /**
     * Conformance invariant for NFC normalization.
     * Must be true for all conformant implementations.
     * Example: c2 == NFC(c1) == NFC(c2) == NFC(c3)
     */
    c2: string;
    /**
     * Conformance invariant for NFD normalization.
     * Must be true for all conformant implementations.
     * Example: c3 == NFD(c1) == NFD(c2) == NFD(c3)
     */
    c3: string;
    /**
     * Conformance invariant for NFKC normalization.
     * Must be true for all conformant implementations.
     * Example: c4 == NFKC(c1) == NFKC(c2) == NFKC(c3)
     */
    c4: string;
    /**
     * Conformance invariant for NFKD normalization.
     * Must be true for all conformant implementations.
     * Example: c5 == NFKD(c1) == NFKD(c2) == NFKD(c3)
     */
    c5: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "c1",
    "c2",
    "c3",
    "c4",
    "c5"
];
//#endregion

//#region data-files/v4.1.0/PropList.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface PropList {
    /**
     * The date of the database entry in ISO 8601 format.
     * Example: "2005-03-26T00:34:40Z"
     */
    date: string;

    /**
     * The copyright information for the database.
     * Example: "Copyright (c) 1991-2005 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation reference for the database.
     * Example: "For documentation, see UCD.html"
     */
    documentation: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v4.1.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database.
 * Each property has an abbreviated name, a long name, and may have additional aliases.
 */
export interface PropertyAliases {
    /**
     * Abbreviated name for the property.
     * Example: "AL"
     */
    abbreviated_name: string;

    /**
     * Long name for the property.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property, if any.
     * Example: ["Arabic_Letter", "AL"]
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "abbreviated_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v4.1.0/PropertyValueAliases.txt
/**
 * This interface defines the property value aliases used in the Unicode Character Database (UCD).
 * Each property value name is associated with a specific property and may have multiple aliases.
 *
 * The properties include:
 * - property: The property for which the value name is used.
 * - abbreviated_name: An abbreviated name for the property value, or 'n/a' if not available.
 * - long_name: A long descriptive name for the property value.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * Example of usage:
 * const example: PropertyValueAliases = {
 *   property: 'Bidi_Class',
 *   abbreviated_name: 'AL',
 *   long_name: 'Arabic Letter'
 * };
 */
export interface PropertyValueAliases {
  property: string;
  abbreviated_name: "n/a" | string;
  long_name: string;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name"
];
//#endregion

//#region data-files/v4.1.0/Scripts.txt
/**
 * Unicode Character Database
 */
export interface Scripts {
    /**
     * The date of the database entry in ISO 8601 format.
     * Example: "2005-03-10T01:56:19Z"
     */
    date: string;

    /**
     * The version of the Unicode Character Database.
     * Example: "4.1.0"
     */
    version: string;

    /**
     * Copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2005 Unicode, Inc."
     */
    copyright: string;

    /**
     * URL for the terms of use for the Unicode Character Database.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * URL for the documentation of the Unicode Character Database.
     * Example: "UCD.html"
     */
    documentation: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v4.1.0/SpecialCasing.txt
/**
 * Interface representing the special casing properties of Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The lowercase mapping of the character in hexadecimal format.
     * Example: "0061" for 'a'.
     */
    lower: string;

    /**
     * The titlecase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    title: string;

    /**
     * The uppercase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    upper: string;

    /**
     * Optional list of conditions that override normal behavior.
     * Example: "en_US Not_uppercase".
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the entry.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v4.1.0/StandardizedVariants.txt
/**
 * Specification of the variant sequences that are defined in the Unicode Standard.
 * This interface represents the variation sequences, their descriptions, and any specific shaping environments.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: U+FE00
   */
  variation_sequence: string;
  
  /**
   * The description of the desired appearance.
   * Example: "Narrow No-Break Space"
   */
  description: string;
  
  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Arabic"
   */
  shaping_environment: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environment"
];
//#endregion

//#region data-files/v4.1.0/Unihan.txt
/**
 * Interface representing the configuration for a user profile.
 */
export interface UserProfile {
    /**
     * The unique identifier for the user.
     * Must be a string of 36 characters (UUID format).
     * Example: "123e4567-e89b-12d3-a456-426614174000"
     */
    user_id: string;

    /**
     * The user's full name.
     * Must be a string with a minimum length of 1 character.
     * Example: "John Doe"
     */
    full_name: string;

    /**
     * The user's email address.
     * Must be a valid email format.
     * Example: "user@example.com"
     */
    email: string;

    /**
     * The user's age.
     * Must be a number between 0 and 120.
     * Example: 30
     */
    age: number;

    /**
     * The user's subscription status.
     * Can be either "active" or "inactive".
     */
    subscription_status: "active" | "inactive";
}

export const USER_PROFILE_FIELDS = [
    "user_id",
    "full_name",
    "email",
    "age",
    "subscription_status"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from DerivedBidiClass-4.1.0.txt.
 */
export interface DerivedBidiClass {
    /**
     * The character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The derived bidirectional class of the character.
     * Example: "L" for Left-to-Right characters.
     */
    derived_bidi_class: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B" | "S" | "WS" | "ON";

    /**
     * The character itself represented as a string.
     * Example: "A" for the character 'A'.
     */
    character: string;

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1 for the character '1'.
     */
    numeric_value?: number;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "code_point",
    "derived_bidi_class",
    "character",
    "numeric_value"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;

    /**
     * The value of the property.
     * Example: "true" or "false"
     */
    property_value: "true" | "false";

    /**
     * The description of the property.
     * Example: "Indicates whether the character is a control character in bidirectional text."
     */
    description: string;

    /**
     * The version of Unicode in which the property was introduced.
     * Example: "1.1"
     */
    introduced_in: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "description",
    "introduced_in"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The derived combining class value.
     * Must be a string representing a combining class, e.g., "0", "1", "2".
     */
    derived_combining_class: string;

    /**
     * The date of the entry in the database.
     * Format: YYYY-MM-DD, e.g., "2005-03-26".
     */
    date: string;

    /**
     * The copyright information for the database.
     * Must be a string containing copyright details.
     */
    copyright: string;

    /**
     * The terms of use for the database.
     * Must be a string containing the URL to the terms of use.
     */
    terms_of_use: string;

    /**
     * The documentation reference for the database.
     * Must be a string containing the URL to the documentation.
     */
    documentation: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "derived_combining_class",
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the Unicode Character Database derived decomposition type.
 */
export interface DerivedDecompositionType {
    /**
     * The character that this decomposition represents.
     * Example: 'A'
     */
    character: string;

    /**
     * The decomposition mapping for the character.
     * Example: 'A' -> 'A' + 'B'
     */
    decomposition: string;

    /**
     * The type of decomposition.
     * Example: 'canonical' or 'compat'
     */
    type: "canonical" | "compat";

    /**
     * The Unicode version in which this decomposition was introduced.
     * Example: '1.1'
     */
    version: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition",
    "type",
    "version"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The derived East Asian width value for the character.
     * Possible values: "N", "A", "H", "W", "F", "Na".
     */
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the derived general category from the Unicode Character Database.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode code point of the character.
     * Example: 65 for 'A'.
     */
    code_point: number;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "code_point",
    "character_name"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The name of the derived joining group.
     * Example: "Left"
     */
    derived_joining_group_name: string;
    
    /**
     * The code point of the character.
     * Example: "U+0041"
     */
    code_point: string;
    
    /**
     * The joining type of the character.
     * Example: "D" for Dual, "L" for Left, etc.
     */
    joining_type: "D" | "L" | "R" | "T" | "U";
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "derived_joining_group_name",
    "code_point",
    "joining_type"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining type.
 */
export interface DerivedJoiningType {
    /**
     * The joining type for a character, which can be one of the following:
     * - "U" (Unicode)
     * - "C" (Common)
     * - "D" (Dual)
     * - "A" (Arabic)
     * - "N" (None)
     * Example: "U"
     */
    joining_type: "U" | "C" | "D" | "A" | "N";

    /**
     * The character code point in hexadecimal format.
     * Example: "0x0041" for 'A'
     */
    code_point: string;

    /**
     * The character name as defined in the Unicode standard.
     * Example: "LATIN CAPITAL LETTER A"
     */
    character_name: string;

    /**
     * The script associated with the character.
     * Example: "Latin"
     */
    script: string;

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1.0
     */
    numeric_value?: number;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character_name",
    "script",
    "numeric_value"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date and time when the data was generated, in GMT format.
     * Example: "2005-02-26T02:37:28Z"
     */
    date: string;
    
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2005 Unicode, Inc."
     */
    copyright: string;
    
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    
    /**
     * The documentation reference for the Unicode Character Database.
     * Example: "UCD.html"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: 1.0, 2.5
     */
    numeric_value: number;
    /**
     * The type of the numeric value.
     * Example: "integer", "decimal"
     */
    numeric_type: "integer" | "decimal";
    /**
     * The source of the numeric value.
     * Example: "Unicode", "Custom"
     */
    source: "Unicode" | "Custom";
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source"
];
//#endregion

//#region data-files/v4.1.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value associated with a character.
     * Example: "1.0"
     */
    numeric_value: "string";
    
    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    numeric_type: "string";
    
    /**
     * The character associated with the numeric value.
     * Example: "A"
     */
    character: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character"
];
//#endregion

//#region data-files/v4.1.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character that defines the grapheme break property.
     * Example: "L" for letters, "P" for punctuation.
     */
    character: "L" | "P" | "S" | "Z";

    /**
     * The description of the grapheme break property.
     * Example: "Line Break" for characters that can break a line.
     */
    description: string;

    /**
     * The Unicode code point of the character.
     * Example: 0x0041 for 'A'.
     */
    code_point: number;

    /**
     * The category of the grapheme break property.
     * Example: "Other" for characters that do not fit into other categories.
     */
    category: "Other" | "Control" | "Extend" | "Regional_Indicator";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "description",
    "code_point",
    "category"
];
//#endregion

//#region data-files/v4.1.0/auxiliary/GraphemeBreakTest.txt
/**
 * Default Grapheme Break Test
 *
 * Format:
 * <string> (# <comment>)?
 * <string> contains hex Unicode code points, with
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v4.1.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties related to sentence breaking.
 */
export interface SentenceBreakProperty {
    /**
     * The character that indicates a sentence break.
     * Example: '.'
     */
    sentence_break_character: string;

    /**
     * The type of sentence break.
     * Example: "period", "question", "exclamation"
     */
    sentence_break_type: "period" | "question" | "exclamation";

    /**
     * Indicates whether the sentence break is mandatory.
     * Example: true or false
     */
    is_mandatory: boolean;

    /**
     * The language code for the sentence break rules.
     * Example: "en", "fr"
     */
    language_code: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "sentence_break_character",
    "sentence_break_type",
    "is_mandatory",
    "language_code"
];
//#endregion

//#region data-files/v4.1.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * The date and time when the test was created, in GMT format.
     * Example: "2005-03-27, 16:59:16 GMT"
     */
    date: string;

    /**
     * The Unicode character database copyright information.
     * Example: "Copyright (c) 1991-2005 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode character database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation reference for the Unicode character database.
     * Example: "For documentation, see UCD.html"
     */
    documentation: string;

    /**
     * The format specification for the sentence break test.
     * Example: "<string> (# <comment>)?"
     */
    format: string;

    /**
     * Description of the string format containing hex Unicode code points.
     */
    string_description: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation",
    "format",
    "string_description"
];
//#endregion

//#region data-files/v4.1.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty.
 */
export interface WordBreakProperty {
    /**
     * The value "normal" indicates that the text should be broken according to the default rules.
     * @example "normal"
     */
    normal?: "normal";

    /**
     * The value "break-all" indicates that the text can be broken at any character.
     * @example "break-all"
     */
    break_all?: "break-all";

    /**
     * The value "keep-all" indicates that the text should not be broken except at allowed break points.
     * @example "keep-all"
     */
    keep_all?: "keep-all";

    /**
     * The value "break-word" indicates that the text should be broken at the end of the line if it does not fit.
     * @example "break-word"
     */
    break_word?: "break-word";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "normal",
    "break_all",
    "keep_all",
    "break_word"
];
//#endregion

//#region data-files/v4.1.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the Word Break Test data.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

