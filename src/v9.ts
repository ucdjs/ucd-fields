// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 9

//#region data-files/v9.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for ArabicShaping data, including code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point, in 4-digit hexadecimal form, of an Arabic, Syriac, N'Ko, Mandaic, Mongolian, Phags-pa, Manichaean, Psalter Pahlavi, or other character.
     * Example: "0629"
     */
    code_point: string;

    /**
     * A short schematic name for that character, descriptive of the shape.
     * Example: "TEH MARBUTA"
     */
    schematic_name: string;

    /**
     * Defines the joining type, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: "R"
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * Defines the joining group, based schematically on character names, with parts joined by underscores.
     * Example: "TEH_MARBUTA"
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v9.0.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+298D"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+298D" or "<none>"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, one of the following: "o" for Open, "c" for Close, or "n" for None.
     * Example: "o" for Open, "c" for Close, "n" for None
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v9.0.0/BidiCharacterTest.txt
/**
 * BidiCharacterTest interface represents a conformance test for implementations of the Unicode Bidirectional Algorithm.
 */
export interface BidiCharacterTest {
    /**
     * A sequence of hexadecimal code point values separated by space.
     * Example: "0041 0062 0631"
     */
    code_point_sequence: string;

    /**
     * A value representing the paragraph direction:
     * - 0 represents left-to-right
     * - 1 represents right-to-left
     * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm
     * Example: 0
     */
    paragraph_direction: "0" | "1" | "2";

    /**
     * The resolved paragraph embedding level.
     * Example: 0
     */
    resolved_paragraph_embedding_level: number;

    /**
     * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
     * Example: "0 1 x 2"
     */
    resolved_levels: string;

    /**
     * A list of indices showing the resulting visual ordering from left to right; characters with a resolved level of 'x' are skipped.
     * Example: "0 1 3"
     */
    visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
    "code_point_sequence",
    "paragraph_direction",
    "resolved_paragraph_embedding_level",
    "resolved_levels",
    "visual_ordering_indices"
];
//#endregion

//#region data-files/v9.0.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph property mappings in the Unicode Character Database.
 */
export interface BidiMirroring {
    /**
     * The code point of the original character represented as a hexadecimal value.
     * Example: '0041' for 'A'.
     */
    original_code_point: string;

    /**
     * The code point of the mirrored character represented as a hexadecimal value.
     * Example: '0061' for 'a' as a mirror image of 'A'.
     */
    mirrored_code_point: string;

    /**
     * A comment indicating if the mirroring is a "BEST FIT".
     * Example: "BEST FIT".
     */
    comment?: "BEST FIT";
}

export const BIDI_MIRRORING_FIELDS = [
    "original_code_point",
    "mirrored_code_point",
    "comment"
];
//#endregion

//#region data-files/v9.0.0/BidiTest.txt
/**
 * This interface represents the structure of the BidiTest-9.0.0 data.
 */
export interface BidiTest {
    /**
     * An ordered space-delimited list of numbers indicating the resulting levels
     * for each input property value. The UBA does not assign levels to certain values;
     * those are indicated with an x. Example: `@Levels: 1 0` or `@Levels: x 1 x 2`
     */
    levels: string;

    /**
     * An ordered space-delimited list of numbers indicating the resulting
     * visual ordering from left to right. The numbers are zero-based, and
     * are indexes into the input string. Items with a level of x are skipped.
     * Example: `@Reorder: 1 0` or `@Reorder: 3 1`
     */
    reorder: string;

    /**
     * An ordered list of BIDI property values.
     */
    input: string;

    /**
     * A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL.
     * Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
     * Example: `L LRE R R; 7` or `L LRE R AL; 7`
     */
    bitset: string;
}

export const BIDI_TEST_FIELDS = [
    "levels",
    "reorder",
    "input",
    "bitset"
];
//#endregion

//#region data-files/v9.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041)
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A)
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v9.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}'?.
     * Example: "1", "2'"
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: "人"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v9.0.0/CaseFolding.txt
/**
 * Interface representing the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The status of the case folding mapping, which can be one of the following:
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters where different from F.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: "C" for common mappings.
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: "0061" for 'a' or "0061 0301" for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: "LATIN CAPITAL LETTER A" for 'A'.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v9.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusions defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2016-01-21, 22:00:00 GMT"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_url: string;

    /**
     * A description of the file's purpose.
     * Example: "This file lists the characters for the Composition Exclusion Table."
     */
    description: string;

    /**
     * The URL for more information on the composition exclusions.
     * Example: "http://www.unicode.org/unicode/reports/tr15/#Primary_Exclusion_List_Table"
     */
    more_information_url: string;

    /**
     * A description of the derivation of composition exclusions.
     * Example: "For a full derivation of composition exclusions, see the derived property Full_Composition_Exclusion in DerivedNormalizationProps.txt"
     */
    derivation_description: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "unicode_character_database_url",
    "description",
    "more_information_url",
    "derivation_description"
];
//#endregion

//#region data-files/v9.0.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
  /**
   * The date when the code point was first assigned in Unicode.
   * Format: YYYY-MM-DD, HH:MM:SS GMT
   * Example: "2016-03-02, 18:54:54 GMT"
   */
  date: string;

  /**
   * The version of Unicode when the code point was assigned.
   * Format: Major.Minor.Patch
   * Example: "9.0.0"
   */
  version: string;

  /**
   * The type of the code point assigned.
   * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
   */
  code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

  /**
   * Indicates whether the code point is a noncharacter.
   * Format: boolean
   * Example: true or false
   */
  is_noncharacter: boolean;
}

export const DERIVED_AGE_FIELDS = [
  "date",
  "version",
  "code_point_type",
  "is_noncharacter"
];
//#endregion

//#region data-files/v9.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties defined in the DerivedCoreProperties Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode version of the properties.
     * Format: "X.Y.Z" where X, Y, and Z are integers.
     */
    unicode_version: string;

    /**
     * The date when the properties were last updated.
     * Format: YYYY-MM-DD.
     */
    date: string;

    /**
     * The copyright information for the properties.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "unicode_version",
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties for DerivedNormalization.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility decomposition.
     * Example: true
     */
    compatibility_decomposition: boolean;

    /**
     * The input string to be normalized.
     * Example: "some text"
     */
    input_string: string;

    /**
     * The output string after normalization.
     * Example: "normalized text"
     */
    output_string: string;

    /**
     * An optional flag to indicate if the normalization should be strict.
     * Example: false
     */
    strict: boolean;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "compatibility_decomposition",
    "input_string",
    "output_string",
    "strict"
];
//#endregion

//#region data-files/v9.0.0/EastAsianWidth.txt
/**
 * East_Asian_Width Property
 *
 * This interface represents the East Asian Width property as defined in the Unicode Character Database.
 *
 * The format consists of two fields:
 * - Field 0: Unicode code point value or range of code point values
 * - Field 1: East_Asian_Width property, which can be one of the following values:
 *   - "A": Ambiguous
 *   - "F": Full-width
 *   - "H": Half-width
 *   - "N": Neutral
 *   - "Na": Narrow
 *   - "W": Wide
 *
 * All code points not explicitly listed are given the value "N".
 * Unassigned code points in specific blocks default to "W".
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * For more information, see UAX #11: East Asian Width.
 */
export interface EastAsianWidth {
  /**
   * Unicode code point value or range of code point values.
   */
  unicode_code_point: string;

  /**
   * East Asian Width property value.
   *
   * Possible values:
   * - "A": Ambiguous
   * - "F": Full-width
   * - "H": Half-width
   * - "N": Neutral
   * - "Na": Narrow
   * - "W": Wide
   */
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "unicode_code_point",
  "east_asian_width"
];
//#endregion

//#region data-files/v9.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
  /**
   * Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * DoCoMo Shift-JIS code, if available.
   * Example: "0xE63A"
   */
  docomo_shift_jis_code?: string;
  /**
   * KDDI Shift-JIS code, if available.
   * Example: "0xE63B"
   */
  kddi_shift_jis_code?: string;
  /**
   * SoftBank Shift-JIS code, if available.
   * Example: "0xE63C"
   */
  softbank_shift_jis_code?: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v9.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "HANGUL_SYLLABLE_TYPE_CODE"
     * Example: "L"
     */
    hangul_syllable_type_code: "L" | "V" | "LV" | "LVT";

    /**
     * The description of the Hangul syllable type.
     * Format: string
     * Example: "Consonant"
     */
    description: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "hangul_syllable_type_code",
    "description"
];
//#endregion

//#region data-files/v9.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property aimed at the specification of syllabic structure for Indic scripts.
 *
 * The property is designed primarily to supplement the Indic_Syllabic_Category property.
 *
 * Note that this property is not intended as a prescriptive property regarding display or font design.
 *
 * The following characters are all assigned the positional category "Right", but may have different positions in some cases:
 * - U+0BC1 TAMIL VOWEL SIGN U and U+0BC2 TAMIL VOWEL SIGN UU have contextually variable placement in Tamil.
 * - U+0D41 MALAYALAM VOWEL SIGN U and U+0D42 MALAYALAM VOWEL SIGN UU form complex ligatures with consonants in older Malayalam orthography.
 * - U+11341 GRANTHA VOWEL SIGN U and U+11342 GRANTHA VOWEL SIGN UU have contextually variable placement in Grantha.
 */
export interface IndicPositionalCategory {
    /**
     * Unicode code point value or range of code point values.
     */
    unicode_code_point: string;

    /**
     * Indic_Positional_Category property value.
     * Possible values include "Left", "Right", "Top", "Bottom", etc.
     */
    indic_positional_category: "Left" | "Right" | "Top" | "Bottom";

    /**
     * General_Category property value, Unicode character name or names, and code point count in square brackets for ranges.
     */
    comment: string;
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_positional_category",
    "comment"
];
//#endregion

//#region data-files/v9.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The properties are as follows:
 *
 * - `unicode_code_point`: A string representing the Unicode code point value or range of code point values. Example: "U+0900" or "U+0900-U+090F".
 * - `indic_syllabic_category`: A string representing the Indic Syllabic Category property value. Example: "Vowel", "Consonant", etc.
 *
 * The comments following the `indic_syllabic_category` provide additional information such as the General_Category property value, Unicode character name(s), and code point count.
 */
export interface IndicSyllabicCategory {
    unicode_code_point: string;
    indic_syllabic_category: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category"
];
//#endregion

//#region data-files/v9.0.0/Jamo.txt
/**
 * This interface defines the Jamo_Short_Name property.
 * Each entry corresponds to a conjoining jamo character that participates in the algorithmic determination of Hangul syllable character names.
 *
 * @property {"string"} code_point - The code point of a conjoining jamo character in 4-digit hexadecimal form (e.g., "1100").
 * @property {"string"} jamo_short_name - The Jamo_Short_Name as a one-, two-, or three-character ASCII string (e.g., "ᄀ", "ᄁ").
 */
export interface Jamo {
    "code_point": string;
    "jamo_short_name": string;
}

export const JAMO_FIELDS = ["code_point", "jamo_short_name"];
//#endregion

//#region data-files/v9.0.0/LineBreak.txt
/**
 * Line_Break Property
 *
 * This interface represents the line break properties of Unicode characters.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0041 or U+0041..U+005A
     */
    code_point: string;

    /**
     * Line_Break property, which can be one of the following:
     * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
     * - Tailorable: "AI", "AL", "B2", "BA", "BB", "CB", "CJ", "CL", "CP", "EB",
     *   "EM", "EX", "H2", "H3", "HL", "HY", "ID", "IN", "IS", "JL",
     *   "JT", "JV", "NS", "NU", "OP", "PO", "PR", "QU", "RI", "SA",
     *   "SG", "SY", "XX"
     *
     * All code points not explicitly listed are given the value "XX".
     * Unassigned code points in specific blocks default to "ID" or "PR".
     */
    line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                       "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | 
                       "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | 
                       "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | 
                       "SG" | "SY" | "XX";
}

export const LINE_BREAK_FIELDS = [
    "code_point",
    "line_break_property"
] as const;
//#endregion

//#region data-files/v9.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented as a hexadecimal string.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a formal name or an alternate name.
   * Example: "LATIN CAPITAL LETTER A".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", or "abbreviation".
   * Comparisons of type labels should ignore case.
   * Example: "control".
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v9.0.0/NamedSequences.txt
/**
 * Unicode Named Character Sequences
 *
 * This interface represents the named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v9.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v9.0.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041").
     */
    unicode_code_point: string;
    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;
    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;
    /**
     * Version of Unicode for which the correction was entered, in n.n.n format (e.g., "9.0.0").
     */
    unicode_version: string;
    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v9.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points.
     * Example: "U+0041; U+00C1"
     */
    source: string;

    /**
     * The NFC normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfc: string;

    /**
     * The NFD normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfd: string;

    /**
     * The NFKC normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfkc: string;

    /**
     * The NFKD normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v9.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date when the data was generated in GMT format.
     * Example: "2016-06-01T10:34:30Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/PropertyAliases.txt
/**
 * This interface defines the aliases for properties used in the Unicode Character Database (UCD).
 * The aliases can be used for XML formats of UCD data, regular-expression property tests, and other programmatic textual descriptions of Unicode data.
 *
 * Each property has an abbreviated name and a long name, with additional aliases available.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyAliases {
  /**
   * Abbreviated name for the property.
   * Example: "AL"
   */
  abbreviated_name: string;

  /**
   * Long name for the property.
   * Example: "Arabic Letter"
   */
  long_name: string;

  /**
   * Additional aliases for the property, if any.
   * Example: "Arabic Letter, AL"
   */
  additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v9.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database (UCD).
 *
 * Each property value name consists of the following fields:
 * - property: The property for which the property value name is used.
 * - abbreviated_name: An abbreviated name for the property value.
 * - long_name: A long descriptive name for the property value.
 *
 * In the case of ccc (Canonical Combining Class), there are four fields:
 * - property: The property for which the property value name is used.
 * - numeric: A numeric representation of the combining class.
 * - abbreviated_name: An abbreviated name for the combining class.
 * - long_name: A long descriptive name for the combining class.
 *
 * Note that property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * For example:
 * - AL means Arabic Letter for the Bidi_Class property.
 * - AL means Above_Left for the Canonical_Combining_Class property.
 * - AL means Alphabetic for the Line_Break property.
 *
 * The combination of property value and property name is unique.
 */
export interface PropertyValueAliases {
  property: string;
  abbreviated_name: string;
  long_name: string;
  numeric?: number;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name",
  "numeric"
];
//#endregion

//#region data-files/v9.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the mapping of script extensions to their associated code points.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values that indicate the scripts commonly used with the characters.
     * Example: "Latin", "Cyrillic"
     */
    script_extensions: "string"[];

    /**
     * A list of code points associated with the script extensions, listed in code point order.
     * Example: "U+0041" for the character 'A'
     */
    code_points: string[];
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_extensions",
    "code_points"
];
//#endregion

//#region data-files/v9.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2016-06-01T10:34:37Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * The URL for more information about the Unicode Script Property.
     * Example: "http://www.unicode.org/reports/tr24/"
     */
    script_property_url: string;

    /**
     * The URL for the assignment of script values.
     * Example: "http://www.unicode.org/reports/tr24/#Assignment_Script_Values"
     */
    assignment_script_values_url: string;

    /**
     * The URL for the assignment of scriptX values.
     * Example: "http://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values"
     */
    assignment_scriptx_values_url: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "script_property_url",
    "assignment_script_values_url",
    "assignment_scriptx_values_url"
];
//#endregion

//#region data-files/v9.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed in hexadecimal format.
     * Example: '0061' for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A' in titlecase context
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A'
     */
    upper: string;

    /**
     * A list of conditions that override the normal casing behavior, if all are true.
     * Example: 'en' for English, 'Not_fr' for not French
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v9.0.0/StandardizedVariants.txt
/**
 * Specification of the variation sequences that are defined in the Unicode Standard.
 * 
 * This interface represents standardized variation sequences, which include the variation sequence itself,
 * a description of the desired appearance, and any specific shaping environments where the appearance may differ.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * 
   * This field contains the sequence of characters that represent the variation.
   * Example: "U+1234 U+FE00"
   */
  variation_sequence: string;
  
  /**
   * The description of the desired appearance.
   * 
   * This field provides a textual description of how the character should appear.
   * Example: "Bold variant"
   */
  description: string;
  
  /**
   * Specific shaping environments where the appearance is only different.
   * 
   * This field indicates the contexts in which the appearance may vary.
   * Example: "Context A"
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v9.0.0/TangutSources.txt
/**
 * This file is a normative contributory data file in the Unicode Character Database.
 *
 * @property {string} file_name - The name of the file, e.g., "TangutSources-9.0.0.txt".
 * @property {string} date - The date of the file creation, e.g., "2016-03-21, 23:40:00 GMT".
 * @property {string} copyright - The copyright information, e.g., "© 2016 Unicode®, Inc.".
 * @property {string} trademarks - Information about trademarks, e.g., "Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries."
 * @property {string} terms_of_use - URL for terms of use, e.g., "http://www.unicode.org/terms_of_use.html".
 * @property {string} documentation - URL for documentation, e.g., "http://www.unicode.org/reports/tr44/".
 */
export interface TangutSources {
  file_name: string;
  date: string;
  copyright: string;
  trademarks: string;
  terms_of_use: string;
  documentation: string;
}

export const TANGUT_SOURCES_FIELDS = [
  "file_name",
  "date",
  "copyright",
  "trademarks",
  "terms_of_use",
  "documentation"
];
//#endregion

//#region data-files/v9.0.0/USourceData.txt
/**
 * Interface representing the U-source ideographs data.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "C": Included in Extension C
     * - "D": Included in Extension D
     * - "E": Included in Extension E
     * - "F": Submitted for Extension F
     * - "H": Submitted by the UTC for IRG Working Set 2015
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded
     * - "UNC-2013": Included in the UTC's 2013 "Urgently Needed Characters" proposal
     * - "UNC-2015": Included in the UTC's 2015 "Urgently Needed Characters" proposal
     * - "UK-2015": Submitted by the UK for IRG Working Set 2015
     * - "V": Variant of an encoded character
     * - "W": Not to encode
     * - "X": No action taken
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: "C" | "D" | "E" | "F" | "H" | "N" | "U" | "UNC-2013" | "UNC-2015" | "UK-2015" | "V" | "W" | "X" | `"(UTC-\d{5})|(UCI-\d{5})`;

    /**
     * A Unicode code point. If the status is "V", this specifies the encoded character for which this entry is a variant.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s) of the ideograph.
     */
    sources: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the file DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The date of the file creation in ISO 8601 format.
     * Example: "2016-06-01T10:34:22Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties as defined in the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;

    /**
     * The value of the property.
     * Example: "True" or "False"
     */
    property_value: "True" | "False";

    /**
     * A description of the property.
     * Example: "Indicates whether the character is a bidirectional control character."
     */
    description: string;

    /**
     * The version of Unicode in which the property was introduced.
     * Example: "6.0"
     */
    introduced_in: string;

    /**
     * The status of the property.
     * Example: "Current" or "Deprecated"
     */
    status: "Current" | "Deprecated";
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "description",
    "introduced_in",
    "status"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the DerivedCombiningClass.
 */
export interface DerivedCombiningClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2016-06-01T10:34:23Z"
     */
    date: string;
    /**
     * The copyright information for the document.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The character that is decomposed.
     * Example: 'A'
     */
    character: string;

    /**
     * The decomposition mapping for the character.
     * Example: 'A' -> 'A, ̱'
     */
    decomposition: string;

    /**
     * The type of decomposition.
     * Example: "canonical" or "compat"
     */
    type: "canonical" | "compat";

    /**
     * The source of the decomposition data.
     * Example: "Unicode Character Database"
     */
    source: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition",
    "type",
    "source"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The Unicode character.
     * Format: U+XXXX, where XXXX is a hexadecimal value.
     */
    character: string;

    /**
     * The East Asian Width property of the character.
     * Possible values: "F", "H", "N", "Na", "W", "A".
     */
    east_asian_width: "F" | "H" | "N" | "Na" | "W" | "A";

    /**
     * The code point of the character.
     * Format: U+XXXX, where XXXX is a hexadecimal value.
     */
    code_point: string;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A".
     */
    name: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width",
    "code_point",
    "name"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character, represented as a string.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1 for a character that is a digit.
     */
    numeric_value?: number;

    /**
     * The name of the character in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The code point of the character, represented as a hexadecimal string.
     * Example: "0041" for 'A'.
     */
    code_point: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "numeric_value",
    "character_name",
    "code_point"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The name of the derived joining group.
     * Example: "D" for the derived joining group D.
     */
    derived_joining_group_name: string;

    /**
     * The date when the derived joining group was created or modified.
     * Format: YYYY-MM-DD
     * Example: "2016-03-02"
     */
    date: string;

    /**
     * The copyright information for the derived joining group.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use related to the derived joining group.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "derived_joining_group_name",
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining type.
 */
export interface DerivedJoiningType {
    /**
     * The character's joining type, which can be one of the following: "U", "L", "R", "D", "C", "T", "A", "E", "B", "S", "N".
     * Example: "L"
     */
    joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "A" | "E" | "B" | "S" | "N";

    /**
     * The character's code point in hexadecimal format.
     * Example: "0041" for the character 'A'
     */
    code_point: string;

    /**
     * The character's name as defined in the Unicode Character Database.
     * Example: "LATIN CAPITAL LETTER A"
     */
    character_name: string;

    /**
     * The character's directionality, which can be one of the following: "L", "R", "AL", "EN", "AN", "ES", "CS", "B", "S", "WS", "ON".
     * Example: "L"
     */
    directionality: "L" | "R" | "AL" | "EN" | "AN" | "ES" | "CS" | "B" | "S" | "WS" | "ON";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character_name",
    "directionality"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in the format YYYY-MM-DD, HH:MM:SS GMT.
     * Example: "2016-06-01, 10:34:26 GMT"
     */
    date: string;

    /**
     * The copyright information, including the year and the owner.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use of the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, e.g., "2016-03-02"
     */
    date: string;
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v9.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as per Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character.
     * Example: "1.0"
     */
    numeric_value: "string";
    
    /**
     * The numeric type of the character.
     * Example: "decimal"
     */
    numeric_type: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character or character sequence.
     * Example: "a"
     */
    character: string;
    
    /**
     * The grapheme break property value for the character.
     * Example: "CR"
     */
    property: "CR" | "LF" | "Control" | "Extend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * Default Grapheme Break Test
 *
 * Format:
 * <string> (# <comment>)?
 * <string> contains hex Unicode code points, with
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/LineBreakTest.txt
/**
 * Interface representing the default line break test data.
 */
export interface LineBreakTest {
    /**
     * The string containing hex Unicode code points.
     * Example: "U+0041 U+0042 U+0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties of SentenceBreak.
 */
export interface SentenceBreakProperty {
    /**
     * The Unicode character property value for sentence break.
     * Example: "S" for sentence-ending punctuation.
     */
    property_value: "S" | "B" | "X";

    /**
     * The Unicode character code point.
     * Example: 0x0021 for '!'.
     */
    code_point: number;

    /**
     * The name of the character.
     * Example: "EXCLAMATION MARK" for '!'.
     */
    character_name: string;

    /**
     * The category of the character.
     * Example: "Punctuation" for '!'.
     */
    character_category: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "property_value",
    "code_point",
    "character_name",
    "character_category"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * The date and time when the test was created, in GMT format.
     * Example: "2016-06-02T18:28:30Z"
     */
    created_at: string;

    /**
     * The copyright information for the test data.
     * Example: "© 2016 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * The format description for the sentence break test data.
     * Example: "<string> (# <comment>)?"
     */
    format_description: string;

    /**
     * A description of the contents of the string, including hex Unicode code points.
     * Example: "<string> contains hex Unicode code points, with"
     */
    string_description: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "created_at",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "format_description",
    "string_description"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty data structure.
 */
export interface WordBreakProperty {
    /**
     * The Unicode character property value for word breaking.
     * Example: "word"
     */
    word_break: "word" | "break" | "keep";

    /**
     * The Unicode character property value for line breaking.
     * Example: "line"
     */
    line_break: "line" | "no-line";

    /**
     * The Unicode character property value for hyphenation.
     * Example: "hyphen"
     */
    hyphenation: "hyphen" | "no-hyphen";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break",
    "line_break",
    "hyphenation"
];
//#endregion

//#region data-files/v9.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the Word Break Test data.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points, with optional comments.
     * Example: "U+0041 U+0042 U+0043 (# Comment)"
     */
    string: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

