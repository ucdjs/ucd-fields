// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 16

//#region data-files/v16.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of a character, in hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for that character, descriptive of the shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * Defines the joining type of the character.
     * Possible values include:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * Defines the joining group of the character.
     * The value is based schematically on character names, joined by underscores.
     * Example: 'Teh_Marbuta'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v16.0.0/BidiBrackets.txt
/**
 * This interface represents the Bidi_Paired_Bracket and Bidi_Paired_Bracket_Type properties
 * as defined in the Unicode Character Database.
 */
export interface BidiBrackets {
  /**
   * Unicode code point value, represented as a hexadecimal value.
   * Example: "U+298D"
   */
  code_point: string;

  /**
   * Bidi_Paired_Bracket property value, a code point value or <none>.
   * Example: "U+298E" or "<none>"
   */
  bidi_paired_bracket: string;

  /**
   * Bidi_Paired_Bracket_Type property value, one of the following:
   *   - "o" for Open
   *   - "c" for Close
   *   - "n" for None
   * Example: "o"
   */
  bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
  "code_point",
  "bidi_paired_bracket",
  "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v16.0.0/BidiCharacterTest.txt
/**
 * BidiCharacterTest interface represents a conformance test for implementations of the
 * Unicode Bidirectional Algorithm, specified in UAX #9.
 */
export interface BidiCharacterTest {
    /**
     * A sequence of hexadecimal code point values separated by space.
     * Example: "0041 0062 0631"
     */
    code_point_sequence: string;
    
    /**
     * A value representing the paragraph direction:
     * - 0 represents left-to-right
     * - 1 represents right-to-left
     * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
     * Example: 0
     */
    paragraph_direction: "0" | "1" | "2";
    
    /**
     * The resolved paragraph embedding level.
     * Example: 0
     */
    resolved_paragraph_embedding_level: number;
    
    /**
     * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
     * Example: "0 1 x 2"
     */
    resolved_levels: string;
    
    /**
     * A list of indices showing the resulting visual ordering from left to right;
     * characters with a resolved level of 'x' are skipped.
     * Example: "0 1 3"
     */
    visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
    "code_point_sequence",
    "paragraph_direction",
    "resolved_paragraph_embedding_level",
    "resolved_levels",
    "visual_ordering_indices"
];
//#endregion

//#region data-files/v16.0.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mapping of Unicode characters that have the Bidi_Mirrored=Yes property.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value (4 to 6 digits).
     * Example: '0041' for 'A'.
     */
    source_code_point: string;

    /**
     * The mirrored code point represented as a hexadecimal value (4 to 6 digits).
     * Example: '0042' for 'B'.
     */
    mirrored_code_point: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source_code_point",
    "mirrored_code_point"
];
//#endregion

//#region data-files/v16.0.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test data.
 * It includes properties for levels, reordering, and data lines as specified in the Unicode Bidi Algorithm test cases.
 */
export interface BidiTest {
  /**
   * An ordered space-delimited list of numbers indicating the resulting levels
   * for each input property value. The UBA does not assign levels to certain values;
   * those are indicated with an 'x'.
   * 
   * Example:
   *   @Levels:    1 0
   *   @Levels:    x 1 x 2
   */
  levels: string;

  /**
   * An ordered space-delimited list of numbers indicating the resulting
   * visual ordering from left to right. The numbers are zero-based, and
   * are indexes into the input string. Items with a level of 'x' are skipped.
   * 
   * Example:
   *   @Reorder:    1 0
   *   @Reorder:    3 1
   */
  reorder: string;

  /**
   * The data lines that contain the actual test cases for the Bidi Algorithm.
   * Each line corresponds to a specific test case and follows the format defined
   * in the Unicode Bidi Algorithm documentation.
   */
  data: string;
}

export const BIDI_TEST_FIELDS = ["levels", "reorder", "data"];
//#endregion

//#region data-files/v16.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database block information.
 */
export interface Blocks {
    /**
     * The starting code point of the block, represented as a hexadecimal string.
     * Example: "0041"
     */
    start_code: string;

    /**
     * The ending code point of the block, represented as a hexadecimal string.
     * Example: "007A"
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v16.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}'{0,2}.
     * Example: '1', '10', '100', '2''
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character, which may be empty if not included in the Kangxi Radicals block or the CJK Radicals Supplement block.
     * Example: '氵' (for radical number 水)
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: '水' (for radical number 水)
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v16.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following:
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that may cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: "C" for common mappings.
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: "0061" for 'a' or "0061 0301" for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, typically its Unicode name.
     * Example: "LATIN CAPITAL LETTER A" for 'A'.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v16.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;
    
    /**
     * The name of the character associated with the code point.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "code_point",
    "character_name"
];
//#endregion

//#region data-files/v16.0.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
    /**
     * The Unicode code point assigned to a character, format, control, or private-use.
     * Example: U+0041 for 'A'
     */
    code_point: string;
    /**
     * The version of Unicode in which the code point was first assigned.
     * Example: "1.1"
     */
    version: string;
    /**
     * The type of the code point, which can be one of the following: "graphic", "format", "control", "private-use", "surrogate", "noncharacter".
     */
    type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";
}

export const DERIVED_AGE_FIELDS = [
    "code_point",
    "version",
    "type"
];
//#endregion

//#region data-files/v16.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties defined in the DerivedCoreProperties Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode version of the character properties.
     * Format: "X.Y" where X and Y are integers (e.g., "16.0").
     */
    unicode_version: string;

    /**
     * The date when the properties were last updated.
     * Format: ISO 8601 date string (e.g., "2024-05-31T18:09:32Z").
     */
    last_updated: string;

    /**
     * The copyright information for the Unicode data.
     * Format: String containing copyright details.
     */
    copyright: string;

    /**
     * The URL for the terms of use and license.
     * Format: Valid URL string (e.g., "https://www.unicode.org/terms_of_use.html").
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Format: Valid URL string (e.g., "https://www.unicode.org/reports/tr44/").
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "unicode_version",
    "last_updated",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v16.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalizationProps.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility normalization.
     * Example: true
     */
    compatibility: boolean;

    /**
     * The version of the normalization algorithm to use.
     * Example: "1.0"
     */
    version: string;

    /**
     * An optional description of the normalization process.
     * Example: "This normalization process is used for..."
     */
    description?: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "compatibility",
    "version",
    "description"
];
//#endregion

//#region data-files/v16.0.0/DoNotEmit.txt
/**
 * This interface represents the Do Not Emit sequences in the Unicode Character Database.
 */
export interface DoNotEmit {
    /**
     * A sequence of Unicode code point values.
     */
    unicode_sequence: string;

    /**
     * A replacement sequence of Unicode code point values.
     */
    replacement_sequence: string;

    /**
     * The type of the original character sequence. This can be one of the following:
     * - "Indic_Atomic_Consonant": Sequences that look like an Indic consonant but should be avoided in representing that consonant.
     * - "Indic_Consonant_Conjunct": Sequences that look like an Indic conjunct but should be avoided in representing that conjunct.
     * - "Indic_Vowel_Letter": Sequences that look like an Indic vowel letter but should be avoided in representing that vowel letter.
     * - "Bengali_Khanda_Ta": Legacy representation of Bengali khanda ta prior to Unicode Version 4.1.
     * - "Malayalam_Chillu": Legacy representation of Malayalam chillus prior to Unicode Version 5.1.
     * - "Tamil_Shrii": Legacy representation of Tamil ligature shri prior to Unicode Version 4.1.
     * - "Dotless_Form": Dotless forms of lowercase Latin i and j followed by a combining dot above.
     * - "Hamza_Form": Sequences containing Arabic hamza above, which should be avoided.
     * - "Precomposed_Form": Sequences for which a precomposed form exists, but without canonical equivalence.
     * - "Deprecated": Characters that are identified in the Unicode Standard as deprecated for which a replacement sequence exists.
     * - "Discouraged": Miscellaneous characters and sequences discouraged in the Unicode Standard.
     * - "Preferred_Spelling": Miscellaneous characters and sequences for which the Unicode Standard specifies a preferred spelling.
     */
    do_not_emit_type: "Indic_Atomic_Consonant" | "Indic_Consonant_Conjunct" | "Indic_Vowel_Letter" | "Bengali_Khanda_Ta" | "Malayalam_Chillu" | "Tamil_Shrii" | "Dotless_Form" | "Hamza_Form" | "Precomposed_Form" | "Deprecated" | "Discouraged" | "Preferred_Spelling";

    /**
     * An optional human-readable comment field.
     */
    comment?: string;
}

export const DO_NOT_EMIT_FIELDS = [
    "unicode_sequence",
    "replacement_sequence",
    "do_not_emit_type",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/EastAsianWidth.txt
/**
 * East_Asian_Width Property
 *
 * This interface represents the East Asian Width property as defined in the Unicode Character Database.
 *
 * The East Asian Width property consists of the following values:
 * - "A": Ambiguous
 * - "F": Full-width
 * - "H": Half-width
 * - "N": Neutral
 * - "Na": Narrow
 * - "W": Wide
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 * The unassigned code points in specific blocks default to "W". For example:
 * - CJK Unified Ideographs Extension A: U+3400..U+4DBF
 * - CJK Unified Ideographs: U+4E00..U+9FFF
 * - CJK Compatibility Ideographs: U+F900..U+FAFF
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 */
export interface EastAsianWidth {
  code_point: string;
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "code_point",
  "east_asian_width"
];
//#endregion

//#region data-files/v16.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
  /**
   * Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * DoCoMo Shift-JIS code.
   * Example: "0xE63A"
   */
  docomo_shift_jis_code: string;
  /**
   * KDDI Shift-JIS code.
   * Example: "0xE63B"
   */
  kddi_shift_jis_code: string;
  /**
   * SoftBank Shift-JIS code.
   * Example: "0xE63C"
   */
  softbank_shift_jis_code: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v16.0.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and its corresponding unified ideograph.
 */
export interface EquivalentUnifiedIdeograph {
  /**
   * A code point or code point range represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: "4E00" or "4E00-4E0F"
   */
  source: string;

  /**
   * A code point represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: "4E01"
   */
  target: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "source",
  "target"
];
//#endregion

//#region data-files/v16.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "HANGUL_SYLLABLE_TYPE_CODE"
     * Example: "L"
     */
    hangul_syllable_type_code: "L" | "V" | "LV" | "LVT";

    /**
     * Description of the syllable type.
     * Format: "DESCRIPTION"
     * Example: "Consonant"
     */
    description: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "hangul_syllable_type_code",
    "description"
];
//#endregion

//#region data-files/v16.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property, which is aimed at the specification of syllabic structure for Indic scripts.
 * It includes various positional categories that characters can belong to, based on their placement in relation to consonants.
 */
export interface IndicPositionalCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0BC1" or "U+0BC1..U+0BC2"
     */
    code_point: string;

    /**
     * Indic Positional Category property value.
     * Possible values include:
     * - "Top"
     * - "Bottom"
     * - "Left"
     * - "Right"
     * - "None"
     * Example: "Top"
     */
    indic_positional_category: "Top" | "Bottom" | "Left" | "Right" | "None";

    /**
     * General Category property value, Unicode character name(s), and code point count in square brackets for ranges.
     * Example: "Lo, TAMIL VOWEL SIGN U [2]"
     */
    comment: string;
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "code_point",
    "indic_positional_category",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property for Unicode characters.
 *
 * The Indic_Syllabic_Category property is aimed at analyzing and processing Indic scripts,
 * focusing on syllabic structure and segmentation rules. It categorizes characters based on
 * their role in the construction of Indic syllables (or aksaras).
 *
 * The following scripts are assessed as Indic in the structural sense:
 * Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
 * Chakma, Cham, Devanagari, Dives Akuru, Dogra, Grantha, Gujarati,
 * Gunjala Gondi, Gurmukhi, Gurung Khema, Hanunoo, Javanese, Kaithi,
 * Kannada, Kawi, Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi,
 * Kirat Rai, Lao, Lepcha, Limbu, Mahajani, Makasar, Malayalam,
 * Marchen, Masaram Gondi, Meetei Mayek, Modi, Multani, Myanmar,
 * Nandinagari, Newa, New Tai Lue, Oriya, Phags-pa, Rejang,
 * Saurashtra, Sharada, Siddham, Sinhala, Soyombo, Sundanese,
 * Syloti Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham, Tai Viet, Takri,
 * Tamil, Telugu, Thai, Tibetan, Tirhuta, Tulu-Tigalari, and
 * Zanabazar Square.
 *
 * All characters for scripts not listed take the default value for this property,
 * unless they are individually listed in this data file.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0900" or "U+0900-U+0903"
     */
    unicode_code_point: string;
    
    /**
     * Indic_Syllabic_Category property value.
     * Possible values include: "Vowel", "Consonant", "Consonant_Dead", "Consonant_Cluster", etc.
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Consonant_Dead" | "Consonant_Cluster" | "Independent_Vowel" | "Dependent_Vowel" | "Nukta" | "Virama";
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category"
];
//#endregion

//#region data-files/v16.0.0/Jamo.txt
/**
 * Interface representing the Jamo_Short_Name property.
 */
export interface JamoShortName {
    /**
     * The code point of a conjoining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo_Short_Name as a one-, two-, or three-character ASCII string.
     * Example: 'G', 'GG', 'N'
     */
    jamo_short_name: string;
}

export const JAMO_SHORT_NAME_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v16.0.0/LineBreak.txt
/**
 * This interface represents the Line Break property data from the Unicode Character Database.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0041 or U+0041..U+005A
     */
    code_point: string;

    /**
     * Line_Break property, which can be one of the following:
     * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
     * - Tailorable: "AI", "AK", "AL", "AP", "AS", "B2", "BA", "BB", "CB", "CJ",
     *   "CL", "CP", "EB", "EM", "EX", "H2", "H3", "HL", "HY", "ID",
     *   "IN", "IS", "JL", "JT", "JV", "NS", "NU", "OP", "PO", "PR",
     *   "QU", "RI", "SA", "SG", "SY", "VF", "VI", "XX"
     * Example: "BK"
     */
    line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                       "AI" | "AK" | "AL" | "AP" | "AS" | "B2" | "BA" | "BB" | "CB" | "CJ" | 
                       "CL" | "CP" | "EB" | "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | 
                       "IN" | "IS" | "JL" | "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | 
                       "QU" | "RI" | "SA" | "SG" | "SY" | "VF" | "VI" | "XX";
}

export const LINE_BREAK_FIELDS = [
    "code_point",
    "line_break_property"
] as const;
//#endregion

//#region data-files/v16.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 * Each alias is associated with a code point and a type label.
 */
export interface NameAliases {
  /**
   * The Unicode code point for the character, represented in hexadecimal format.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias name for the Unicode character.
   * Example: "LATIN CAPITAL LETTER A".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following:
   * - "correction": Corrections for serious problems in the character names.
   * - "control": ISO 6429 names for C0 and C1 control functions.
   * - "alternate": Widely used alternate names for format characters.
   * - "figment": Documented labels for C1 control code points not approved in any standard.
   * - "abbreviation": Commonly occurring abbreviations for control codes and format characters.
   * Example: "control".
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v16.0.0/NamedSequences.txt
/**
 * This interface represents the Unicode Named Character Sequences.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     */
    name: string;
    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v16.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode Character Database.
 * Each sequence consists of a name and a corresponding code point sequence.
 */
export interface NamedSequencesProv {
    /**
     * The name of the character sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the character sequence, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v16.0.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a string in the format "U+XXXX" where XXXX is a hexadecimal number.
     */
    unicode_code_point: string;
    /**
     * Original (erroneous) decomposition of the Unicode character.
     */
    original_decomposition: string;
    /**
     * Corrected decomposition of the Unicode character.
     */
    corrected_decomposition: string;
    /**
     * Version of Unicode for which the correction was entered into UnicodeData.txt, in n.n.n format (e.g., "16.0.0").
     */
    unicode_version: string;
    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points to be normalized.
     * Example: "U+0041; U+0061"
     */
    source: string;

    /**
     * The normalized form in NFC.
     * Example: "U+0041"
     */
    nfc: string;

    /**
     * The normalized form in NFD.
     * Example: "U+0041"
     */
    nfd: string;

    /**
     * The normalized form in NFKC.
     * Example: "U+0041"
     */
    nfkc: string;

    /**
     * The normalized form in NFKD.
     * Example: "U+0041"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v16.0.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface NushuSources {
    /**
     * The date of the document in YYYY-MM-DD format.
     * Example: "2024-02-02"
     */
    date: string;

    /**
     * The copyright information for the document.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use and license.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v16.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date when the data was generated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2024-05-31, 18:09:48 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use and license.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v16.0.0/PropertyAliases.txt
/**
 * This interface defines the aliases for properties used in the Unicode Character Database (UCD).
 * The properties include short names and long names, along with additional aliases where applicable.
 *
 * Each property name may have multiple aliases, and loose matching is applied to all property names and values.
 *
 * For example:
 * - Short name: AL
 * - Long name: Arabic Letter
 *
 * Note: Property value names are not unique across properties, and the combination of property value and property name is unique.
 */
export interface PropertyAliases {
    /**
     * Short name for the property, typically an abbreviation or duplicate of the long name.
     * Example: "AL"
     */
    short_name: string;

    /**
     * Long name for the property, typically the formal name used in documentation.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property, if applicable.
     * Example: "Arabic Letter Alias"
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v16.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database.
 * Each property value is associated with a specific property and includes various aliases.
 */
export interface PropertyValueAliases {
    /**
     * The property for which the property value name is used.
     * Example: "Bidi_Class"
     */
    property: string;

    /**
     * The short name for the property value, typically an abbreviation.
     * Example: "AL"
     */
    short_name: string;

    /**
     * The long name for the property value, typically the formal name used in documentation.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property value, if any.
     * Example: "Arabic Letter, AL"
     */
    additional_aliases?: string[];
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
    "property",
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v16.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the Unicode Script Extensions property,
 * indicating which characters are commonly used with more than one script.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values.
     * The ordering of the values in that set is not material, but for stability in presentation
     * it is given here as alphabetical.
     * 
     * Example: "Latin", "Cyrillic"
     */
    script_extensions: string[];
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_extensions"
];
//#endregion

//#region data-files/v16.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface Scripts {
    /**
     * The date when the data was generated in ISO 8601 format.
     * Example: "2024-04-30T21:48:40Z"
     */
    date: string;

    /**
     * The version of the Unicode data.
     * Example: "16.0.0"
     */
    version: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use and license.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * The URL for more information regarding Unicode Script Property.
     * Example: "https://www.unicode.org/reports/tr24/"
     */
    script_property_url: string;

    /**
     * The URL for the assignment of script values.
     * Example: "https://www.unicode.org/reports/tr24/#Assignment_Script_Values"
     */
    assignment_script_values_url: string;

    /**
     * The URL for the assignment of scriptX values.
     * Example: "https://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values"
     */
    assignment_scriptx_values_url: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation_url",
    "script_property_url",
    "assignment_script_values_url",
    "assignment_scriptx_values_url"
];
//#endregion

//#region data-files/v16.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed in hexadecimal format.
     * Example: '0061' for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A' in titlecase context
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal casing behavior.
     * Example: 'en' for English, 'Not_en' for not English
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Format: A sequence of Unicode code points representing the variation.
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Bold", "Italic"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Text", "Graphic"
   */
  shaping_environment: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environment"
];
//#endregion

//#region data-files/v16.0.0/TangutSources.txt
/**
 * This interface represents the data structure for TangutSources.
 */
export interface TangutSources {
    /**
     * The date when the file was created or modified.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2024-01-17, 19:15:00 GMT"
     */
    date: string;

    /**
     * The copyright information for the file.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for terms of use and license.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for documentation related to the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * A description of the file's purpose within the Unicode Character Database.
     */
    description: string;
}

export const TANGUT_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url",
    "description"
];
//#endregion

//#region data-files/v16.0.0/USourceData.txt
/**
 * This interface represents the basic data for U-source ideographs.
 */
export interface USourceData {
    /**
     * U-source identifier.
     */
    u_source_identifier: string;

    /**
     * Status of the ideograph, which can be one of the following:
     * - "Comp": Encoded as a CJK Compatibility Ideograph
     * - "ExtA": Encoded in Extension A
     * - "ExtB": Encoded in Extension B
     * - "ExtC": Encoded in Extension C
     * - "ExtD": Encoded in Extension D
     * - "ExtE": Encoded in Extension E
     * - "ExtF": Encoded in Extension F
     * - "ExtG": Encoded in Extension G
     * - "ExtH": Encoded in Extension H
     * - "ExtI": Encoded in Extension I
     * - "FutureWS": A candidate for inclusion in a future IRG working set
     * - "NoAction": No action taken
     * - "Rejected": Not suitable for encoding as a CJK Unified Ideograph
     * - "URO": Encoded in the URO or as a CJK Unified Ideograph in the CJK Compatibility Ideographs block
     * - "Variant": Variant of an encoded ideograph
     * - "WS-2021": Submitted by the UTC for IRG Working Set 2021
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: string;

    /**
     * The Unicode code point of this ideograph, if any; otherwise, the code point specifies the encoded ideograph to which this entry is related, generally as a variant.
     */
    unicode_code_point?: string;

    /**
     * kRSUnicode property value (see UAX #38).
     */
    krs_unicode_property_value?: string;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_dictionary_position?: string;

    /**
     * Ideographic Description Sequence (IDS).
     */
    ideographic_description_sequence?: string;

    /**
     * Sources of the ideograph.
     */
    sources?: string;

    /**
     * General comments regarding the ideograph.
     */
    general_comments?: string;

    /**
     * kTotalStrokes property value (see UAX #38).
     */
    k_total_strokes_property_value?: string;

    /**
     * First residual stroke.
     */
    first_residual_stroke?: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_identifier",
    "status",
    "unicode_code_point",
    "krs_unicode_property_value",
    "virtual_kangxi_dictionary_position",
    "ideographic_description_sequence",
    "sources",
    "general_comments",
    "k_total_strokes_property_value",
    "first_residual_stroke"
];
//#endregion

//#region data-files/v16.0.0/Unikemet.txt
/**
 * Interface representing the Unikemet Data references for Egyptian Hieroglyphs.
 */
export interface Unikemet {
    /**
     * The date of the data file in YYYY-MM-DD format.
     * Example: "2024-07-24"
     */
    date: string;

    /**
     * Copyright information for the data file.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * A description of the file's purpose and content.
     * Example: "This file is a normative contributory data file in the Unicode Character Database."
     */
    description: string;

    /**
     * The title of the data file.
     * Example: "Unikemet Data references file for Egyptian Hieroglyphs"
     */
    title: string;
}

export const UNIKEMET_FIELDS = [
    "date",
    "copyright",
    "description",
    "title"
];
//#endregion

//#region data-files/v16.0.0/VerticalOrientation.txt
/**
 * This interface defines the Vertical_Orientation property as per Unicode specifications.
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     * Example: U+0041 for 'A', U+0030..U+0039 for '0' to '9'.
     */
    code_point: string;

    /**
     * Vertical_Orientation property value, which can be one of the following:
     * - "U" for Upright, the same orientation as in the code charts.
     * - "R" for Rotated 90 degrees clockwise compared to the code charts.
     * - "Tu" for Transformed typographically, with fallback to Upright.
     * - "Tr" for Transformed typographically, with fallback to Rotated.
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the file DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The version of the Unicode standard that this data corresponds to.
     * Example: "16.0.0"
     */
    version: "16.0.0";

    /**
     * The date when this data was generated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2024-04-30, 21:48:13 GMT"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use and license.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "version",
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The property name, represented as a string.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property, which can be either true or false.
     * Example: true
     */
    property_value: boolean;
    
    /**
     * The version of the Unicode standard that this property is associated with.
     * Example: "16.0.0"
     */
    unicode_version: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "unicode_version"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the DerivedCombiningClass data structure.
 */
export interface DerivedCombiningClass {
    /**
     * The Unicode code point of the character.
     * Format: U+XXXX, where XXXX is a hexadecimal number.
     * Example: U+0041 for 'A'.
     */
    code_point: string;

    /**
     * The canonical combining class of the character.
     * Type: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "40" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "48" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "56" | "57" | "58" | "59" | "60" | "61" | "62" | "63";
     * Example: "0" for non-spacing marks.
     */
    canonical_combining_class: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "40" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "48" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "56" | "57" | "58" | "59" | "60" | "61" | "62" | "63";

    /**
     * The character's name in the Unicode database.
     * Example: "LATIN CAPITAL LETTER A" for 'A'.
     */
    character_name: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "code_point",
    "canonical_combining_class",
    "character_name"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The Unicode character for which the decomposition is defined.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    character: string;

    /**
     * The decomposition mapping for the character.
     * Format: A string that may contain multiple characters separated by commas.
     * Example: "A, B, C"
     */
    decomposition: string;

    /**
     * The type of decomposition.
     * Union type indicating the nature of the decomposition.
     * Possible values: "canonical", "compatibility"
     */
    type: "canonical" | "compatibility";

    /**
     * The source of the decomposition data.
     * Format: A string indicating the source.
     * Example: "Unicode Character Database"
     */
    source: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition",
    "type",
    "source"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+4E00"
     */
    character: string;

    /**
     * The East Asian width property of the character.
     * Example: "Narrow"
     */
    east_asian_width: "Narrow" | "Wide" | "Ambiguous" | "Fullwidth" | "Halfwidth";

    /**
     * The Unicode code point of the character.
     * Example: "U+4E00"
     */
    code_point: string;

    /**
     * The name of the character.
     * Example: "CJK UNIFIED IDEOGRAPH-4E00"
     */
    name: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width",
    "code_point",
    "name"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character, represented as a string.
     * Example: "Lu" for uppercase letters.
     */
    general_category: string;

    /**
     * The description of the general category, represented as a string.
     * Example: "Uppercase Letter" for the category "Lu".
     */
    description: string;

    /**
     * The numeric value associated with the general category, represented as a number.
     * Example: 1 for "Lu".
     */
    numeric_value: number;

    /**
     * A boolean indicating if the category is a letter.
     * Example: true for "Lu".
     */
    is_letter: boolean;

    /**
     * A boolean indicating if the category is a digit.
     * Example: false for "Lu".
     */
    is_digit: boolean;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "description",
    "numeric_value",
    "is_letter",
    "is_digit"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup data structure.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode code point of the character.
     * Format: U+XXXX, where XXXX is a hexadecimal number.
     * Example: U+0041 for 'A'.
     */
    code_point: string;

    /**
     * The name of the character.
     * Example: 'LATIN CAPITAL LETTER A'.
     */
    character_name: string;

    /**
     * The joining type of the character.
     * Possible values: "L", "R", "D", "U", "C", "T", "A".
     */
    joining_type: "L" | "R" | "D" | "U" | "C" | "T" | "A";

    /**
     * The joining group of the character.
     * Example: 'Left' for characters that join to the left.
     */
    joining_group: string;

    /**
     * The directionality of the character.
     * Possible values: "L", "R", "AL", "EN", "AN", "NSM", "B", "S", "WS", "ON".
     */
    directionality: "L" | "R" | "AL" | "EN" | "AN" | "NSM" | "B" | "S" | "WS" | "ON";
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "code_point",
    "character_name",
    "joining_type",
    "joining_group",
    "directionality"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the DerivedJoiningType from the Unicode Character Database.
 */
export interface DerivedJoiningType {
    /**
     * The joining type of the character.
     * Possible values: "U", "L", "R", "D", "C", "T", "S", "A", "N".
     * Example: "L"
     */
    joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "S" | "A" | "N";

    /**
     * The character code point in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code_point: string;

    /**
     * The character itself.
     * Example: "A"
     */
    character: string;

    /**
     * The directionality of the character.
     * Possible values: "L", "R", "AL", "EN", "AN", "NSM", "B", "S", "WS", "ON".
     * Example: "L"
     */
    directionality: "L" | "R" | "AL" | "EN" | "AN" | "NSM" | "B" | "S" | "WS" | "ON";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character",
    "directionality"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the DerivedLineBreak data from the Unicode Character Database.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2024-07-29, 16:26:50 GMT"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2024 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use and license.
     * Format: URL
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Format: URL
     * Example: "https://unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedName.txt
/**
 * This interface represents the derived names of Unicode characters based on their code points.
 *
 * The properties include:
 * - `unicode_code_point`: A string representing the Unicode code point value or range of values.
 *   Example: "U+4E12" or "U+2F800-U+2FA1F"
 * - `name_property_value`: A string representing the name property value or pattern derived from the code point.
 *   Example: "CJK UNIFIED IDEOGRAPH-*" or "CJK COMPATIBILITY IDEOGRAPH-*"
 */
export interface DerivedName {
  unicode_code_point: string;
  name_property_value: string;
}

export const DERIVED_NAME_FIELDS = [
  "unicode_code_point",
  "name_property_value"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the DerivedNumericType from the Unicode Character Database.
 */
export interface DerivedNumericType {
    /**
     * The numeric value of the character.
     * Example: 1.0
     */
    numeric_value: number;
    
    /**
     * The numeric type of the character, which can be one of the following:
     * - "decimal"
     * - "digit"
     * - "numeric"
     * Example: "decimal"
     */
    numeric_type: "decimal" | "digit" | "numeric";
    
    /**
     * The number of digits in the numeric value.
     * Example: 1
     */
    digit_count: number;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "numeric_value",
    "numeric_type",
    "digit_count"
];
//#endregion

//#region data-files/v16.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as defined in the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character.
     * Format: "<number>"
     * Example: "1.0"
     */
    numeric_value: "string";

    /**
     * The type of the numeric value.
     * Possible values: "integer", "decimal"
     */
    numeric_type: "string";

    /**
     * The source of the numeric value.
     * Format: "<source>"
     * Example: "Unicode Character Database"
     */
    source: "string";

    /**
     * The version of the Unicode standard that defines this numeric value.
     * Format: "<version>"
     * Example: "16.0.0"
     */
    version: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source",
    "version"
];
//#endregion

//#region data-files/v16.0.0/emoji/emoji-data.txt
/**
 * Interface representing the emoji data as specified in the emoji-data.txt file.
 */
export interface EmojiData {
    /**
     * The codepoint(s) of the emoji, represented in hexadecimal format.
     * Example: "1F600"
     */
    codepoint: string;

    /**
     * The property of the emoji, indicating its category or type.
     * Example: "face"
     */
    property: string;

    /**
     * Comments or additional information about the emoji.
     * Example: "grinning face"
     */
    comments: string;
}

export const EMOJI_DATA_FIELDS = [
    "codepoint",
    "property",
    "comments"
];
//#endregion

//#region data-files/v16.0.0/emoji/emoji-variation-sequences.txt
/**
 * Emoji Variation Sequences for UTS #51
 * Used with Emoji Version 16.0 and subsequent minor revisions (if any)
 */
export interface emoji_variation_sequences {
    /**
     * The sequence of emoji characters.
     * Example: "👨‍👩‍👧‍👦"
     */
    sequence: string;
    /**
     * The description of the emoji variation sequence.
     * Example: "Family: Man, Woman, Girl, Boy"
     */
    description: string;
}

export const EMOJI_VARIATION_SEQUENCES_FIELDS = [
    "sequence",
    "description"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character for which the grapheme break property is defined.
     * Example: 'a'
     */
    character: string;
    
    /**
     * The grapheme break property value for the character.
     * Example: "CR" (Carriage Return)
     */
    property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the Grapheme Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;

    /**
     * An optional comment associated with the code points.
     * Example: "# Example comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 *
 * This interface represents the structure of the default line break test data.
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    line_break_string: string;
    /**
     * An optional comment associated with the line break string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "line_break_string",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties related to sentence breaking as defined in Unicode.
 */
export interface SentenceBreakProperty {
    /**
     * The Unicode character code point.
     * Example: 0x002E for '.'
     */
    code_point: number;
    
    /**
     * The category of the character for sentence breaking.
     * Example: "AL" for Arabic Letter
     */
    category: "AL" | "CR" | "LF" | "NL" | "SA" | "SP" | "XX";
    
    /**
     * The specific property value for the character.
     * Example: "S" for sentence boundary
     */
    property_value: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "code_point",
    "category",
    "property_value"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Default Sentence_Break Test
 *
 * This interface represents the structure of the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty data.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * Can be one of the following: "normal", "break-all", "keep-all", "break-word".
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all" | "break-word";

    /**
     * The description of the word break property.
     * Example: "This property defines how words should be broken at the end of a line."
     */
    description: string;

    /**
     * The version of the Unicode standard that this property is associated with.
     * Example: "16.0.0"
     */
    unicode_version: string;
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break",
    "description",
    "unicode_version"
];
//#endregion

//#region data-files/v16.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the WordBreakTest data structure.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

