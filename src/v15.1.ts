// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 15.1

//#region data-files/v15.1.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of a character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name.
     * Example: 'TEH_MARBUTA'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v15.1.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+298D"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+298E" or "<none>"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, one of the following:
     * - "o" Open
     * - "c" Close
     * - "n" None
     * Example: "o"
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v15.1.0/BidiCharacterTest.txt
/**
 * Interface representing the test data for the Unicode Bidirectional Algorithm conformance test.
 */
export interface BidiCharacterTest {
  /**
   * A sequence of hexadecimal code point values separated by space.
   * Example: "0041 0062 0631"
   */
  code_point_sequence: string;
  
  /**
   * A value representing the paragraph direction:
   * - 0 represents left-to-right
   * - 1 represents right-to-left
   * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
   * Example: 0
   */
  paragraph_direction: "0" | "1" | "2";
  
  /**
   * The resolved paragraph embedding level.
   * Example: 0
   */
  resolved_paragraph_embedding_level: number;
  
  /**
   * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
   * Example: "0 1 x 2"
   */
  resolved_levels: string;
  
  /**
   * A list of indices showing the resulting visual ordering from left to right;
   * characters with a resolved level of 'x' are skipped.
   * Example: "0 1 3"
   */
  visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
  "code_point_sequence",
  "paragraph_direction",
  "resolved_paragraph_embedding_level",
  "resolved_levels",
  "visual_ordering_indices"
];
//#endregion

//#region data-files/v15.1.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mapping of Unicode characters that have the Bidi_Mirrored=Yes property.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value.
     * Example: '0041' for 'A'
     */
    source: string;

    /**
     * The mirrored code point represented as a hexadecimal value.
     * Example: '0042' for 'B'
     */
    mirrored: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source",
    "mirrored"
];
//#endregion

//#region data-files/v15.1.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test data.
 * It includes properties for levels, reordering, and data lines as specified in the Unicode Bidi Algorithm documentation.
 */
export interface BidiTest {
  /**
   * An ordered space-delimited list of numbers indicating the resulting levels
   * for each input property value. The UBA does not assign levels to certain values;
   * those are indicated with an 'x'.
   * 
   * Example:
   *   @Levels: 1 0
   *   @Levels: x 1 x 2
   */
  levels: string;

  /**
   * An ordered space-delimited list of numbers indicating the resulting
   * visual ordering from left to right. The numbers are zero-based, and
   * are indexes into the input string. Items with a level of 'x' are skipped.
   * 
   * Example:
   *   @Reorder: 1 0
   *   @Reorder: 3 1
   */
  reorder: string;

  /**
   * An ordered list of BIDI property values followed by a hex bitset for
   * paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL.
   * Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
   * 
   * Example:
   *    L LRE R R; 7
   *    L LRE R AL; 7
   */
  data: string;
}

export const BIDI_TEST_FIELDS = ["levels", "reorder", "data"];
//#endregion

//#region data-files/v15.1.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Example: "0041" for 'A'
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Example: "007A" for 'z'
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v15.1.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}''{0,2}.
     * Example: '1', '12', '123', '12'''
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character, which may be empty if not included in the Kangxi Radicals block or the CJK Radicals Supplement block.
     * Example: '氵' (for radical number 85)
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: '水' (for radical number 85)
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v15.1.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The status of the case folding mapping, which can be one of the following:
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: "C".
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: "0061" for 'a' or "0061 0301" for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: "LATIN CAPITAL LETTER A".
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v15.1.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD
     * Example: "2023-01-05"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_url: string;

    /**
     * A description of the file's purpose.
     */
    description: string;

    /**
     * The URL for more information on the primary exclusion list table.
     * Example: "https://www.unicode.org/reports/tr15/#Primary_Exclusion_List_Table"
     */
    primary_exclusion_list_url: string;

    /**
     * The URL for the derived property Full_Composition_Exclusion.
     * Example: "DerivedNormalizationProps.txt"
     */
    full_composition_exclusion_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "unicode_character_database_url",
    "description",
    "primary_exclusion_list_url",
    "full_composition_exclusion_url"
];
//#endregion

//#region data-files/v15.1.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
    /**
     * The version of Unicode in which the code point was assigned.
     * Example: "1.1"
     */
    version: "1.1" | "2.0" | "3.0" | "3.1";

    /**
     * The date when the code point was assigned.
     * Format: YYYY-MM-DD
     * Example: "2023-07-28"
     */
    date: string;

    /**
     * Indicates if the code point is a graphic, format, control, private-use, surrogate, or noncharacter.
     * Example: "graphic"
     */
    type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

    /**
     * The code point value assigned.
     * Example: "U+0041"
     */
    code_point: string;
}

export const DERIVED_AGE_FIELDS = [
    "version",
    "date",
    "type",
    "code_point"
];
//#endregion

//#region data-files/v15.1.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties defined in the DerivedCoreProperties file.
 */
export interface DerivedCoreProperties {
    /**
     * The date when the file was created in GMT format.
     * Example: "2023-08-07T15:21:24Z"
     */
    date: string;
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use for Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.1.0/DerivedNormalizationProps.txt
/**
 * Interface representing the derived normalization properties.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether the normalization is canonical.
     * Example: true
     */
    is_canonical: boolean;

    /**
     * The version of the normalization algorithm used.
     * Example: "15.1.0"
     */
    version: string;

    /**
     * The date when the normalization properties were last updated.
     * Format: YYYY-MM-DD
     * Example: "2023-05-02"
     */
    last_updated: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "is_canonical",
    "version",
    "last_updated"
];
//#endregion

//#region data-files/v15.1.0/EastAsianWidth.txt
/**
 * EastAsianWidth
 *
 * This interface represents the East Asian Width property of Unicode characters.
 *
 * The East Asian Width property can take one of the following values:
 * - "A": Ambiguous
 * - "F": Full-width
 * - "H": Half-width
 * - "N": Neutral
 * - "Na": Narrow
 * - "W": Wide
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 * The unassigned code points in specific blocks default to "W". For example:
 * - CJK Unified Ideographs Extension A: U+3400..U+4DBF
 * - CJK Unified Ideographs: U+4E00..U+9FFF
 * - CJK Compatibility Ideographs: U+F900..U+FAFF
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * For more information, see UAX #11: East Asian Width.
 */
export interface EastAsianWidth {
  /**
   * Unicode code point value or range of code point values.
   * Example: U+0041 or U+3400..U+4DBF
   */
  code_point: string;
  /**
   * East Asian Width property value.
   * Must be one of: "A", "F", "H", "N", "Na", "W"
   */
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "code_point",
  "east_asian_width"
];
//#endregion

//#region data-files/v15.1.0/EmojiSources.txt
/**
 * This interface represents the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 *
 * Each mapping is symmetric for equivalent Unicode and carrier symbols or sequences.
 * The fields represent the following:
 * - `unicode_code_point_or_sequence`: The Unicode code point or sequence (e.g., "U+1F600").
 * - `docomo_shift_jis_code`: The DoCoMo Shift-JIS code (e.g., "0xF8A0").
 * - `kddi_shift_jis_code`: The KDDI Shift-JIS code (e.g., "0xF8A1").
 * - `softbank_shift_jis_code`: The SoftBank Shift-JIS code (e.g., "0xF8A2").
 */
export interface EmojiSources {
  unicode_code_point_or_sequence: string;
  docomo_shift_jis_code?: string;
  kddi_shift_jis_code?: string;
  softbank_shift_jis_code?: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v15.1.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and a target code point.
 */
export interface EquivalentUnifiedIdeograph {
  /**
   * A code point or code point range represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: '4E00' or '4E00-4E0F'
   */
  source: string;

  /**
   * A code point represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: '4E01'
   */
  target: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "source",
  "target"
];
//#endregion

//#region data-files/v15.1.0/HangulSyllableType.txt
/**
 * Interface representing the data structure for Hangul Syllable Type.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "HANGUL_SYLLABLE_TYPE_CODE"
     * Example: "L"
     */
    hangul_syllable_type_code: "L" | "V" | "LV" | "LVT";

    /**
     * The description of the Hangul syllable type.
     * Format: string
     * Example: "Consonant"
     */
    description: string;

    /**
     * The Unicode value of the Hangul syllable type.
     * Format: integer
     * Example: 4352
     */
    unicode_value: number;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "hangul_syllable_type_code",
    "description",
    "unicode_value"
];
//#endregion

//#region data-files/v15.1.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic positional categories for various Indic scripts.
 * The property is aimed at specifying syllabic structure for Indic scripts, taking into account the
 * placement of dependent vowels and other characters around consonants.
 */
export interface IndicPositionalCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0BC1" or "U+0BC1..U+0BC2"
     */
    unicode_code_point: string;

    /**
     * Indic positional category property value.
     * Possible values include:
     * - "Top"
     * - "Bottom"
     * - "Left"
     * - "Right"
     * Example: "Top"
     */
    indic_positional_category: "Top" | "Bottom" | "Left" | "Right";

    /**
     * Comment field showing the General_Category property value, Unicode character name(s),
     * and code point count in square brackets for ranges.
     * Example: "# Lo; TAMIL VOWEL SIGN U; [2]"
     */
    comment: string;
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_positional_category",
    "comment"
];
//#endregion

//#region data-files/v15.1.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The property specifies the syllabic structure and segmentation rules for Indic scripts.
 *
 * The following scripts are assessed as Indic in the structural sense:
 * Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
 * Chakma, Cham, Devanagari, Dives Akuru, Dogra, Grantha, Gujarati,
 * Gunjala Gondi, Gurmukhi, Hanunoo, Javanese, Kaithi, Kannada, Kawi,
 * Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Lepcha, Limbu,
 * Mahajani, Makasar, Malayalam, Marchen, Masaram Gondi, Meetei Mayek,
 * Modi, Multani, Myanmar, Nandinagari, Newa, New Tai Lue, Oriya,
 * Phags-pa, Rejang, Saurashtra, Sharada, Siddham, Sinhala, Soyombo,
 * Sundanese, Syloti Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham,
 * Tai Viet, Takri, Tamil, Telugu, Thai, Tibetan, Tirhuta, and
 * Zanabazar Square.
 *
 * All characters for all other scripts not in that list take the default value for this property,
 * unless they are individually listed in this data file.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0900" or "U+0900-U+0903"
     */
    code_point: string;

    /**
     * Indic Syllabic Category property value.
     * Possible values include: "Vowel", "Consonant", "Consonant_Dead", "Consonant_Cluster", etc.
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Consonant_Dead" | "Consonant_Cluster";

    /**
     * General Category property value, Unicode character name or names, and code point count in square brackets.
     * Example: "# Mn (Nonspacing Mark) [3]"
     */
    comment: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "code_point",
    "indic_syllabic_category",
    "comment"
];
//#endregion

//#region data-files/v15.1.0/Jamo.txt
/**
 * Interface representing the Jamo_Short_Name property.
 */
export interface Jamo {
  /**
   * The code point of a conjoining jamo character in 4-digit hexadecimal form.
   * Example: '1100'
   */
  code_point: string;

  /**
   * The Jamo_Short_Name as a one-, two-, or three-character ASCII string.
   * Example: 'g', 'gg', 'n'
   */
  jamo_short_name: string;
}

export const JAMO_FIELDS = [
  "code_point",
  "jamo_short_name"
];
//#endregion

//#region data-files/v15.1.0/LineBreak.txt
/**
 * This interface represents the Line Break Property data from the Unicode Character Database.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0041 for 'A' or U+0030..U+0039 for '0' to '9'.
     */
    code_point: string;

    /**
     * Line_Break property, which can be one of the following:
     * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
     * - Tailorable: "AI", "AK", "AL", "AP", "AS", "B2", "BA", "BB", "CB", "CJ",
     *   "CL", "CP", "EB", "EM", "EX", "H2", "H3", "HL", "HY", "ID",
     *   "IN", "IS", "JL", "JT", "JV", "NS", "NU", "OP", "PO", "PR",
     *   "QU", "RI", "SA", "SG", "SY", "VF", "VI", "XX"
     * - Default value for unassigned code points is "XX".
     * Example: "BK" for a mandatory line break.
     */
    line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                       "AI" | "AK" | "AL" | "AP" | "AS" | "B2" | "BA" | "BB" | "CB" | "CJ" | 
                       "CL" | "CP" | "EB" | "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | 
                       "IN" | "IS" | "JL" | "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | 
                       "QU" | "RI" | "SA" | "SG" | "SY" | "VF" | "VI" | "XX";
}

export const LINE_BREAK_FIELDS = [
    "code_point",
    "line_break_property"
] as const;
//#endregion

//#region data-files/v15.1.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented as a hexadecimal string.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a formal name or an abbreviation.
   * Example: "LATIN CAPITAL LETTER A" or "C1".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", "abbreviation".
   * Comparisons of type labels should ignore case.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v15.1.0/NamedSequences.txt
/**
 * This interface represents the Unicode Named Character Sequences.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;
    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v15.1.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
] as const;
//#endregion

//#region data-files/v15.1.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     * Example: "U+0041" decomposed as "A".
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     * Example: "U+0041" corrected to "A".
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered, in n.n.n format.
     * Example: "15.0.0".
     */
    unicode_version: string;

    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     * Example: "Corrigendum #3".
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v15.1.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite for Unicode characters.
 */
export interface NormalizationTest {
    /**
     * The source code points to be normalized.
     * Example: "U+0041; U+0061"
     */
    source: string;

    /**
     * The normalized form of the source code points in NFC.
     * Example: "U+0041"
     */
    nfc: string;

    /**
     * The normalized form of the source code points in NFD.
     * Example: "U+0061"
     */
    nfd: string;

    /**
     * The normalized form of the source code points in NFKC.
     * Example: "U+0041"
     */
    nfkc: string;

    /**
     * The normalized form of the source code points in NFKD.
     * Example: "U+0061"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v15.1.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database for Nushu Sources.
 */
export interface NushuSources {
    /**
     * The date of the data file.
     * Format: YYYY-MM-DD
     * Example: "2023-01-05"
     */
    date: string;

    /**
     * The copyright information for the data file.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v15.1.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date when the properties were last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2023-08-01, 21:56:53 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v15.1.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database (UCD).
 * The aliases can be used for XML formats of UCD data, regular-expression property tests,
 * and other programmatic textual descriptions of Unicode data.
 *
 * The first field is the short name for the property, typically an abbreviation or a duplicate
 * of the long name in the second field. The second field is the long name for the property,
 * typically the formal name used in documentation about the property.
 *
 * Loose matching is applied to all property names and property values, with the exception of
 * String Property values. Numeric Property values apply numeric equivalencies.
 *
 * Note that property value names are not unique across properties, and some property names
 * may be the same as property value names. The combination of property value and property
 * name is unique.
 */
export interface PropertyAliases {
    /**
     * Short name for the property, typically an abbreviation.
     */
    short_name: string;

    /**
     * Long name for the property, typically the formal name used in documentation.
     */
    long_name: string;

    /**
     * Additional aliases for the property, if any.
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v15.1.0/PropertyValueAliases.txt
/**
 * This interface represents the aliases for property values used in the Unicode Character Database (UCD).
 *
 * Each property value name consists of the following fields:
 * - property: The property for which the property value name is used.
 * - short_name: The short name for the property value, typically an abbreviation.
 * - long_name: The long name for the property value, typically the formal name used in documentation.
 *
 * In the case of Canonical_Combining_Class (ccc), there are 4 fields:
 * - property: The property for which the property value name is used.
 * - numeric: A numeric representation of the combining class.
 * - short_name: The short name for the property value.
 * - long_name: The long name for the property value.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * For more information, see UAX #44, Unicode Character Database, and UTS #18, Unicode Regular Expressions.
 */
export interface PropertyValueAliases {
  property: string;
  short_name: string;
  long_name: string;
  numeric?: number;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "short_name",
  "long_name",
  "numeric"
];
//#endregion

//#region data-files/v15.1.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the Unicode Script Extensions property,
 * which indicates which characters are commonly used with more than one script.
 * Each code point has one or more associated script property values.
 */
export interface ScriptExtensions {
  /**
   * A set of one or more abbreviated Script property values.
   * The ordering of the values in that set is not material, but for stability in presentation,
   * it is given here as alphabetical.
   * Example: "Latin, Greek"
   */
  script_values: "string";

  /**
   * A list of code points associated with the script values,
   * listed in code point order.
   * Example: "U+0041, U+0042"
   */
  code_points: string;
}

export const SCRIPT_EXTENSIONS_FIELDS = [
  "script_values",
  "code_points"
];
//#endregion

//#region data-files/v15.1.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The script name, e.g., "Latin".
     */
    script_name: string;
    /**
     * The script code, e.g., "Latn".
     */
    script_code: string;
    /**
     * The range of Unicode code points for this script, e.g., "U+0000-U+007F".
     */
    code_point_range: string;
    /**
     * The direction of the script, e.g., "LTR" or "RTL".
     */
    direction: "LTR" | "RTL";
    /**
     * The associated language(s) for this script, e.g., "English, French".
     */
    languages: string;
}

export const SCRIPTS_FIELDS = [
    "script_name",
    "script_code",
    "code_point_range",
    "direction",
    "languages"
];
//#endregion

//#region data-files/v15.1.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: '0041' for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: '0061' for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: '0041 0062' for 'Ab'
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: '0041' for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal casing behavior.
     * This can include language IDs or casing contexts, separated by spaces.
     * Example: 'en US' or 'Not_en'
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     * Example: 'Uppercase mapping for Latin letters'
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v15.1.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Format: A sequence of Unicode characters representing the variation.
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Format: A textual description explaining the visual representation.
   */
  description: string;

  /**
   * Specific shaping environments where the appearance differs.
   * Format: A textual description of the environments affecting the appearance.
   * Example: "Only in certain fonts or rendering engines."
   */
  shaping_environments?: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v15.1.0/TangutSources.txt
/**
 * This interface represents the data structure for TangutSources.
 */
export interface TangutSources {
    /**
     * The date when the file was created or modified.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2023-04-26, 18:55:00 GMT"
     */
    date: string;
    /**
     * The copyright information for the file.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
    /**
     * Indicates if the file is normative.
     * Format: boolean
     * Example: true
     */
    is_normative: boolean;
}

export const TANGUT_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "is_normative"
];
//#endregion

//#region data-files/v15.1.0/USourceData.txt
/**
 * Interface representing the U-source ideographs data.
 */
export interface USourceData {
    /**
     * U-source identifier.
     */
    u_source_identifier: string;

    /**
     * Status of the ideograph, which can be one of the following:
     * - "Comp": Encoded as a CJK Compatibility Ideograph
     * - "ExtA": Encoded in Extension A
     * - "ExtB": Encoded in Extension B
     * - "ExtC": Encoded in Extension C
     * - "ExtD": Encoded in Extension D
     * - "ExtE": Encoded in Extension E
     * - "ExtF": Encoded in Extension F
     * - "ExtG": Encoded in Extension G
     * - "ExtH": Encoded in Extension H
     * - "ExtI": Encoded in Extension I
     * - "FutureWS": A candidate for inclusion in a future IRG working set
     * - "NoAction": No action taken
     * - "Rejected": Not suitable for encoding as a CJK Unified Ideograph
     * - "URO": Encoded in the URO or as a CJK Unified Ideograph in the CJK Compatibility Ideographs block
     * - "Variant": Variant of an encoded ideograph
     * - "WS-2021": Submitted by the UTC for IRG Working Set 2021
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: string;

    /**
     * The Unicode code point of this ideograph, if any; otherwise, the code point specifies the encoded ideograph to which this entry is related, generally as a variant.
     */
    unicode_code_point?: string;

    /**
     * kRSUnicode property value (see UAX #38).
     */
    krs_unicode_property_value?: string;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_dictionary_position?: string;

    /**
     * Ideographic Description Sequence (IDS).
     */
    ideographic_description_sequence?: string;

    /**
     * Sources of the ideograph.
     */
    sources?: string;

    /**
     * General comments regarding the ideograph.
     */
    general_comments?: string;

    /**
     * kTotalStrokes property value (see UAX #38).
     */
    k_total_strokes_property_value?: string;

    /**
     * First residual stroke.
     */
    first_residual_stroke?: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_identifier",
    "status",
    "unicode_code_point",
    "krs_unicode_property_value",
    "virtual_kangxi_dictionary_position",
    "ideographic_description_sequence",
    "sources",
    "general_comments",
    "k_total_strokes_property_value",
    "first_residual_stroke"
];
//#endregion

//#region data-files/v15.1.0/VerticalOrientation.txt
/**
 * This interface defines the Vertical_Orientation property as per Unicode specifications.
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     * Example: U+0041 for 'A', U+0030..U+0039 for '0' to '9'.
     */
    code_point: string;

    /**
     * Vertical_Orientation property value, which can be one of the following:
     * - "U" for Upright, the same orientation as in the code charts.
     * - "R" for Rotated 90 degrees clockwise compared to the code charts.
     * - "Tu" for Transformed typographically, with fallback to Upright.
     * - "Tr" for Transformed typographically, with fallback to Rotated.
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from the DerivedBidiClass-15.1.0.txt file.
 */
export interface DerivedBidiClass {
    /**
     * The date when the data was generated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2023-07-28, 23:33:54 GMT"
     */
    date: string;
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property.
     * Example: "Y"
     */
    property_value: "Y" | "N";
    
    /**
     * The version of the Unicode standard that this property is associated with.
     * Example: "15.0"
     */
    unicode_version: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "unicode_version"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedCombiningClass.txt
/**
 * DerivedCombiningClass
 */
export interface DerivedCombiningClass {
    /**
     * The Unicode code point of the character.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    code_point: string;

    /**
     * The canonical name of the character.
     * Example: 'LATIN CAPITAL LETTER A'
     */
    canonical_name: string;

    /**
     * The combining class of the character.
     * Format: integer (0-255)
     */
    combining_class: number;

    /**
     * Indicates whether the character is a non-spacing mark.
     * Type: boolean
     */
    is_non_spacing_mark: boolean;

    /**
     * The character's bidirectional category.
     * Example: 'L', 'R', 'AL', etc.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "CS" | "ET" | "AN" | "BN" | "S" | "WS" | "ON";
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "code_point",
    "canonical_name",
    "combining_class",
    "is_non_spacing_mark",
    "bidi_category"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the Unicode Character Database derived decomposition type.
 */
export interface DerivedDecompositionType {
    /**
     * The Unicode character for the decomposition.
     * Format: U+XXXX where XXXX is a hexadecimal value.
     * Example: U+0041 for 'A'.
     */
    character: string;

    /**
     * The type of decomposition.
     * Union type indicating the type of decomposition.
     * Possible values: "canonical", "compatibility".
     */
    decomposition_type: "canonical" | "compatibility";

    /**
     * The decomposition mapping.
     * A string representing the mapping of the decomposition.
     * Example: "U+0041 U+0301" for 'A' with an acute accent.
     */
    mapping: string;

    /**
     * The source of the decomposition.
     * A string indicating where the decomposition information was derived from.
     * Example: "Unicode Character Database".
     */
    source: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition_type",
    "mapping",
    "source"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the Derived East Asian Width data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+0041"
     */
    character: string;
    
    /**
     * The East Asian Width value for the character.
     * Example: "Narrow"
     */
    east_asian_width: "Narrow" | "Wide" | "Fullwidth" | "Halfwidth" | "Ambiguous";
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: string;

    /**
     * The Unicode code point of the character.
     * Example: "0041" for 'A'.
     */
    code_point: string;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The numeric value associated with the character, if applicable.
     * Example: "1.0" for numeric characters.
     */
    numeric_value?: string;

    /**
     * The script associated with the character.
     * Example: "Latin".
     */
    script: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "code_point",
    "character_name",
    "numeric_value",
    "script"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup data structure.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode character or character range represented as a string.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "U" for Unicode Default Joining
     * - "L" for Left Joining
     * - "R" for Right Joining
     * - "D" for Dual Joining
     * Example: "L" for a character that joins on the left.
     */
    joining_type: "U" | "L" | "R" | "D";

    /**
     * The character's joining group, which is a string identifier.
     * Example: "AL" for Arabic Letters.
     */
    joining_group: string;

    /**
     * The character's directionality, which can be one of the following:
     * - "L" for Left-to-Right
     * - "R" for Right-to-Left
     * Example: "R" for a character that is read from right to left.
     */
    directionality: "L" | "R";

    /**
     * The character's category, which can be one of the following:
     * - "P" for Punctuation
     * - "S" for Symbol
     * - "L" for Letter
     * Example: "P" for punctuation characters.
     */
    category: "P" | "S" | "L";
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "character",
    "joining_type",
    "joining_group",
    "directionality",
    "category"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedJoiningType.txt
/**
 * DerivedJoiningType interface represents the derived joining types in Unicode.
 */
export interface DerivedJoiningType {
    /**
     * The derived joining type for a character.
     * This can be one of the following values: "D", "R", "AL", "U", "C", "T", "N".
     * Example: "D" for dual joining.
     */
    derived_joining_type: "D" | "R" | "AL" | "U" | "C" | "T" | "N";

    /**
     * The character code point in hexadecimal format.
     * Example: "0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The name of the character associated with the code point.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The script associated with the character.
     * Example: "Latin".
     */
    script: string;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "derived_joining_type",
    "code_point",
    "character_name",
    "script"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2023-07-28, 23:34:03 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2023 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use of the Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedName.txt
/**
 * This interface represents the derived names of Unicode characters based on their code points.
 */
export interface DerivedName {
  /**
   * The Unicode code point value or range of code point values.
   * Example: U+4E12 or U+2F89F
   */
  code_point: string;

  /**
   * The name property value or pattern derived from the code point.
   * Patterns may contain a '*' character which is replaced by the code point in hexadecimal format.
   * Example: "CJK UNIFIED IDEOGRAPH-*" becomes "CJK UNIFIED IDEOGRAPH-4E12" for U+4E12.
   */
  name_property: string;
}

export const DERIVED_NAME_FIELDS = [
  "code_point",
  "name_property"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedNumericType.txt
/**
 * DerivedNumericType interface represents the structure of the derived numeric types in the Unicode Character Database.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: "1.0"
     */
    numeric_value: string;
    
    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    numeric_type: "integer" | "decimal";
    
    /**
     * The source of the numeric value, indicating where it was derived from.
     * Example: "derived"
     */
    source: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source"
];
//#endregion

//#region data-files/v15.1.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as per Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character.
     * Example: "1.0"
     */
    numeric_value: string;
    
    /**
     * The numeric type of the character.
     * Example: "decimal"
     */
    numeric_type: "decimal" | "fraction" | "integer";
    
    /**
     * The character associated with the numeric value.
     * Example: "U+0031"
     */
    character: string;
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character"
];
//#endregion

//#region data-files/v15.1.0/emoji/emoji-data.txt
/**
 * Emoji Data for UTS #51
 * Used with Emoji Version 15.1 and subsequent minor revisions (if any)
 */
export interface EmojiData {
    /**
     * The code point(s) of the emoji, represented in hexadecimal format.
     * Example: "1F600"
     */
    codepoint: string;

    /**
     * The property of the emoji, indicating its category or type.
     * Example: "face"
     */
    property: string;

    /**
     * Comments or additional information about the emoji.
     * Example: "grinning face"
     */
    comments: string;
}

export const EMOJI_DATA_FIELDS = [
    "codepoint",
    "property",
    "comments"
];
//#endregion

//#region data-files/v15.1.0/emoji/emoji-variation-sequences.txt
/**
 * Emoji Variation Sequences for UTS #51
 * Used with Emoji Version 15.1 and subsequent minor revisions (if any)
 */
export interface emoji_variation_sequences {
    /**
     * The sequence of emoji characters.
     * Example: "👩‍❤️‍👨"
     */
    sequence: string;
    /**
     * The description of the emoji variation.
     * Example: "Woman and Man Holding Hands"
     */
    description: string;
    /**
     * The version of the emoji.
     * Example: "15.1"
     */
    version: string;
}

export const EMOJI_VARIATION_SEQUENCES_FIELDS = [
    "sequence",
    "description",
    "version"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character that represents the grapheme break property.
     * Example: "L" for Line Break
     */
    character: string;
    /**
     * The property value associated with the character.
     * Example: "CR" for Carriage Return
     */
    property_value: string;
    /**
     * The description of the property value.
     * Example: "A character that indicates a line break."
     */
    description: string;
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property_value",
    "description"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the default Grapheme Cluster Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/LineBreakTest.txt
/**
 * LineBreakTest interface represents the default line break test data.
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points, with optional comments.
     * Example: "U+0020 (# Space)"
     */
    line_break: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "line_break"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties defined in the SentenceBreakProperty Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The property value for a character, which can be one of the following:
     * - "CR" (Carriage Return)
     * - "LF" (Line Feed)
     * - "Control"
     * - "SG" (Surrogate)
     * - "WJ" (Word Joiner)
     * - "XX" (Unknown)
     * Example: "CR"
     */
    property_value: "CR" | "LF" | "Control" | "SG" | "WJ" | "XX";

    /**
     * The character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'
     */
    code_point: string;

    /**
     * The name of the character.
     * Example: "LATIN CAPITAL LETTER A"
     */
    character_name: string;

    /**
     * The Unicode version in which the character was introduced.
     * Example: "1.1"
     */
    unicode_version: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "property_value",
    "code_point",
    "character_name",
    "unicode_version"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points, with optional comments.
     * Example: "0041 0042 0043 (# Comment)"
     */
    string: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * 
     * This can be one of the following values:
     * - "normal": Default word breaking behavior.
     * - "break-all": Break words at any character.
     * - "keep-all": Do not break words.
     * 
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break"
];
//#endregion

//#region data-files/v15.1.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the WordBreakTest data structure.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

