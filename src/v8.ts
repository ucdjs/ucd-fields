// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 8

//#region data-files/v8.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of a character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name.
     * Example: 'TEH_MARBUTA'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v8.0.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+0041"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+005B" or "<none>"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, one of the following: "o" for Open, "c" for Close, or "n" for None.
     * Example: "o" for Open, "c" for Close, "n" for None
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v8.0.0/BidiCharacterTest.txt
/**
 * Interface representing the test data for the Unicode Bidirectional Algorithm conformance test.
 */
export interface BidiCharacterTest {
  /**
   * A sequence of hexadecimal code point values separated by space.
   * Example: "0041 0062 0631"
   */
  code_point_sequence: string;
  
  /**
   * A value representing the paragraph direction:
   * - 0 represents left-to-right
   * - 1 represents right-to-left
   * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
   * Example: 0
   */
  paragraph_direction: "0" | "1" | "2";
  
  /**
   * The resolved paragraph embedding level.
   * Example: 0
   */
  resolved_paragraph_embedding_level: number;
  
  /**
   * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
   * Example: "0 1 x 2"
   */
  resolved_levels: string;
  
  /**
   * A list of indices showing the resulting visual ordering from left to right;
   * characters with a resolved level of 'x' are skipped.
   * Example: "0 1 3"
   */
  visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
  "code_point_sequence",
  "paragraph_direction",
  "resolved_paragraph_embedding_level",
  "resolved_levels",
  "visual_ordering_indices"
];
//#endregion

//#region data-files/v8.0.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph property mappings in Unicode.
 */
export interface BidiMirroring {
    /**
     * The code point of the original character represented as a hexadecimal value.
     * Example: '0041' for 'A'.
     */
    original_code_point: string;

    /**
     * The code point of the mirrored character represented as a hexadecimal value.
     * Example: '0061' for 'a' as a mirror image of 'A'.
     */
    mirrored_code_point: string;

    /**
     * Indicates if the mapping is a best fit for mirroring.
     * Example: true if the mapping is considered the best fit.
     */
    best_fit: boolean;
}

export const BIDI_MIRRORING_FIELDS = [
    "original_code_point",
    "mirrored_code_point",
    "best_fit"
];
//#endregion

//#region data-files/v8.0.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest data, which provides a conformance test for UBA (Unicode Bidi Algorithm) implementations.
 */
export interface BidiTest {
    /**
     * A Levels line indicates that all following data lines have the same resulting ordering levels.
     * Format: @Levels: <levels>
     * Example: @Levels: 1 0
     */
    levels: string;

    /**
     * A Reorder line indicates that all following data lines have the same resulting reordering.
     * Format: @Reorder: <ordering>
     * Example: @Reorder: 1 0
     */
    reorder: string;

    /**
     * A data line contains an ordered list of BIDI property values and a hex bitset for paragraph levels.
     * Format: <input> ; <bitset>
     * Example: L LRE R R; 7
     */
    data: string;
}

export const BIDI_TEST_FIELDS = [
    "levels",
    "reorder",
    "data"
];
//#endregion

//#region data-files/v8.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Example: "0000" for the first block.
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Example: "007F" for the last code point in the Basic Latin block.
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin" for the first block.
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v8.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from radical numbers to characters in the CJK Radicals.
 */
export interface CJKRadicals {
    /**
     * The radical number, which matches the regular expression [1-9][0-9]{0,2}'?
     * Example: "1", "2'"
     */
    radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: "人"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v8.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character.
     * Format: Hexadecimal (e.g., U+0041 for 'A').
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Possible values: "C" (common), "F" (full), "S" (simple), "T" (Turkic special case).
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding.
     * Format: A string of characters, separated by spaces for full mappings.
     */
    mapping: string;

    /**
     * The name of the character.
     * This is a descriptive name for the character represented by the code point.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v8.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 * It includes characters that are excluded from composition.
 */
export interface CompositionExclusions {
    /**
     * The character that is excluded from composition.
     * Example: '\u00A0' for non-breaking space.
     */
    character: string;

    /**
     * The reason for exclusion from composition.
     * Example: 'Non-Spacing' or 'Control'.
     */
    reason: "Non-Spacing" | "Control" | "Format" | "Private Use";

    /**
     * The Unicode version in which this exclusion was defined.
     * Example: '6.0' for Unicode version 6.0.
     */
    unicode_version: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "character",
    "reason",
    "unicode_version"
];
//#endregion

//#region data-files/v8.0.0/DerivedAge.txt
/**
 * This interface represents the derived properties of Unicode characters, detailing when various code points were first assigned.
 */
export interface DerivedAge {
    /**
     * The date when the code point was assigned.
     * Format: YYYY-MM-DD HH:MM:SS GMT
     * Example: "2015-02-13 13:30:18 GMT"
     */
    assigned_date: string;
    
    /**
     * The version of Unicode in which the code point was assigned.
     * Format: Major.Minor
     * Example: "8.0.0"
     */
    unicode_version: string;
    
    /**
     * Indicates the type of code point assigned.
     * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";
}

export const DERIVED_AGE_FIELDS = [
    "assigned_date",
    "unicode_version",
    "code_point_type"
];
//#endregion

//#region data-files/v8.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the derived core properties from the Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character's general category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character's script.
     * Example: "Latin" for Latin script characters.
     */
    script: "Latin" | "Cyrillic" | "Arabic" | "Han" | "Greek" | "Hebrew" | "Thai" | "Devanagari" | "Bengali" | "Gurmukhi" | "Gujarati" | "Oriya" | "Tamil" | "Telugu" | "Kannada" | "Malayalam" | "Sinhala" | "Tibetan" | "Myanmar" | "Khmer" | "Lao" | "Vietnamese" | "Syriac" | "Armenian" | "Georgian" | "Cherokee" | "Ethiopic" | "Ogham" | "Runic" | "Deseret" | "Symbol";

    /**
     * The Unicode character's numeric value, if applicable.
     * Example: 1.0 for a character representing the number one.
     */
    numeric_value?: number;

    /**
     * The Unicode character's bidirectional category.
     * Example: "L" for left-to-right text.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The Unicode character's combining class.
     * Example: 0 for a base character.
     */
    combining_class: number;

    /**
     * The Unicode character's uppercase mapping.
     * Example: "A" for the uppercase version of "a".
     */
    uppercase_mapping?: string;

    /**
     * The Unicode character's lowercase mapping.
     * Example: "a" for the lowercase version of "A".
     */
    lowercase_mapping?: string;

    /**
     * The Unicode character's title case mapping.
     * Example: "A" for the title case version of "a".
     */
    titlecase_mapping?: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "general_category",
    "script",
    "numeric_value",
    "bidi_category",
    "combining_class",
    "uppercase_mapping",
    "lowercase_mapping",
    "titlecase_mapping"
];
//#endregion

//#region data-files/v8.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalization.
 */
export interface DerivedNormalizationProps {
    /**
     * The Unicode character that this normalization property applies to.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_character: string;

    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC".
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether the normalization is reversible.
     * Example: true if the normalization can be reversed, false otherwise.
     */
    is_reversible: boolean;

    /**
     * The description of the normalization property.
     * Example: "Normalization Form C".
     */
    description: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "unicode_character",
    "normalization_form",
    "is_reversible",
    "description"
];
//#endregion

//#region data-files/v8.0.0/EastAsianWidth.txt
/**
 * East_Asian_Width Property
 *
 * This interface represents the East Asian Width property as defined in the Unicode Character Database.
 *
 * The East Asian Width property can take one of the following values:
 * - "N": Not East Asian
 * - "A": Ambiguous
 * - "H": Half-width
 * - "W": Full-width
 * - "F": Full-width (for compatibility)
 * - "Na": Not applicable
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * For more information, see UAX #11: East Asian Width,
 * at http://www.unicode.org/reports/tr11/
 */
export interface EastAsianWidth {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+3400..U+4DBF
     */
    code_point: string;
    /**
     * East Asian Width property value.
     * Can be one of: "N", "A", "H", "W", "F", "Na"
     */
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width"
];
//#endregion

//#region data-files/v8.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
  /**
   * Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * DoCoMo Shift-JIS code, if available.
   * Example: "0xF8A0"
   */
  docomo_shift_jis_code: string | null;
  /**
   * KDDI Shift-JIS code, if available.
   * Example: "0xF8A1"
   */
  kddi_shift_jis_code: string | null;
  /**
   * SoftBank Shift-JIS code, if available.
   * Example: "0xF8A2"
   */
  softbank_shift_jis_code: string | null;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v8.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "HANGUL_SYLLABLE_TYPE_CODE"
     * Example: "L", "V", "T"
     */
    hangul_syllable_type_code: "L" | "V" | "T";

    /**
     * The description of the syllable type.
     * Format: "DESCRIPTION"
     * Example: "Leading consonant", "Vowel", "Trailing consonant"
     */
    description: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "hangul_syllable_type_code",
    "description"
];
//#endregion

//#region data-files/v8.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property, which is aimed at the specification of syllabic structure for Indic scripts.
 * It includes information about Unicode code points and their corresponding Indic positional categories.
 */
export interface IndicPositionalCategory {
    /**
     * Unicode code point value or range of code point values.
     * Format: A single code point (e.g., U+0905) or a range (e.g., U+0905..U+0906).
     */
    unicode_code_point: string;

    /**
     * Indic Positional Category property value.
     * This can be one of the following: "top", "bottom", "left", "right", "none".
     */
    indic_positional_category: "top" | "bottom" | "left" | "right" | "none";

    /**
     * Comment field showing the General_Category property value, Unicode character name(s), and code point count.
     * Format: Starts with a number sign '#', followed by General_Category, Unicode character name(s), and code point count in square brackets.
     */
    comment: string;
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_positional_category",
    "comment"
];
//#endregion

//#region data-files/v8.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property for Unicode characters.
 *
 * The Indic_Syllabic_Category property is aimed at analyzing and processing Indic scripts,
 * focusing on syllabic structure and segmentation rules. It categorizes characters based on
 * their role in forming syllables (aksaras) in various Indic scripts.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     *
     * Format: A single code point (e.g., U+0905) or a range (e.g., U+0905..U+0906).
     */
    code_point: string;

    /**
     * Indic Syllabic Category property value.
     *
     * This value indicates the category of the character in terms of its syllabic role.
     * Possible values include "Vowel", "Consonant", "Virama", etc.
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Virama" | "Nukta" | "Other";

    /**
     * General Category property value, Unicode character name(s), and code point count.
     *
     * This field provides additional information about the character, including its general
     * category (e.g., "Lu" for uppercase letter), name, and count in case of ranges.
     */
    comment: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "code_point",
    "indic_syllabic_category",
    "comment"
];
//#endregion

//#region data-files/v8.0.0/Jamo.txt
/**
 * Interface representing the Jamo Short Name property.
 */
export interface Jamo {
    /**
     * The code point of a conjoining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo Short Name as a one-, two-, or three-character ASCII string.
     * Example: 'G' or 'GG'
     */
    jamo_short_name: string;
}

export const JAMO_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v8.0.0/LineBreak.txt
/**
 * Line_Break Property
 *
 * This interface represents the Line_Break property as defined in the Unicode Character Database.
 * It includes both normative and informative data regarding line breaking properties of Unicode code points.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+3400..U+4DBF
     */
    code_point: string;

    /**
     * Line_Break property, which can be one of the following:
     * - Normative: "BK", "CR", "LF", "CM", "SG", "GL", "CB", "SP", "ZW", "NL", "WJ", "JL", "JV", "JT", "H2", "H3"
     * - Informative: "XX", "OP", "CL", "CP", "QU", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BB", "BA", "SA", "AI", "B2", "HL", "CJ", "RI"
     *
     * All code points not explicitly listed are given the value "XX".
     * Unassigned code points default to "ID" or "PR" based on specific ranges.
     */
    line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "CP" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2" | "HL" | "CJ" | "RI";
}

export const LINE_BREAK_FIELDS = ["code_point", "line_break_property"] as const;
//#endregion

//#region data-files/v8.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented in hexadecimal format.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a correction, control, alternate, figment, or abbreviation.
   * Example: "LATIN CAPITAL LETTER A".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", "abbreviation".
   * Comparisons of type labels should ignore case.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v8.0.0/NamedSequences.txt
/**
 * Unicode Named Character Sequences
 *
 * This interface represents the Unicode named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v8.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode standard.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v8.0.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections as defined in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a string in the format 'U+XXXX'.
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered into UnicodeData.txt, in n.n.n format.
     * Example: '8.0.0'
     */
    unicode_version: string;

    /**
     * Indicates the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v8.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points.
     * Example: "U+0041; U+00C1"
     */
    source: string;
    /**
     * The NFC normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfc: string;
    /**
     * The NFD normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfd: string;
    /**
     * The NFKC normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfkc: string;
    /**
     * The NFKD normalized code points.
     * Example: "U+0041; U+00C1"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v8.0.0/PropList.txt
/**
 * Unicode Character Database
 */
export interface PropList {
    /**
     * The date of the file creation in GMT format.
     * Example: "2015-05-16T17:50:38Z"
     */
    date: string;
    /**
     * The version of the PropList file.
     * Example: "8.0.0"
     */
    version: string;
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2015 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation link for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v8.0.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database (UCD).
 * The aliases can be used for XML formats of UCD data, regular-expression property tests,
 * and other programmatic textual descriptions of Unicode data.
 *
 * Each property has an abbreviated name, a long name, and may include additional aliases.
 *
 * Note: Property value names are not unique across properties, and some property names may
 * be the same as property value names. The combination of property value and property name
 * is unique.
 */
export interface PropertyAliases {
    /**
     * Abbreviated name for the property.
     * Example: "AL"
     */
    abbreviated_name: string;

    /**
     * Long name for the property.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property, if any.
     * Example: "Arabic_Letter"
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "abbreviated_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v8.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database (UCD).
 *
 * Each property value name consists of the following fields:
 * - `property`: The property for which the property value name is used (e.g., Bidi_Class).
 * - `abbreviated_name`: An abbreviated name for the property value (e.g., AL).
 * - `long_name`: A long descriptive name for the property value (e.g., Arabic Letter).
 *
 * In the case of the `ccc` property, there are four fields:
 * - `property`: The property for which the property value name is used.
 * - `numeric`: A numeric representation of the property value.
 * - `abbreviated_name`: An abbreviated name for the property value.
 * - `long_name`: A long descriptive name for the property value.
 *
 * Note that property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * For more information, see UTS #18: Unicode Regular Expressions.
 */
export interface PropertyValueAliases {
  property: string;
  abbreviated_name: string;
  long_name: string;
  numeric?: number;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name",
  "numeric"
];
//#endregion

//#region data-files/v8.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the mapping of script extensions to their associated code points.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values that indicate the scripts commonly used with the characters.
     * Example: "Latin", "Cyrillic"
     */
    script_extensions: "string"[];
    /**
     * The list of code points associated with the script extensions, listed in code point order.
     * Example: 0x0041 for 'A', 0x0042 for 'B'
     */
    code_points: number[];
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_extensions",
    "code_points"
];
//#endregion

//#region data-files/v8.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The script name, e.g., "Latin".
     */
    script_name: string;
    /**
     * The script code, e.g., "Latn".
     */
    script_code: string;
    /**
     * The range of Unicode code points for this script, e.g., "U+0000-U+007F".
     */
    code_point_range: string;
    /**
     * The associated language(s) for this script, e.g., "English, French".
     */
    languages: string;
}

export const SCRIPTS_FIELDS = [
    "script_name",
    "script_code",
    "code_point_range",
    "languages"
];
//#endregion

//#region data-files/v8.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior of casing.
     * This can include language IDs or casing contexts, separated by spaces.
     * Example: "en US" for English (United States)
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     * Example: "Uppercase mapping for Latin letters"
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v8.0.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "U+E0100 U+E0101"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "This character appears as a bold version."
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "This variant is only visible in certain fonts."
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v8.0.0/USourceData.txt
/**
 * This interface represents the basic data for U-source ideographs.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "C": Included in Extension C
     * - "D": Included in Extension D
     * - "E": Included in Extension E
     * - "F": Submitted for Extension F
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded
     * - "UNC-2013": Included in the UTC's 2013 "Urgently Needed Characters" proposal
     * - "V": Variant of an encoded character
     * - "W": Not to encode
     * - "X": No action taken
     */
    status: "C" | "D" | "E" | "F" | "N" | "U" | "UNC-2013" | "V" | "W" | "X";

    /**
     * A Unicode code point. If the status is "V", this specifies the encoded character for which this entry is a variant.
     * Otherwise, it specifies the encoded character for this entry.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s) of the ideograph.
     */
    sources: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The Unicode character code point.
     * Example: 0x0041 for 'A'
     */
    code_point: number;

    /**
     * The character itself represented as a string.
     * Example: 'A'
     */
    character: string;

    /**
     * The bidirectional category of the character.
     * Example: "L" for Left-to-Right
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "CS" | "B" | "S" | "WS" | "ON";

    /**
     * The mirrored character if applicable.
     * Example: 'A' mirrors to 'A'
     */
    mirrored_character?: string;

    /**
     * The directionality of the character.
     * Example: "LTR" for Left-to-Right
     */
    directionality: "LTR" | "RTL";
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "code_point",
    "character",
    "bidi_category",
    "mirrored_character",
    "directionality"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property.
     * Example: "True" or "False"
     */
    property_value: "True" | "False";
    
    /**
     * The description of the property.
     * Example: "Indicates whether the character is a control character in bidirectional text."
     */
    description: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "description"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2015-02-13T13:47:09Z"
     */
    date: string;
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2015 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation reference for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the Unicode Character Database derived decomposition type.
 */
export interface DerivedDecompositionType {
    /**
     * The character that is being decomposed.
     * Example: 'A'
     */
    character: string;

    /**
     * The decomposition mapping for the character.
     * Example: 'A' -> 'A' + '̵' (combining long stroke overlay)
     */
    decomposition: string;

    /**
     * The type of decomposition.
     * Example: "canonical" | "compat"
     */
    type: "canonical" | "compat";

    /**
     * The Unicode version in which this decomposition was introduced.
     * Example: '6.0'
     */
    introduced: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition",
    "type",
    "introduced"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+0041"
     */
    character: string;
    
    /**
     * The East Asian width property of the character.
     * Example: "Narrow"
     */
    east_asian_width: "Narrow" | "Wide" | "Ambiguous" | "Fullwidth" | "Halfwidth";
    
    /**
     * The Unicode code point of the character.
     * Example: "0041"
     */
    code_point: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width",
    "code_point"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1.0 for a character with a numeric value.
     */
    numeric_value?: number;

    /**
     * The name of the character in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The code point of the character in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code_point: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "numeric_value",
    "character_name",
    "code_point"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup data structure.
 */
export interface DerivedJoiningGroup {
    /**
     * The unique identifier for the joining group.
     * Format: string
     * Example: "U+0061"
     */
    id: string;

    /**
     * The name of the joining group.
     * Format: string
     * Example: "Left Joining"
     */
    name: string;

    /**
     * The type of joining group.
     * Union type: "Joining" | "Non-Joining"
     * Example: "Joining"
     */
    type: "Joining" | "Non-Joining";

    /**
     * The characters that belong to this joining group.
     * Format: array of strings
     * Example: ["U+0061", "U+0062"]
     */
    characters: string[];
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "id",
    "name",
    "type",
    "characters"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the DerivedJoiningType.
 */
export interface DerivedJoiningType {
    /**
     * The joining type of the character.
     * Can be one of the following: "U", "D", "C", "B", "S".
     * Example: "U" for Unicode.
     */
    joining_type: "U" | "D" | "C" | "B" | "S";

    /**
     * The character's code point in hexadecimal format.
     * Example: "0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The character's name in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The directionality of the character.
     * Can be one of the following: "L", "R", "AL", "EN", "AN".
     * Example: "L" for left-to-right.
     */
    directionality: "L" | "R" | "AL" | "EN" | "AN";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_type",
    "code_point",
    "character_name",
    "directionality"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the DerivedLineBreak data structure.
 */
export interface DerivedLineBreak {
    /**
     * The date and time when the data was created.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2015-02-14, 10:26:02 GMT"
     */
    date: string;

    /**
     * The source of the data, which includes copyright information.
     * Example: "Unicode Character Database"
     */
    source: string;

    /**
     * The copyright holder of the data.
     * Example: "Copyright (c) 1991-2015 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the data.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation reference for the data.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "source",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the DerivedNumericType.
 */
export interface DerivedNumericType {
    /**
     * The numeric value represented as a string.
     * Example: "123.45"
     */
    value: string;

    /**
     * The type of the numeric value, which can be one of the following: "integer", "float", "double".
     */
    type: "integer" | "float" | "double";

    /**
     * A flag indicating whether the value is valid.
     * Example: true or false
     */
    isValid: boolean;

    /**
     * The precision of the numeric value, represented as an integer.
     * Example: 2 for a value like 123.45
     */
    precision: number;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "value",
    "type",
    "isValid",
    "precision"
];
//#endregion

//#region data-files/v8.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value associated with a character.
     * Example: "1.0"
     */
    numeric_value: "string";
    
    /**
     * The numeric type of the value.
     * Example: "decimal"
     */
    numeric_type: "string";
    
    /**
     * The source of the numeric value.
     * Example: "derived"
     */
    source: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the GraphemeBreakProperty data.
 */
export interface GraphemeBreakProperty {
    /**
     * The Unicode character.
     * Example: 'a'
     */
    character: string;
    
    /**
     * The grapheme break property of the character.
     * Example: 'CR' (Carriage Return)
     */
    property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * GraphemeBreakTest
 *
 * This interface represents the default grapheme break test data.
 *
 * The format consists of a string containing hex Unicode code points, with an optional comment.
 *
 * Example:
 * "0041 0301 # LATIN CAPITAL LETTER A WITH ACUTE"
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * The format is a sequence of hex values separated by spaces.
     * Example: "0041 0301"
     */
    code_points: string;

    /**
     * An optional comment associated with the code points.
     * This is a string that may provide additional information.
     * Example: "# LATIN CAPITAL LETTER A WITH ACUTE"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/LineBreakTest.txt
/**
 * LineBreakTest
 *
 * This interface represents the default line break test as defined in the Unicode Character Database.
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Format: <string> (# <comment>)?
     * Example: "U+0041 U+0042 U+0043"
     */
    unicode_code_points: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "unicode_code_points"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties related to sentence breaking as defined in Unicode.
 */
export interface SentenceBreakProperty {
    /**
     * The character's general category, which can be one of the following: "L", "V", "T", "S", "W", "X", "Z", etc.
     * Example: "L" for letters, "S" for spaces.
     */
    general_category: string;

    /**
     * The specific sentence break property, which can be one of the following: "CR", "LF", "Control", "Sep", "Format", etc.
     * Example: "CR" for carriage return, "LF" for line feed.
     */
    sentence_break: string;

    /**
     * Indicates whether the character is a sentence terminator. This is a boolean value.
     * Example: true for characters like '.', '?', '!', etc.
     */
    is_terminator: boolean;

    /**
     * The Unicode code point of the character, represented as a hexadecimal string.
     * Example: "U+002E" for the period character.
     */
    code_point: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "general_category",
    "sentence_break",
    "is_terminator",
    "code_point"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Default Sentence Break Test
 *
 * This interface represents the structure of the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;

    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * 
     * This property can take one of the following values: "normal", "break-all", "keep-all", "break-word".
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all" | "break-word";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break"
];
//#endregion

//#region data-files/v8.0.0/auxiliary/WordBreakTest.txt
/**
 * WordBreakTest
 *
 * This interface represents the default word break test as defined in the Unicode Character Database.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

