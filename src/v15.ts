// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 15

//#region data-files/v15.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping, including the code point, schematic name, joining type, and joining group.
 */
export interface ArabicShaping {
    /**
     * The code point of a character in 4-digit hexadecimal form.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for the character, descriptive of its shape.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * The joining group of the character, based on its schematic name.
     * Example: 'TEH_MARBUTA'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v15.0.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+298D"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+298D" or "<none>"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, one of the following:
     *   - "o" Open
     *   - "c" Close
     *   - "n" None
     * Example: "o"
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v15.0.0/BidiCharacterTest.txt
/**
 * This interface represents a conformance test for implementations of the
 * Unicode Bidirectional Algorithm, specified in UAX #9.
 */
export interface BidiCharacterTest {
  /**
   * A sequence of hexadecimal code point values separated by space.
   * Example: "0041 0062 0631"
   */
  code_point_sequence: string;
  
  /**
   * A value representing the paragraph direction:
   * - 0 represents left-to-right
   * - 1 represents right-to-left
   * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
   * Example: 0
   */
  paragraph_direction: "0" | "1" | "2";
  
  /**
   * The resolved paragraph embedding level.
   * Example: 0
   */
  resolved_paragraph_embedding_level: number;
  
  /**
   * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
   * Example: "0 1 x 2"
   */
  resolved_levels: string;
  
  /**
   * A list of indices showing the resulting visual ordering from left to right;
   * characters with a resolved level of 'x' are skipped.
   * Example: "0 1 3"
   */
  visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
  "code_point_sequence",
  "paragraph_direction",
  "resolved_paragraph_embedding_level",
  "resolved_levels",
  "visual_ordering_indices"
];
//#endregion

//#region data-files/v15.0.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mapping of Unicode characters that have the Bidi_Mirrored=Yes property value.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value.
     * Example: '0041' for the character 'A'.
     */
    source_code_point: string;

    /**
     * The mirrored code point represented as a hexadecimal value.
     * Example: '0042' for the character 'B'.
     */
    mirrored_code_point: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source_code_point",
    "mirrored_code_point"
];
//#endregion

//#region data-files/v15.0.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test data.
 */
export interface BidiTest {
    /**
     * An ordered space-delimited list of numbers indicating the resulting levels
     * for each input property value. The UBA does not assign levels to certain values;
     * those are indicated with an 'x'.
     * 
     * Example:
     *   @Levels:    1 0
     *   @Levels:    x 1 x 2
     */
    levels: string;

    /**
     * An ordered space-delimited list of numbers indicating the resulting
     * visual ordering from left to right. The numbers are zero-based, and
     * are indexes into the input string. Items with a level of 'x' are skipped.
     * 
     * Example:
     *   @Reorder:    1 0
     *   @Reorder:    3 1
     */
    reorder: string;

    /**
     * An ordered list of BIDI property values.
     */
    input: string;

    /**
     * A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL.
     * Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
     * 
     * Example:
     *    L LRE R R; 7
     *    L LRE R AL; 7
     */
    bitset: string;
}

export const BIDI_TEST_FIELDS = ["levels", "reorder", "input", "bitset"];
//#endregion

//#region data-files/v15.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block, represented as a hexadecimal string.
     * Example: "0041"
     */
    start_code: string;

    /**
     * The ending code point of the block, represented as a hexadecimal string.
     * Example: "007A"
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v15.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}'?.
     * Example: "1", "2'"
     */
    cjk_radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: "人"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "cjk_radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v15.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code: string;

    /**
     * The status of the case folding mapping, which can be one of the following:
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that may cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: "C" for common mappings.
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: "0061" for 'a' or "0061 0301" for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: "LATIN CAPITAL LETTER A" for 'A'.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v15.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusions defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2022-05-03, 18:50:00 GMT"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2022 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_documentation_url: string;

    /**
     * A description of the file's purpose.
     * Example: "This file lists the characters for the Composition Exclusion Table."
     */
    description: string;

    /**
     * The URL for more information on the primary exclusion list table.
     * Example: "https://www.unicode.org/reports/tr15/#Primary_Exclusion_List_Table"
     */
    primary_exclusion_list_table_url: string;

    /**
     * A description of the derivation of composition exclusions.
     * Example: "For a full derivation of composition exclusions, see the derived property Full_Composition_Exclusion in DerivedNormalizationProps.txt"
     */
    derivation_description: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "unicode_character_database_documentation_url",
    "description",
    "primary_exclusion_list_table_url",
    "derivation_description"
];
//#endregion

//#region data-files/v15.0.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
    /**
     * The date when the code point was first assigned in Unicode.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2022-04-26, 23:14:23 GMT"
     */
    assigned_date: string;
    /**
     * The version of Unicode in which the code point was assigned.
     * Format: Major.Minor.Patch
     * Example: "15.0.0"
     */
    unicode_version: string;
    /**
     * Indicates whether the code point is a graphic, format, control, or private-use character.
     * Possible values: "graphic", "format", "control", "private-use"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use";
    /**
     * The Unicode code point assigned.
     * Format: U+XXXX where XXXX is a hexadecimal number.
     * Example: "U+0041"
     */
    code_point: string;
}

export const DERIVED_AGE_FIELDS = [
    "assigned_date",
    "unicode_version",
    "code_point_type",
    "code_point"
];
//#endregion

//#region data-files/v15.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties of the DerivedCoreProperties.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The character name as defined in the Unicode Character Database.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: string;

    /**
     * The script associated with the character.
     * Example: "Latin".
     */
    script: string;

    /**
     * The bidirectional category of the character.
     * Example: "L" for left-to-right.
     */
    bidirectional_category: string;

    /**
     * The combining class of the character.
     * Example: "0" for non-spacing marks.
     */
    combining_class: string;

    /**
     * The numeric value of the character if applicable.
     * Example: "1.0" for the character '1'.
     */
    numeric_value: string;

    /**
     * The uppercase mapping of the character.
     * Example: "A" for 'a'.
     */
    uppercase_mapping: string;

    /**
     * The lowercase mapping of the character.
     * Example: "a" for 'A'.
     */
    lowercase_mapping: string;

    /**
     * The titlecase mapping of the character.
     * Example: "A" for 'a'.
     */
    titlecase_mapping: string;

    /**
     * The canonical combining class of the character.
     * Example: "0" for non-spacing marks.
     */
    canonical_combining_class: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "code_point",
    "character_name",
    "general_category",
    "script",
    "bidirectional_category",
    "combining_class",
    "numeric_value",
    "uppercase_mapping",
    "lowercase_mapping",
    "titlecase_mapping",
    "canonical_combining_class"
];
//#endregion

//#region data-files/v15.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties for DerivedNormalization.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility decomposition.
     * Example: true
     */
    compatibility_decomposition: boolean;

    /**
     * The input string to be normalized.
     * Example: "Some input string"
     */
    input_string: string;

    /**
     * The output string after normalization.
     * Example: "Normalized output string"
     */
    output_string: string;

    /**
     * An optional boolean indicating whether to ignore whitespace.
     * Example: false
     */
    ignore_whitespace?: boolean;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "compatibility_decomposition",
    "input_string",
    "output_string",
    "ignore_whitespace"
];
//#endregion

//#region data-files/v15.0.0/EastAsianWidth.txt
/**
 * East Asian Width Property
 *
 * This interface represents the East Asian Width property for Unicode characters.
 *
 * The East Asian Width property consists of the following values:
 * - "A": Ambiguous
 * - "F": Full-width
 * - "H": Half-width
 * - "N": Neutral
 * - "Na": Narrow
 * - "W": Wide
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 * The unassigned code points in specific blocks default to "W".
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * For more information, see UAX #11: East Asian Width.
 */
export interface EastAsianWidth {
  /**
   * Unicode code point value or range of code point values.
   * Example: U+3400..U+4DBF
   */
  code_point: string;
  /**
   * East Asian Width property value.
   * Must be one of the following: "A", "F", "H", "N", "Na", "W"
   */
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "code_point",
  "east_asian_width"
];
//#endregion

//#region data-files/v15.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
  /**
   * Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * DoCoMo Shift-JIS code.
   * Example: "0xE63A"
   */
  docomo_shift_jis_code: string;
  /**
   * KDDI Shift-JIS code.
   * Example: "0xE63B"
   */
  kddi_shift_jis_code: string;
  /**
   * SoftBank Shift-JIS code.
   * Example: "0xE63C"
   */
  softbank_shift_jis_code: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v15.0.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and its corresponding unified ideograph.
 */
export interface EquivalentUnifiedIdeograph {
  /**
   * A code point or code point range represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: "4E00" or "4E00-4E0F"
   */
  source: string;

  /**
   * A code point represented as a variable-length hexadecimal value with 4 to 6 digits.
   * Example: "4E8C"
   */
  target: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
  "source",
  "target"
];
//#endregion

//#region data-files/v15.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "HANGUL_SYLLABLE_TYPE_CODE"
     * Example: "L"
     */
    hangul_syllable_type_code: "L" | "T" | "V" | "LV" | "LVT";

    /**
     * The description of the syllable type.
     * Format: "DESCRIPTION"
     * Example: "Consonant"
     */
    description: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "hangul_syllable_type_code",
    "description"
];
//#endregion

//#region data-files/v15.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic Positional Category property aimed at the specification of syllabic structure for Indic scripts.
 *
 * The property values indicate the positional category of characters in relation to a consonant core in Indic syllables.
 *
 * The following positional categories are defined:
 * - "Top": Characters that are positioned above the consonant core.
 * - "Bottom": Characters that are positioned below the consonant core.
 * - "Left": Characters that are positioned to the left of the consonant core.
 * - "Right": Characters that are positioned to the right of the consonant core.
 *
 * The format for each entry is as follows:
 * - Field 0: Unicode code point value or range of code point values (e.g., U+0BC1)
 * - Field 1: Indic_Positional_Category property value (e.g., "Top")
 *
 * Note that the placement of characters may vary based on typeface design, historic period, or local conventions.
 */
export interface IndicPositionalCategory {
  unicode_code_point: string;
  indic_positional_category: "Top" | "Bottom" | "Left" | "Right";
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
  "unicode_code_point",
  "indic_positional_category"
];
//#endregion

//#region data-files/v15.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The property specifies the syllabic structure and segmentation rules for Indic scripts.
 *
 * The following scripts are assessed as Indic in the structural sense:
 * Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
 * Chakma, Cham, Devanagari, Dives Akuru, Dogra, Grantha, Gujarati,
 * Gunjala Gondi, Gurmukhi, Hanunoo, Javanese, Kaithi, Kannada, Kawi,
 * Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Lepcha, Limbu,
 * Mahajani, Makasar, Malayalam, Marchen, Masaram Gondi, Meetei Mayek,
 * Modi, Multani, Myanmar, Nandinagari, Newa, New Tai Lue, Oriya,
 * Phags-pa, Rejang, Saurashtra, Sharada, Siddham, Sinhala, Soyombo,
 * Sundanese, Syloti Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham,
 * Tai Viet, Takri, Tamil, Telugu, Thai, Tibetan, Tirhuta, and
 * Zanabazar Square.
 *
 * All characters for all other scripts not in that list take the default value for this property.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: "U+0900" or "U+0900-U+0903"
     */
    code_point: string;
    /**
     * Indic Syllabic Category property value.
     * Possible values include: "Vowel", "Consonant", "Consonant_Dead", "Consonant_Cluster", etc.
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Consonant_Dead" | "Consonant_Cluster";
    /**
     * General Category property value, Unicode character name or names, and code point count in square brackets.
     * Example: "Lu; LATIN CAPITAL LETTER A [1]"
     */
    comment: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "code_point",
    "indic_syllabic_category",
    "comment"
];
//#endregion

//#region data-files/v15.0.0/Jamo.txt
/**
 * This interface defines the Jamo_Short_Name property.
 *
 * Each entry represents a conjoining jamo character that participates in the algorithmic determination of Hangul syllable character names.
 *
 * @property {"string"} code_point - The code point of a conjoining jamo character in 4-digit hexadecimal form (e.g., "1100").
 * @property {"string"} jamo_short_name - The Jamo_Short_Name as a one-, two-, or three-character ASCII string (e.g., "G", "GG", "N").
 */
export interface Jamo {
    "code_point": string;
    "jamo_short_name": string;
}

export const JAMO_FIELDS = ["code_point", "jamo_short_name"];
//#endregion

//#region data-files/v15.0.0/LineBreak.txt
/**
 * Line_Break Property
 *
 * This interface represents the line break properties of Unicode characters.
 *
 * The format consists of two fields:
 * - `code_point`: Unicode code point value or range of code point values.
 * - `line_break_property`: Line break property, which can be one of the following:
 *   - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
 *   - Tailorable: "AI", "AL", "B2", "BA", "BB", "CB", "CJ", "CL", "CP", "EB",
 *     "EM", "EX", "H2", "H3", "HL", "HY", "ID", "IN", "IS", "JL",
 *     "JT", "JV", "NS", "NU", "OP", "PO", "PR", "QU", "RI", "SA",
 *     "SG", "SY", "XX"
 *
 * All code points not explicitly listed are given the value "XX".
 * Unassigned code points in specific ranges default to "ID" or "PR" as specified.
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 */
export interface Line_Break {
  code_point: string;
  line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | "SG" | "SY" | "XX";
}

export const LINE_BREAK_FIELDS = [
  "code_point",
  "line_break_property"
];
//#endregion

//#region data-files/v15.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented as a hexadecimal string.
   * Example: 'U+0041' for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a correction, control, alternate, figment, or abbreviation.
   * Example: 'LATIN CAPITAL LETTER A' for the character 'A'.
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", "abbreviation".
   * Comparisons of type labels should ignore case.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v15.0.0/NamedSequences.txt
/**
 * Unicode Named Character Sequences
 *
 * This interface represents the named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequences {
  /**
   * The name of the sequence.
   * Example: "EXAMPLE NAME"
   */
  name: string;
  /**
   * The code point sequence for the USI, represented as a string of space-separated code points.
   * Example: "1000 1001 1002"
   */
  code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
  "name",
  "code_point_sequence"
];
//#endregion

//#region data-files/v15.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the named character sequences that are designated as provisional.
 * Each sequence consists of a name and a corresponding code point sequence.
 */
export interface NamedSequencesProv {
    /**
     * The name of the character sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the character sequence, delimited by spaces.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v15.0.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041").
     */
    unicode_code_point: string;
    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;
    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;
    /**
     * Version of Unicode for which the correction was entered, in n.n.n format (e.g., "15.0.0").
     */
    unicode_version: string;
    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v15.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points to be normalized.
     * Example: "U+0041; U+0061"
     */
    source: string;
    /**
     * The normalized form in NFC (Normalization Form C).
     * Example: "U+0041"
     */
    nfc: string;
    /**
     * The normalized form in NFD (Normalization Form D).
     * Example: "U+0041"
     */
    nfd: string;
    /**
     * The normalized form in NFKC (Normalization Form KC).
     * Example: "U+0041"
     */
    nfkc: string;
    /**
     * The normalized form in NFKD (Normalization Form KD).
     * Example: "U+0041"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v15.0.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database for Nushu sources.
 */
export interface NushuSources {
    /**
     * The date of the data file in ISO 8601 format.
     * Example: "2022-05-03T18:54:00Z"
     */
    date: string;
    /**
     * The copyright information for the data file.
     * Example: "© 2022 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date when the data was generated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2022-08-05, 22:17:16 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2022 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.0.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database.
 * The properties include short names, long names, and additional aliases for Unicode data.
 */
export interface PropertyAliases {
    /**
     * The short name for the property, typically an abbreviation or a duplicate of the long name.
     * Example: "AL"
     */
    short_name: string;

    /**
     * The long name for the property, typically the formal name used in documentation.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property, which may be useful in various contexts.
     * Example: "Arabic_Letter"
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "short_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v15.0.0/PropertyValueAliases.txt
/**
 * This interface represents the aliases for property values used in the Unicode Character Database (UCD).
 *
 * Each property value name consists of the following fields:
 * - property_name: The name of the property for which the value is used.
 * - short_name: A short name or abbreviation for the property value.
 * - long_name: The formal long name used in documentation about the property value.
 *
 * In the case of Canonical_Combining_Class (ccc), there are 4 fields:
 * - property_name: The name of the property for which the value is used.
 * - numeric: A numeric representation of the property value.
 * - short_name: A short name or abbreviation for the property value.
 * - long_name: The formal long name used in documentation about the property value.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyValueAliases {
  property_name: string;
  short_name: string;
  long_name: string;
  numeric?: number;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property_name",
  "short_name",
  "long_name",
  "numeric"
];
//#endregion

//#region data-files/v15.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the Unicode Script Extensions property,
 * which indicates which characters are commonly used with more than one script.
 * Each code point can have one or more associated script property values.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values.
     * The ordering of the values in that set is not material, but for stability in presentation
     * it is given here as alphabetical.
     * Example: "Latin", "Cyrillic"
     */
    script_property_values: "string"[];

    /**
     * A list of code points associated with the Script_Extensions value,
     * listed in code point order.
     * Example: [0x0041, 0x0042, 0x0043]
     */
    code_points: number[];
}

export const SCRIPT_EXTENSIONS_FIELDS = ["script_property_values", "code_points"];
//#endregion

//#region data-files/v15.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The script name, e.g., "Latin".
     */
    script_name: string;
    /**
     * The script code, e.g., "Latn".
     */
    script_code: string;
    /**
     * The range of Unicode code points for this script, e.g., "U+0000-U+007F".
     */
    code_point_range: string;
    /**
     * The direction of the script, e.g., "LTR" or "RTL".
     */
    direction: "LTR" | "RTL";
    /**
     * Indicates if the script is a right-to-left script, e.g., true or false.
     */
    is_rtl: boolean;
}

export const SCRIPTS_FIELDS = [
    "script_name",
    "script_code",
    "code_point_range",
    "direction",
    "is_rtl"
];
//#endregion

//#region data-files/v15.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal behavior of casing.
     * Example: "en-US Not_uppercase" indicates the condition for English (US) and not uppercase.
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v15.0.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "[0;31m"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Red text"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Terminal"
   */
  shaping_environment?: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environment"
];
//#endregion

//#region data-files/v15.0.0/TangutSources.txt
/**
 * This interface represents the data structure for TangutSources.
 */
export interface TangutSources {
    /**
     * The name of the file.
     */
    file_name: string;
    /**
     * The date of the file creation or modification.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2022-05-03, 18:55:00 GMT"
     */
    date: string;
    /**
     * The copyright information.
     */
    copyright: string;
    /**
     * The trademark information.
     */
    trademark: string;
    /**
     * The documentation URL for terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_url: string;
    /**
     * Indicates if the file is normative.
     */
    normative: boolean;
}

export const TANGUT_SOURCES_FIELDS = [
    "file_name",
    "date",
    "copyright",
    "trademark",
    "terms_of_use_url",
    "unicode_character_database_url",
    "normative"
];
//#endregion

//#region data-files/v15.0.0/USourceData.txt
/**
 * Interface representing the U-source ideographs data.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "ExtA": Encoded in Extension A
     * - "ExtB": Encoded in Extension B
     * - "ExtC": Encoded in Extension C
     * - "Comp": Encoded as a compatibility ideograph
     * - "ExtD": Encoded in Extension D
     * - "ExtE": Encoded in Extension E
     * - "ExtF": Encoded in Extension F
     * - "ExtG": Encoded in Extension G
     * - "ExtH": Encoded in Extension H
     * - "N": Planned to be submitted for a future extension
     * - "URO": Encoded in the URO or as a unified ideograph in the CJK Compatibility Ideographs block
     * - "UK-2015": Submitted by the UK for IRG Working Set 2015
     * - "V": Variant of an encoded character
     * - "W": Not suitable for encoding as a CJK Unified Ideograph
     * - "WS-2017": Submitted by the UTC for IRG Working Set 2017
     * - "WS-2021": Submitted by the UTC for IRG Working Set 2021
     * - "X": No action taken
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: string;

    /**
     * A Unicode code point. The code point specifies the encoded character for this entry, if any.
     * Otherwise, it specifies the encoded character to which this entry is related, generally as a variant.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s) of the ideograph.
     */
    sources: string;

    /**
     * General comments regarding the ideograph.
     */
    general_comments: string;

    /**
     * Total strokes in the ideograph.
     */
    total_strokes: number;

    /**
     * First residual stroke.
     */
    first_residual_stroke: number;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources",
    "general_comments",
    "total_strokes",
    "first_residual_stroke"
];
//#endregion

//#region data-files/v15.0.0/VerticalOrientation.txt
/**
 * VerticalOrientation property defines the orientation of Unicode characters in vertical text layout.
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     * Example: U+0041 for 'A' or U+0030..U+0039 for digits 0-9.
     */
    code_point: string;

    /**
     * Vertical orientation property value.
     * Can be one of the following:
     * - "U": Upright, the same orientation as in the code charts.
     * - "R": Rotated 90 degrees clockwise compared to the code charts.
     * - "Tu": Transformed typographically, with fallback to Upright.
     * - "Tr": Transformed typographically, with fallback to Rotated.
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2022-08-05T17:39:24Z"
     */
    date: string;
    /**
     * The copyright information for the document.
     * Example: "© 2022 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    unicode_character_database_documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "unicode_character_database_documentation_url"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;

    /**
     * The value of the property.
     * Example: "true" or "false"
     */
    property_value: "true" | "false";

    /**
     * The version of Unicode in which this property was defined.
     * Example: "15.0.0"
     */
    unicode_version: string;

    /**
     * A description of the property.
     * Example: "Indicates whether the character is a bidirectional control character."
     */
    description: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "unicode_version",
    "description"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the DerivedCombiningClass.
 */
export interface DerivedCombiningClass {
    /**
     * The Unicode code point of the character.
     * Format: U+XXXX, where XXXX is a hexadecimal number.
     */
    code_point: string;

    /**
     * The canonical name of the character.
     * Example: "LATIN CAPITAL LETTER A"
     */
    canonical_name: string;

    /**
     * The combining class of the character.
     * Format: A number representing the combining class.
     * Example: 230 (for a character that is a non-spacing mark)
     */
    combining_class: number;

    /**
     * The bidirectional category of the character.
     * Example: "L" for Left-to-Right, "R" for Right-to-Left
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "CS" | "ET" | "AN" | "BN" | "NSM" | "B" | "S" | "WS";

    /**
     * The character's decomposition mapping.
     * Example: "0041" for the character 'A'
     */
    decomposition: string;

    /**
     * The character's numeric value.
     * Format: A number representing the numeric value.
     * Example: 1.0 for the character '1'
     */
    numeric_value: number;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "code_point",
    "canonical_name",
    "combining_class",
    "bidi_category",
    "decomposition",
    "numeric_value"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedDecompositionType.txt
/**
 * DerivedDecompositionType
 *
 * This interface represents the derived decomposition type as defined in the Unicode Character Database.
 */
export interface DerivedDecompositionType {
    /**
     * The decomposition mapping for the character.
     * Format: "<decomposition mapping>"
     * Example: "<decomposition mapping>"
     */
    decomposition_mapping: string;

    /**
     * The character that this decomposition maps to.
     * Format: "<character>"
     * Example: "A"
     */
    character: string;

    /**
     * The type of decomposition.
     * Format: "<type>"
     * Example: "canonical"
     */
    type: "canonical" | "compat";
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "decomposition_mapping",
    "character",
    "type"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the Derived East Asian Width data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character or character range.
     * Example: "U+0041"
     */
    character: string;
    /**
     * The width category of the character.
     * Example: "Narrow"
     */
    width: "Narrow" | "Wide" | "Ambiguous" | "Fullwidth";
    /**
     * The source of the width information.
     * Example: "Unicode 15.0"
     */
    source: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "width",
    "source"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2022-04-26, 23:14:35 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2022 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup data structure.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode character or character sequence that this group represents.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The joining type of the character, which can be one of the following:
     * - "U" for Unicode
     * - "C" for Common
     * - "L" for Left
     * - "R" for Right
     * Example: "U"
     */
    joining_type: "U" | "C" | "L" | "R";

    /**
     * The direction of the joining, which can be either:
     * - "L" for Left-to-Right
     * - "R" for Right-to-Left
     * Example: "L"
     */
    joining_direction: "L" | "R";

    /**
     * A description of the joining group.
     * Example: "This group includes characters that join to the left."
     */
    description: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "character",
    "joining_type",
    "joining_direction",
    "description"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedJoiningType.txt
/**
 * DerivedJoiningType
 *
 * This interface represents the derived joining type of a character in the Unicode standard.
 *
 * @property {"U+0000" | "U+0001" | "U+0002"} derived_joining_type - The derived joining type of the character.
 *   - Example: "U+0000" indicates a specific joining type.
 * @property {string} description - A description of the derived joining type.
 *   - Example: "Left joining" describes the joining behavior of the character.
 */
export interface DerivedJoiningType {
  derived_joining_type: "U+0000" | "U+0001" | "U+0002";
  description: string;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
  "derived_joining_type",
  "description"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2022-08-05T17:39:33Z"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2022 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "https://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "https://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedName.txt
/**
 * This interface represents the derived name values from the Unicode Character Database.
 */
export interface DerivedName {
  /**
   * Unicode code point value or range of code point values.
   * Example: U+4E12 or U+2F89F
   */
  code_point: string;

  /**
   * Name property value or pattern.
   * Patterns may contain a '*' character which is replaced by the code point in hex.
   * Example: "CJK UNIFIED IDEOGRAPH-*" becomes "CJK UNIFIED IDEOGRAPH-4E12" for U+4E12.
   */
  name_property: string;
}

export const DERIVED_NAME_FIELDS = [
  "code_point",
  "name_property"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric type.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: 1.0, 2.5
     */
    value: number;

    /**
     * The type of the numeric value.
     * Example: "integer", "decimal"
     */
    type: "integer" | "decimal";

    /**
     * The character associated with the numeric value.
     * Example: 'A', 'B'
     */
    character: string;

    /**
     * The script associated with the character.
     * Example: "Latin", "Cyrillic"
     */
    script: string;

    /**
     * The version of the Unicode standard that this data is associated with.
     * Example: "15.0.0"
     */
    version: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "value",
    "type",
    "character",
    "script",
    "version"
];
//#endregion

//#region data-files/v15.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character as a decimal number.
     * Example: "15.0"
     */
    numeric_value: string;
    
    /**
     * The numeric type of the character, which can be one of the following:
     * - "integer"
     * - "decimal"
     * Example: "decimal"
     */
    numeric_type: "integer" | "decimal";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type"
];
//#endregion

//#region data-files/v15.0.0/emoji/emoji-data.txt
/**
 * Emoji Data for UTS #51
 * 
 * This interface represents the data structure for emoji characters and their properties as defined in the Unicode Emoji Data.
 */
export interface emoji_data {
  /**
   * The code point(s) of the emoji character(s).
   * Format: U+XXXX (e.g., U+1F600)
   */
  codepoint: string;
  
  /**
   * The property of the emoji character, which can include various attributes such as 'base', 'modifier', etc.
   * Example values: "base", "modifier"
   */
  property: string;
  
  /**
   * Comments or additional information about the emoji character.
   * This may include usage notes or descriptions.
   */
  comments: string;
}

export const EMOJI_DATA_FIELDS = [
  "codepoint",
  "property",
  "comments"
];
//#endregion

//#region data-files/v15.0.0/emoji/emoji-variation-sequences.txt
/**
 * Emoji Variation Sequences for UTS #51
 * Used with Emoji Version 15.0 and subsequent minor revisions (if any)
 */
export interface emoji_variation_sequences {
    /**
     * The sequence of emoji characters.
     * Example: "👨‍👩‍👧"
     */
    sequence: string;
    /**
     * The description of the emoji variation sequence.
     * Example: "Family: Man, Woman, Girl"
     */
    description: string;
    /**
     * The version of the emoji that this sequence is associated with.
     * Example: "15.0"
     */
    version: string;
}

export const EMOJI_VARIATION_SEQUENCES_FIELDS = [
    "sequence",
    "description",
    "version"
];
//#endregion

//#region data-files/v15.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The grapheme break property value.
     * 
     * This value can be one of the following: "CR", "LF", "Control", "Extend", "Regional_Indicator", "Prepend", "SpacingMark", "L", "V", "T", "LV", "LVT", "Other".
     * 
     * Example: "L" indicates a letter.
     */
    grapheme_break_property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT" | "Other";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "grapheme_break_property"
];
//#endregion

//#region data-files/v15.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * GraphemeBreakTest interface representing the default grapheme cluster break test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points, with optional comments.
     * Example: "U+0041 U+030A (# Combining Ring Above)"
     */
    grapheme_cluster: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "grapheme_cluster"
];
//#endregion

//#region data-files/v15.0.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 *
 * This interface represents the default line break test format.
 *
 * The format consists of a string that may contain hex Unicode code points,
 * optionally followed by a comment in parentheses.
 *
 * Example:
 * "0041 0042 0043 (# Example comment)"
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points, with an optional comment.
     * The comment is enclosed in parentheses and starts with a hash symbol.
     *
     * Example: "0041 0042 0043 (# Example comment)"
     */
    line_break: string;
}

export const LINE_BREAK_TEST_FIELDS = ["line_break"];
//#endregion

//#region data-files/v15.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties of SentenceBreak.
 */
export interface SentenceBreakProperty {
    /**
     * The code point of the character.
     * Example: 0x0020 for SPACE.
     */
    code_point: number;
    
    /**
     * The category of the character.
     * Example: "SPACE", "PUNCTUATION".
     */
    category: "SPACE" | "PUNCTUATION" | "LINE_FEED" | "OTHER";
    
    /**
     * The specific property value for the character.
     * Example: "CR" for carriage return.
     */
    property_value: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "code_point",
    "category",
    "property_value"
];
//#endregion

//#region data-files/v15.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Default Sentence Break Test
 *
 * This interface represents the structure of the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points, with optional comments.
     * Example: "0041 (# A)"
     */
    string: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

//#region data-files/v15.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty.
 */
export interface WordBreakProperty {
    /**
     * The word break property value.
     * 
     * This property can take one of the following values: "normal", "break-all", "keep-all", "break-word".
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all" | "break-word";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break"
];
//#endregion

//#region data-files/v15.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the WordBreakTest data structure.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points, possibly followed by a comment.
     * Example: "0041 (# A)"
     */
    string: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

