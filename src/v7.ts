// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 7

//#region data-files/v7.0.0/ArabicShaping.txt
/**
 * This interface represents the properties of Arabic shaping as defined in the Unicode Character Database.
 */
export interface ArabicShaping {
    /**
     * The code point, in 4-digit hexadecimal form, of an Arabic, Syriac, N'Ko, Mandaic, Mongolian,
     * Phags-pa, Manichaean, Psalter Pahlavi, or other character.
     * Example: '0629'
     */
    code_point: string;

    /**
     * A short schematic name for that character, descriptive of the shape.
     * This is considered a comment and does not constitute a formal property value.
     * Example: 'TEH MARBUTA'
     */
    schematic_name: string;

    /**
     * Defines the joining type of the character.
     * Possible values include:
     * - "R" for Right_Joining
     * - "L" for Left_Joining
     * - "D" for Dual_Joining
     * - "C" for Join_Causing
     * - "U" for Non_Joining
     * - "T" for Transparent
     * Example: 'R'
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * Defines the joining group of the character, based schematically on character names.
     * The formal Joining_Group property value consists of name parts joined by underscores.
     * Example: 'Teh_Marbuta'
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v7.0.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, a code point value or <none>.
     * Example: "U+005B" for the character '[' or "<none>" if no paired bracket exists.
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, which can be one of the following:
     * - "o" for Open
     * - "c" for Close
     * - "n" for None
     * Example: "o" for an opening bracket and "c" for a closing bracket.
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v7.0.0/BidiCharacterTest.txt
/**
 * Interface representing the test data for the Unicode Bidirectional Algorithm conformance test.
 */
export interface BidiCharacterTest {
  /**
   * A sequence of hexadecimal code point values separated by space.
   * Example: "0041 0062 0631"
   */
  code_point_sequence: string;
  
  /**
   * A value representing the paragraph direction:
   * - 0 represents left-to-right
   * - 1 represents right-to-left
   * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
   * Example: 0
   */
  paragraph_direction: "0" | "1" | "2";
  
  /**
   * The resolved paragraph embedding level.
   * Example: 0
   */
  resolved_paragraph_embedding_level: number;
  
  /**
   * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
   * Example: "0 1 x 2"
   */
  resolved_levels: string;
  
  /**
   * A list of indices showing the resulting visual ordering from left to right; characters with a resolved level of 'x' are skipped.
   * Example: "0 1 3"
   */
  visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
  "code_point_sequence",
  "paragraph_direction",
  "resolved_paragraph_embedding_level",
  "resolved_levels",
  "visual_ordering_indices"
];
//#endregion

//#region data-files/v7.0.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph property mappings for Unicode characters.
 */
export interface BidiMirroring {
    /**
     * The code point of the original character represented as a hexadecimal value.
     * Example: '0041' for 'A'.
     */
    original_code_point: string;

    /**
     * The code point of the mirrored character represented as a hexadecimal value.
     * Example: '0061' for 'a' as a mirror image of 'A'.
     */
    mirrored_code_point: string;

    /**
     * Indicates if the mapping is a best fit for mirroring.
     * Example: 'BEST FIT' if the mirrored character is an approximation.
     */
    comment?: "BEST FIT";
}

export const BIDI_MIRRORING_FIELDS = [
    "original_code_point",
    "mirrored_code_point",
    "comment"
];
//#endregion

//#region data-files/v7.0.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest data, which provides a conformance test for UBA (Unicode Bidi Algorithm) implementations.
 */
export interface BidiTest {
    /**
     * A Levels line indicates that all following data lines have the same resulting ordering levels.
     * Format: @Levels: <levels>
     * Example: @Levels: 1 0
     */
    levels: string;

    /**
     * A Reorder line indicates that all following data lines have the same resulting reordering.
     * Format: @Reorder: <ordering>
     * Example: @Reorder: 1 0
     */
    reorder: string;

    /**
     * A data line contains an ordered list of BIDI property values and a hex bitset for paragraph levels.
     * Format: <input> ; <bitset>
     * Example: L LRE R R; 7
     */
    data: string;
}

export const BIDI_TEST_FIELDS = [
    "levels",
    "reorder",
    "data"
];
//#endregion

//#region data-files/v7.0.0/Blocks.txt
/**
 * Interface representing Unicode character blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Example: 0x0000
     */
    start_code: number;

    /**
     * The ending code point of the block.
     * Example: 0x007F
     */
    end_code: number;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v7.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from radical numbers to characters in the CJK Radicals.
 */
export interface CJKRadicals {
    /**
     * The radical number, which matches the regular expression [1-9][0-9]{0,2}'?
     * Example: "1", "2'"
     */
    radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻"
     */
    cjk_radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical.
     * Example: "人"
     */
    cjk_unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "radical_number",
    "cjk_radical_character",
    "cjk_unified_ideograph"
];
//#endregion

//#region data-files/v7.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character.
     * Example: '0041' for 'A'
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following:
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters where different from F.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: 'C', 'F', 'S', 'T'
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding.
     * This can be a single character or multiple characters separated by spaces.
     * Example: '0061' for 'a', '0061 0301' for 'a' with an accent.
     */
    mapping: string;

    /**
     * The name of the character.
     * Example: 'LATIN CAPITAL LETTER A'
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v7.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 * It includes characters that are excluded from composition.
 */
export interface CompositionExclusions {
    /**
     * The character that is excluded from composition.
     * Example: '\u002D' for hyphen.
     */
    excluded_character: string;

    /**
     * The reason for exclusion from composition.
     * Example: 'General exclusion' or 'Specific context'.
     */
    exclusion_reason: string;

    /**
     * The Unicode version in which the exclusion was defined.
     * Example: '6.0' or '7.0'.
     */
    unicode_version: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "excluded_character",
    "exclusion_reason",
    "unicode_version"
];
//#endregion

//#region data-files/v7.0.0/DerivedAge.txt
/**
 * This interface represents the derived properties of Unicode characters, detailing when various code points were first assigned in Unicode.
 */
export interface DerivedAge {
    /**
     * The date when the code point was assigned.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2014-05-28, 18:42:04 GMT"
     */
    assigned_date: string;

    /**
     * The version of Unicode in which the code point was assigned.
     * Format: Major.Minor.Patch
     * Example: "7.0.0"
     */
    unicode_version: string;

    /**
     * Indicates the type of code point assigned.
     * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

    /**
     * Additional notes regarding the assignment of the code point.
     * Example: "The term 'assigned' means that a previously reserved code point was assigned to be a character."
     */
    notes: string;
}

export const DERIVED_AGE_FIELDS = [
    "assigned_date",
    "unicode_version",
    "code_point_type",
    "notes"
];
//#endregion

//#region data-files/v7.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the derived core properties from the Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character's general category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character's script.
     * Example: "Latn" for Latin script.
     */
    script: "Latn" | "Cyrl" | "Grek" | "Hani" | "Arab" | "Hebr" | "Deva" | "Taml" | "Thai" | "Beng" | "Gujr" | "Knda" | "Mlym" | "Telu" | "Tibt" | "Brah" | "Sidd" | "Syrc" | "Cher" | "Cans" | "Cree" | "Ogam" | "Runr" | "Yiii" | "Hira" | "Kana" | "Bopo" | "Hang" | "Jpan" | "Kore" | "Tglg" | "Tibt";

    /**
     * The Unicode character's combining class.
     * Example: 0 for base characters.
     */
    combining_class: number;

    /**
     * The Unicode character's bidirectional category.
     * Example: "L" for left-to-right.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The Unicode character's numeric value.
     * Example: 1.0 for the character '1'.
     */
    numeric_value: number | null;

    /**
     * The Unicode character's uppercase mapping.
     * Example: 'A' for 'a'.
     */
    uppercase_mapping: string | null;

    /**
     * The Unicode character's lowercase mapping.
     * Example: 'a' for 'A'.
     */
    lowercase_mapping: string | null;

    /**
     * The Unicode character's titlecase mapping.
     * Example: 'A' for 'a'.
     */
    titlecase_mapping: string | null;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "general_category",
    "script",
    "combining_class",
    "bidi_category",
    "numeric_value",
    "uppercase_mapping",
    "lowercase_mapping",
    "titlecase_mapping"
];
//#endregion

//#region data-files/v7.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the derived normalization properties.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether the normalization is case-folded.
     * Example: true
     */
    case_folded: boolean;

    /**
     * The version of the Unicode standard used for normalization.
     * Example: "6.3.0"
     */
    unicode_version: string;

    /**
     * The date when the normalization was last updated.
     * Format: YYYY-MM-DD
     * Example: "2013-12-03"
     */
    last_updated: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "case_folded",
    "unicode_version",
    "last_updated"
];
//#endregion

//#region data-files/v7.0.0/EastAsianWidth.txt
/**
 * East_Asian_Width Property
 *
 * This interface represents the East Asian Width property as defined in the Unicode Character Database.
 *
 * The East Asian Width property can take one of the following values:
 * - "N": Not East Asian
 * - "A": Ambiguous
 * - "H": Halfwidth
 * - "W": Fullwidth
 * - "F": Fullwidth (for compatibility)
 * - "Na": Not applicable
 *
 * All code points not explicitly listed are given the value "N".
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 */
export interface EastAsianWidth {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+3400..U+4DBF
     */
    code_point: string;
    /**
     * East Asian Width property value.
     * Must be one of: "N", "A", "H", "W", "F", "Na"
     */
    east_asian_width: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width"
];
//#endregion

//#region data-files/v7.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
  /**
   * Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * DoCoMo Shift-JIS code.
   * Example: "0xE63A"
   */
  docomo_shift_jis_code: string;
  /**
   * KDDI Shift-JIS code.
   * Example: "0xE63B"
   */
  kddi_shift_jis_code: string;
  /**
   * SoftBank Shift-JIS code.
   * Example: "0xE63C"
   */
  softbank_shift_jis_code: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v7.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "A", "B", etc.
     */
    code: string;

    /**
     * The description of the syllable type.
     * Example: "Consonant + Vowel"
     */
    description: string;

    /**
     * The number of characters in the syllable type.
     * Example: 2 for "가"
     */
    character_count: number;

    /**
     * Indicates if the syllable type is a complex syllable.
     * Format: true or false
     */
    is_complex: boolean;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "code",
    "description",
    "character_count",
    "is_complex"
];
//#endregion

//#region data-files/v7.0.0/IndicMatraCategory.txt
/**
 * This interface defines the Indic Matra Category property, which is aimed at the specification of syllabic structure for Indic scripts.
 *
 * The property is used to categorize dependent vowels and viramas in relation to consonants in Indic syllables.
 *
 * The following scripts are assessed for this property: Balinese, Batak, Bengali, Brahmi, Buginese, Buhid, Chakma, Cham,
 * Devanagari, Grantha, Gujarati, Gurmukhi, Hanunoo, Javanese, Kaithi,
 * Kannada, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Lepcha, Limbu,
 * Malayalam, Meetei Mayek, Modi, Myanmar, New Tai Lue, Oriya, Rejang,
 * Saurashtra, Sharada, Siddham, Sinhala, Sundanese, Syloti Nagri,
 * Tagalog, Tagbanwa, Tai Tham, Tai Viet, Takri, Tamil, Telugu, Thai,
 * Tibetan, and Tirhuta.
 */
export interface IndicMatraCategory {
    /**
     * Unicode code point value or range of code point values.
     * Format: A single code point (e.g., U+0900) or a range (e.g., U+0900-U+090F).
     */
    unicode_code_point: string;

    /**
     * Indic Matra Category property value.
     * This can be a string representing the category of the matra (e.g., "dependent vowel", "virama").
     */
    indic_matra_category: "dependent vowel" | "virama";

    /**
     * Comment field that includes the General_Category property value, Unicode character name(s),
     * and, in lines with ranges of code points, the code point count in square brackets.
     * Example: "Cc; U+0900; [1]"
     */
    comment: string;
}

export const INDIC_MATRA_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_matra_category",
    "comment"
];
//#endregion

//#region data-files/v7.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property for Unicode characters.
 *
 * The properties are as follows:
 *
 * - `unicode_code_point`: A string representing the Unicode code point value or range of code point values.
 *   Example: "U+0900" or "U+0900-U+090F"
 * - `indic_syllabic_category`: A string representing the Indic Syllabic Category property value.
 *   Example: "Vowel", "Consonant"
 *
 * The characters assessed as Indic in the structural sense include scripts such as:
 * Balinese, Batak, Bengali, Brahmi, Buginese, Buhid, Chakma, Cham,
 * Devanagari, Grantha, Gujarati, Gurmukhi, Hanunoo, Javanese, Kaithi,
 * Kannada, Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Lepcha,
 * Limbu, Mahajani, Malayalam, Meetei Mayek, Modi, Myanmar, New Tai Lue,
 * Oriya, Phags-pa, Rejang, Saurashtra, Sharada, Siddham, Sinhala,
 * Sundanese, Syloti Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham, Tai Viet,
 * Takri, Tamil, Telugu, Thai, Tibetan, and Tirhuta.
 */
export interface IndicSyllabicCategory {
    unicode_code_point: string;
    indic_syllabic_category: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category"
];
//#endregion

//#region data-files/v7.0.0/Jamo.txt
/**
 * This interface defines the Jamo_Short_Name property.
 *
 * Each entry represents a conjoining jamo character that participates in the algorithmic determination of Hangul syllable character names.
 *
 * @property {"string"} code_point - The code point of a conjoining jamo character in 4-digit hexadecimal form (e.g., "1100").
 * @property {"string"} jamo_short_name - The Jamo_Short_Name as a one-, two-, or three-character ASCII string (e.g., "G", "GG", "N").
 */
export interface Jamo {
    code_point: string;
    jamo_short_name: string;
}

export const JAMO_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v7.0.0/LineBreak.txt
/**
 * This interface represents the Line Break property data as defined in the Unicode Character Database.
 */
export interface LineBreak {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+3400..U+4DBF
     */
    code_point: string;
    /**
     * Line Break property, which can be one of the following:
     * - Normative: "BK", "CR", "LF", "CM", "SG", "GL", "CB", "SP", "ZW", "NL", "WJ", "JL", "JV", "JT", "H2", "H3"
     * - Informative: "XX", "OP", "CL", "CP", "QU", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BB", "BA", "SA", "AI", "B2", "HL", "CJ", "RI"
     * Example: "BK"
     */
    line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "CP" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2" | "HL" | "CJ" | "RI";
}

export const LINE_BREAK_FIELDS = [
    "code_point",
    "line_break_property"
];
//#endregion

//#region data-files/v7.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented in hexadecimal format.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias for the Unicode character, which can be a correction, control, alternate, figment, or abbreviation.
   * Example: "control" for control characters.
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", "abbreviation".
   * Comparisons of type labels should ignore case.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v7.0.0/NamedSequences.txt
/**
 * This interface represents Unicode Named Character Sequences.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * 
     * Example: "EXAMPLE NAME"
     */
    name: string;
    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * 
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v7.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode standard.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v7.0.0/NormalizationCorrections.txt
/**
 * Interface representing normalization corrections in Unicode.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string.
     * Example: "U+0041" for the character 'A'.
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     * Example: "A" for the character 'A'.
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     * Example: "LATIN CAPITAL LETTER A" for the character 'A'.
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered, in n.n.n format.
     * Example: "6.3.0".
     */
    unicode_version: string;

    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     * Example: "Corrigendum #3".
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v7.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points.
     * Example: "U+0041; U+0061"
     */
    source: string;
    /**
     * The NFC normalized code points.
     * Example: "U+0041"
     */
    nfc: string;
    /**
     * The NFD normalized code points.
     * Example: "U+0041"
     */
    nfd: string;
    /**
     * The NFKC normalized code points.
     * Example: "U+0041"
     */
    nfkc: string;
    /**
     * The NFKD normalized code points.
     * Example: "U+0041"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v7.0.0/PropList.txt
/**
 * Unicode Character Database
 *
 * @property {string} unicode_version - The version of the Unicode standard.
 * @property {string} date - The date of the data file.
 * @property {string} copyright - Copyright information for the Unicode data.
 * @property {string} terms_of_use - Link to the terms of use for the Unicode data.
 * @property {string} documentation - Link to the documentation for the Unicode data.
 */
export interface PropList {
  unicode_version: string;
  date: string;
  copyright: string;
  terms_of_use: string;
  documentation: string;
}

export const PROP_LIST_FIELDS = [
  "unicode_version",
  "date",
  "copyright",
  "terms_of_use",
  "documentation"
];
//#endregion

//#region data-files/v7.0.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database (UCD).
 *
 * The properties include:
 * - abbreviated_name: A short name for the property (e.g., 'AL').
 * - long_name: A detailed name for the property (e.g., 'Arabic Letter').
 * - additional_aliases: Any other aliases that may be useful.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * Example:
 * - abbreviated_name: 'AL'
 * - long_name: 'Arabic Letter'
 * - additional_aliases: ['Arabic_Letter', 'AL']
 */
export interface PropertyAliases {
  abbreviated_name: string;
  long_name: string;
  additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v7.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database (UCD).
 * Each property value name is associated with a specific property and may have multiple aliases.
 *
 * The structure of each entry includes:
 * - `property`: The property for which the value name is used (e.g., `Bidi_Class`).
 * - `abbreviated_name`: A short form of the property value name (e.g., `AL`).
 * - `long_name`: A detailed description of the property value name (e.g., `Arabic Letter`).
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyValueAliases {
    property: string;
    abbreviated_name: string;
    long_name: string;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
    "property",
    "abbreviated_name",
    "long_name"
];
//#endregion

//#region data-files/v7.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the mapping of script extensions to their associated code points.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values.
     * Example: "Latin", "Cyrillic"
     */
    script_extensions: "Latin" | "Cyrillic" | "Arabic" | "Greek" | "Hebrew";

    /**
     * A list of code points associated with the script extensions, listed in code point order.
     * Example: 0x0041, 0x0042
     */
    code_points: number[];
}

export const SCRIPT_EXTENSIONS_FIELDS = ["script_extensions", "code_points"];
//#endregion

//#region data-files/v7.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface Scripts {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2014-05-15T00:11:35Z"
     */
    date: string;

    /**
     * The version of the Unicode Character Database.
     * Example: "7.0.0"
     */
    version: string;

    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2014 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation link for the Unicode Character Database.
     * Example: "For documentation, see http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v7.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The Unicode code point of the character, expressed in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character, expressed as character values in hex.
     * If there are multiple characters, they are separated by spaces.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * An optional list of conditions that override the normal casing behavior.
     * This can include language IDs or casing contexts, separated by spaces.
     * Example: "en US" or "Not_Latin"
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the mapping.
     * Example: "Latin capital letter A"
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v7.0.0/StandardizedVariants.txt
/**
 * Standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "[0;31m"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Red text"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "In bold font"
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v7.0.0/USourceData.txt
/**
 * This interface represents the basic data for U-source ideographs.
 */
export interface USourceData {
    /**
     * The U-source ID.
     * Example: "U+1234"
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status.
     * Possible values: "C" (Included in Extension C), "D" (Included in Extension D), "E" (Included for Extension E).
     */
    status: "C" | "D" | "E";
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The Unicode character.
     * @example "U+0041"
     */
    unicode_character: string;
    /**
     * The direction of the character.
     * Can be either "LTR" (Left-To-Right) or "RTL" (Right-To-Left).
     * @example "LTR"
     */
    direction: "LTR" | "RTL";
    /**
     * The category of the character.
     * @example "Letter"
     */
    category: string;
    /**
     * The bidirectional category of the character.
     * @example "AL"
     */
    bidi_category: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "unicode_character",
    "direction",
    "category",
    "bidi_category"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * Indicates whether the character is a control character.
     * Example: "true" for control characters, "false" otherwise.
     */
    control_character: "true" | "false";

    /**
     * Indicates whether the character is a digit.
     * Example: "true" for digits, "false" otherwise.
     */
    digit: "true" | "false";

    /**
     * Indicates whether the character is a letter.
     * Example: "true" for letters, "false" otherwise.
     */
    letter: "true" | "false";

    /**
     * Indicates whether the character is a punctuation mark.
     * Example: "true" for punctuation marks, "false" otherwise.
     */
    punctuation: "true" | "false";

    /**
     * Indicates whether the character is a whitespace character.
     * Example: "true" for whitespace characters, "false" otherwise.
     */
    whitespace: "true" | "false";
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "control_character",
    "digit",
    "letter",
    "punctuation",
    "whitespace"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The combining class value, which is a number representing the class.
     * Example: 0, 1, 2, etc.
     */
    combining_class: number;

    /**
     * The character associated with this combining class.
     * Example: 'A', 'B', 'C', etc.
     */
    character: string;

    /**
     * The name of the combining class.
     * Example: 'Not Reordered', 'Overlay', etc.
     */
    name: string;

    /**
     * The Unicode code point of the character.
     * Example: 'U+0041' for 'A'.
     */
    code_point: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "combining_class",
    "character",
    "name",
    "code_point"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the Unicode Character Database derived decomposition type.
 */
export interface DerivedDecompositionType {
    /**
     * The character that is decomposed.
     * Example: 'A'
     */
    decomposed_character: string;
    
    /**
     * The decomposition mapping.
     * Example: 'A' -> 'A, 0041'
     */
    decomposition_mapping: string;
    
    /**
     * The type of decomposition.
     * Example: 'canonical' or 'compat'
     */
    decomposition_type: "canonical" | "compat";
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "decomposed_character",
    "decomposition_mapping",
    "decomposition_type"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the Derived East Asian Width data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character for which the width is defined.
     * Example: 'A'
     */
    character: string;

    /**
     * The width category of the character.
     * Can be one of "Narrow", "Wide", "Ambiguous", or "Fullwidth".
     * Example: "Narrow"
     */
    width: "Narrow" | "Wide" | "Ambiguous" | "Fullwidth";

    /**
     * The Unicode code point of the character.
     * Example: 65 for 'A'
     */
    code_point: number;

    /**
     * The name of the character in Unicode.
     * Example: "LATIN CAPITAL LETTER A"
     */
    name: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "width",
    "code_point",
    "name"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The general category of the character.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1.0 for a character with a numeric value.
     */
    numeric_value?: number;

    /**
     * The name of the character in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The code point of the character in hexadecimal format.
     * Example: "0041" for 'A'.
     */
    code_point: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "numeric_value",
    "character_name",
    "code_point"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the Unicode Character Database derived joining group.
 */
export interface DerivedJoiningGroup {
    /**
     * The name of the derived joining group.
     * Example: "Left"
     */
    derived_joining_group_name: string;
    
    /**
     * The code point range for the derived joining group.
     * Example: "U+0000..U+007F"
     */
    code_point_range: string;
    
    /**
     * The properties associated with the derived joining group.
     * Example: "L, R, D"
     */
    properties: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "derived_joining_group_name",
    "code_point_range",
    "properties"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining types.
 */
export interface DerivedJoiningType {
    /**
     * The character that represents the joining type.
     * Example: "U+0020" for space character.
     */
    joining_character: string;
    
    /**
     * The type of joining.
     * Can be one of the following: "U", "L", "R", "D", "C", "T", "A".
     */
    joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "A";
    
    /**
     * The direction of the joining.
     * Can be either "left" or "right".
     */
    joining_direction: "left" | "right";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_character",
    "joining_type",
    "joining_direction"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2014-02-07, 18:42:14 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2014 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode Character Database.
     * URL format: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation URL for the Unicode Character Database.
     * URL format: "http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: 1.0
     */
    numeric_value: number;

    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    numeric_type: "integer" | "decimal";

    /**
     * The character associated with the numeric value.
     * Example: 'A'
     */
    character: string;

    /**
     * The script associated with the character.
     * Example: "Latin"
     */
    script: string;

    /**
     * The category of the character.
     * Example: "Letter"
     */
    category: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character",
    "script",
    "category"
];
//#endregion

//#region data-files/v7.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value associated with a character.
     * Example: "1.0"
     */
    numeric_value: "string";
    
    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    numeric_type: "string";
    
    /**
     * The source of the numeric value.
     * Example: "Unicode Character Database"
     */
    source: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character that represents the grapheme break property.
     * Example: "L" for a line break.
     */
    character: string;

    /**
     * The property value associated with the character.
     * Example: "CR" for carriage return.
     */
    property_value: string;

    /**
     * The description of the property value.
     * Example: "Line Break" for the property value "L".
     */
    description: string;
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property_value",
    "description"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the Grapheme Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0062 0063"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/LineBreakTest.txt
/**
 * LineBreakTest
 *
 * This interface represents the default line break test as defined in the Unicode Character Database.
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Format: <string> (# <comment>)?
     * Example: "U+0041 U+0042 U+0043"
     */
    unicode_code_points: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "unicode_code_points"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties related to sentence breaking as defined in Unicode.
 */
export interface SentenceBreakProperty {
    /**
     * Represents the character's sentence break property.
     * Can be one of the following values: "CR", "LF", "Control", "Sep", "Sp", "XX".
     * Example: "CR" indicates a carriage return.
     */
    sentence_break: "CR" | "LF" | "Control" | "Sep" | "Sp" | "XX";

    /**
     * Indicates whether the character is a break opportunity.
     * Can be either true or false.
     * Example: true indicates that a break is allowed at this character.
     */
    break_opportunity: boolean;

    /**
     * Specifies the character's line break property.
     * Can be one of the following values: "AL", "BK", "CR", "LF", "NL", "SP", "XX".
     * Example: "AL" indicates an alphabetic line break.
     */
    line_break: "AL" | "BK" | "CR" | "LF" | "NL" | "SP" | "XX";
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "sentence_break",
    "break_opportunity",
    "line_break"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Default Sentence Break Test
 *
 * This interface represents the structure of the default sentence break test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the properties related to word breaking in Unicode.
 */
export interface WordBreakProperty {
    /**
     * Indicates the word break property for a character.
     * Possible values include "AL", "CR", "EX", "FO", "LE", "LF", "NS", "NU", "OP", "SG", "SP", "SY", "WH".
     * Example: "AL" for Arabic letters.
     */
    word_break: "AL" | "CR" | "EX" | "FO" | "LE" | "LF" | "NS" | "NU" | "OP" | "SG" | "SP" | "SY" | "WH";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break"
];
//#endregion

//#region data-files/v7.0.0/auxiliary/WordBreakTest.txt
/**
 * Default Word Break Test
 *
 * Format:
 * <string> (# <comment>)? 
 * <string> contains hex Unicode code points, with
 */
export interface WordBreakTest {
  /**
   * A string containing hex Unicode code points.
   * Example: "0041" for 'A'
   */
  string: string;
  /**
   * An optional comment associated with the string.
   * Example: "# This is a comment"
   */
  comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
  "string",
  "comment"
];
//#endregion

