// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 11

//#region data-files/v11.0.0/ArabicShaping.txt
/**
 * This interface defines the properties for Arabic shaping characters, including their code points, names, joining types, and joining groups.
 */
export interface ArabicShaping {
  /**
   * The code point of the character in 4-digit hexadecimal form.
   * Example: '0629'
   */
  code_point: string;

  /**
   * A short schematic name for the character, descriptive of its shape.
   * Example: 'TEH MARBUTA'
   */
  schematic_name: string;

  /**
   * The joining type of the character, which can be one of the following:
   * - "R" for Right_Joining
   * - "L" for Left_Joining
   * - "D" for Dual_Joining
   * - "C" for Join_Causing
   * - "U" for Non_Joining
   * - "T" for Transparent
   * Example: 'R'
   */
  joining_type: "R" | "L" | "D" | "C" | "U" | "T";

  /**
   * The joining group of the character, represented as a name with underscores instead of spaces.
   * Example: 'TEH_MARBUTA'
   */
  joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
  "code_point",
  "schematic_name",
  "joining_type",
  "joining_group"
];
//#endregion

//#region data-files/v11.0.0/BidiBrackets.txt
/**
 * BidiBrackets interface represents the mapping of Unicode characters that are treated as bracket pairs by the Unicode Bidirectional Algorithm.
 */
export interface BidiBrackets {
    /**
     * Unicode code point value, represented as a hexadecimal value.
     * Example: "U+298D"
     */
    unicode_code_point: string;

    /**
     * Bidi_Paired_Bracket property value, which can be a code point value or <none>.
     * Example: "U+298E" or "<none>"
     */
    bidi_paired_bracket: string;

    /**
     * Bidi_Paired_Bracket_Type property value, which can be one of the following: "o" (Open), "c" (Close), or "n" (None).
     * Example: "o" for Open, "c" for Close, "n" for None
     */
    bidi_paired_bracket_type: "o" | "c" | "n";
}

export const BIDI_BRACKETS_FIELDS = [
    "unicode_code_point",
    "bidi_paired_bracket",
    "bidi_paired_bracket_type"
];
//#endregion

//#region data-files/v11.0.0/BidiCharacterTest.txt
/**
 * Interface representing the BidiCharacterTest data structure.
 */
export interface BidiCharacterTest {
    /**
     * A sequence of hexadecimal code point values separated by space.
     * Example: "0041 0042 0043"
     */
    code_point_sequence: string;

    /**
     * A value representing the paragraph direction:
     * - 0 represents left-to-right
     * - 1 represents right-to-left
     * - 2 represents auto-LTR according to rules P2 and P3 of the algorithm.
     * Example: 0
     */
    paragraph_direction: "0" | "1" | "2";

    /**
     * The resolved paragraph embedding level.
     * Example: 0
     */
    resolved_paragraph_embedding_level: number;

    /**
     * A list of resolved levels; characters removed in rule X9 are indicated with an 'x'.
     * Example: "0 1 x 2"
     */
    resolved_levels: string;

    /**
     * A list of indices showing the resulting visual ordering from left to right;
     * characters with a resolved level of 'x' are skipped.
     * Example: "0 1 3"
     */
    visual_ordering_indices: string;
}

export const BIDI_CHARACTER_TEST_FIELDS = [
    "code_point_sequence",
    "paragraph_direction",
    "resolved_paragraph_embedding_level",
    "resolved_levels",
    "visual_ordering_indices"
];
//#endregion

//#region data-files/v11.0.0/BidiMirroring.txt
/**
 * BidiMirroring interface represents the mappings of Unicode characters that have the Bidi_Mirrored=Yes property value.
 * Each mapping consists of a source code point and its corresponding mirrored code point.
 */
export interface BidiMirroring {
    /**
     * The source code point represented as a hexadecimal value (4 to 6 digits).
     * Example: '0041' for 'A'.
     */
    source_code_point: string;

    /**
     * The mirrored code point represented as a hexadecimal value (4 to 6 digits).
     * Example: '0061' for 'a'.
     */
    mirrored_code_point: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "source_code_point",
    "mirrored_code_point"
];
//#endregion

//#region data-files/v11.0.0/BidiTest.txt
/**
 * This interface defines the structure for the BidiTest conformance test data.
 * It includes properties for levels, reordering, and data lines as specified in the Unicode Bidi Algorithm documentation.
 */
export interface BidiTest {
  /**
   * An ordered space-delimited list of numbers indicating the resulting levels
   * for each input property value. The UBA does not assign levels to certain values;
   * those are indicated with an 'x'.
   * Example: "1 0" or "x 1 x 2"
   */
  levels: string;

  /**
   * An ordered space-delimited list of numbers indicating the resulting
   * visual ordering from left to right. The numbers are zero-based, and
   * are indexes into the input string. Items with a level of 'x' are skipped.
   * Example: "1 0" or "3 1"
   */
  reorder: string;

  /**
   * An ordered list of BIDI property values followed by a hex bitset for
   * paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL.
   * Example: "L LRE R R; 7" or "L LRE R AL; 7"
   */
  data: string;
}

export const BIDI_TEST_FIELDS = [
  "levels",
  "reorder",
  "data"
];
//#endregion

//#region data-files/v11.0.0/Blocks.txt
/**
 * Interface representing the Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A for 'z')
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v11.0.0/CJKRadicals.txt
/**
 * Interface representing the mapping from CJK radical numbers to characters.
 */
export interface CJKRadicals {
    /**
     * The CJK radical number, which matches the regular expression [1-9][0-9]{0,2}'?.
     * Example: "1", "2'"
     */
    radical_number: string;

    /**
     * The CJK radical character corresponding to the radical number.
     * Example: "亻", "氵"
     */
    radical_character: string;

    /**
     * The CJK unified ideograph formed from the radical only.
     * Example: "人", "水"
     */
    unified_ideograph: string;
}

export const CJK_RADICALS_FIELDS = [
    "radical_number",
    "radical_character",
    "unified_ideograph"
];
//#endregion

//#region data-files/v11.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character, represented in hexadecimal format.
     * Example: '0041' for 'A'.
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Can be one of the following:
     * - 'C': common case folding, shared by both simple and full mappings.
     * - 'F': full case folding, mappings that may cause strings to grow in length.
     * - 'S': simple case folding, mappings to single characters.
     * - 'T': special case for uppercase I and dotted uppercase I, used in Turkic languages.
     * Example: 'C', 'F', 'S', 'T'.
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding, which can be a single character or multiple characters separated by spaces.
     * Example: '0061' for 'a' or '0061 0062' for 'ab'.
     */
    mapping: string;

    /**
     * The name of the character, providing a human-readable description.
     * Example: 'LATIN CAPITAL LETTER A'.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v11.0.0/CompositionExclusions.txt
/**
 * This interface represents the Composition Exclusions defined in UAX #15, Unicode Normalization Forms.
 */
export interface CompositionExclusions {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, e.g., "2017-12-06"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2017 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the Unicode Character Database documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;

    /**
     * A description of the file's content and purpose.
     */
    description: string;

    /**
     * The URL for more information on composition exclusions.
     * Example: "http://www.unicode.org/unicode/reports/tr15/#Primary_Exclusion_List_Table"
     */
    more_info_url: string;

    /**
     * The URL for the derived property Full_Composition_Exclusion.
     * Example: "DerivedNormalizationProps.txt"
     */
    derived_property_url: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url",
    "description",
    "more_info_url",
    "derived_property_url"
];
//#endregion

//#region data-files/v11.0.0/DerivedAge.txt
/**
 * This interface represents the derived property data from the Unicode Character Database.
 */
export interface DerivedAge {
  /**
   * The date when the code point was first assigned in Unicode.
   * Format: YYYY-MM-DD, HH:MM:SS GMT
   * Example: "2018-01-31, 08:20:09 GMT"
   */
  date: string;
  /**
   * The version of Unicode in which the code point was assigned.
   * Format: Major.Minor.Patch
   * Example: "11.0.0"
   */
  version: string;
  /**
   * Indicates the type of code point assigned.
   * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
   */
  code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";
}

export const DERIVED_AGE_FIELDS = ["date", "version", "code_point_type"];
//#endregion

//#region data-files/v11.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the properties defined in the DerivedCoreProperties Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode version of the character properties.
     * Example: "11.0.0"
     */
    unicode_version: string;
    
    /**
     * The date when the properties were last updated.
     * Format: YYYY-MM-DD
     * Example: "2018-02-21"
     */
    last_updated: string;
    
    /**
     * The copyright information for the Unicode data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;
    
    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    
    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "unicode_version",
    "last_updated",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalizationProps.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use compatibility decomposition.
     * Example: true
     */
    use_compatibility_decomposition: boolean;

    /**
     * A boolean indicating whether to apply the normalization.
     * Example: false
     */
    apply_normalization: boolean;

    /**
     * A string representing the source text to be normalized.
     * Example: "Some text to normalize"
     */
    source_text: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "use_compatibility_decomposition",
    "apply_normalization",
    "source_text"
];
//#endregion

//#region data-files/v11.0.0/EastAsianWidth.txt
/**
 * East_Asian_Width Property
 *
 * This interface represents the East Asian Width property as defined in the Unicode Character Database.
 *
 * The format consists of two fields:
 * - `unicode_code_point`: A Unicode code point value or range of code point values (e.g., U+3400..U+4DBF).
 * - `east_asian_width`: The East Asian Width property, which can be one of the following values:
 *   - "A": Ambiguous
 *   - "F": Full-width
 *   - "H": Half-width
 *   - "N": Neutral
 *   - "Na": Narrow
 *   - "W": Wide
 *
 * All code points not explicitly listed are given the value "N". Unassigned code points in specific blocks default to "W".
 */
export interface EastAsianWidth {
  unicode_code_point: string;
  east_asian_width: "A" | "F" | "H" | "N" | "Na" | "W";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
  "unicode_code_point",
  "east_asian_width"
];
//#endregion

//#region data-files/v11.0.0/EmojiSources.txt
/**
 * Interface representing the mappings between Unicode code points and Shift-JIS codes for cell phone carrier symbols.
 */
export interface EmojiSources {
  /**
   * Unicode code point or sequence.
   * Example: "U+1F600"
   */
  unicode_code_point_or_sequence: string;
  /**
   * DoCoMo Shift-JIS code.
   * Example: "0xF8A1"
   */
  docomo_shift_jis_code: string;
  /**
   * KDDI Shift-JIS code.
   * Example: "0xF8A2"
   */
  kddi_shift_jis_code: string;
  /**
   * SoftBank Shift-JIS code.
   * Example: "0xF8A3"
   */
  softbank_shift_jis_code: string;
}

export const EMOJI_SOURCES_FIELDS = [
  "unicode_code_point_or_sequence",
  "docomo_shift_jis_code",
  "kddi_shift_jis_code",
  "softbank_shift_jis_code"
];
//#endregion

//#region data-files/v11.0.0/EquivalentUnifiedIdeograph.txt
/**
 * This interface defines the mappings from code points or code point ranges to equivalent CJK unified ideographs.
 * Each mapping consists of a source code point or range and its corresponding unified ideograph.
 */
export interface EquivalentUnifiedIdeograph {
    /**
     * A code point or code point range represented as a variable-length hexadecimal value with 4 to 6 digits.
     * Example: "4E00" or "4E00-4E0F"
     */
    source: string;

    /**
     * A code point represented as a variable-length hexadecimal value with 4 to 6 digits.
     * Example: "4E8C"
     */
    equivalent: string;
}

export const EQUIVALENT_UNIFIED_IDEOGRAPH_FIELDS = [
    "source",
    "equivalent"
];
//#endregion

//#region data-files/v11.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type data.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type identifier.
     * Format: "C", "V", "CV", etc.
     * Example: "CV"
     */
    type: "C" | "V" | "CV" | "VC" | "CVC";

    /**
     * The description of the syllable type.
     * Example: "Consonant-Vowel"
     */
    description: string;

    /**
     * The Unicode code point for the syllable type.
     * Format: U+XXXX
     * Example: U+AC00
     */
    code_point: string;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "type",
    "description",
    "code_point"
];
//#endregion

//#region data-files/v11.0.0/IndicPositionalCategory.txt
/**
 * This interface defines the Indic_Positional_Category property, which is aimed at the specification of syllabic structure for Indic scripts.
 * 
 * The property is designed primarily to supplement the Indic_Syllabic_Category property.
 * 
 * Note that this property is not intended as a prescriptive property regarding display or font design.
 * 
 * The following characters are assigned the positional categories:
 * - "Top"
 * - "Bottom"
 * - "Right"
 * 
 * Each character is represented by its Unicode code point value or range, followed by its positional category.
 * 
 * Example format:
 * Field 0: Unicode code point value or range (e.g., U+0BC1)
 * Field 1: Indic_Positional_Category property value (e.g., "Top")
 */
export interface IndicPositionalCategory {
    /**
     * Unicode code point value or range of code point values.
     */
    unicode_code_point: string;
    
    /**
     * Indic_Positional_Category property value.
     * Possible values include:
     * - "Top"
     * - "Bottom"
     * - "Right"
     */
    indic_positional_category: "Top" | "Bottom" | "Right";
}

export const INDIC_POSITIONAL_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_positional_category"
];
//#endregion

//#region data-files/v11.0.0/IndicSyllabicCategory.txt
/**
 * This interface defines the Indic Syllabic Category property, which is aimed at analyzing and processing Indic scripts.
 *
 * The property specifies the syllabic structure and segmentation rules for Indic scripts, which may differ from phonological syllables.
 *
 * The following scripts are assessed as Indic in the structural sense:
 * Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
 * Chakma, Cham, Devanagari, Dogra, Grantha, Gujarati, Gunjala Gondi,
 * Gurmukhi, Hanunoo, Javanese, Kaithi, Kannada, Kayah Li, Kharoshthi,
 * Khmer, Khojki, Khudawadi, Lao, Lepcha, Limbu, Mahajani, Makasar,
 * Malayalam, Marchen, Masaram Gondi, Meetei Mayek, Modi, Multani,
 * Myanmar, Newa, New Tai Lue, Oriya, Phags-pa, Rejang, Saurashtra,
 * Sharada, Siddham, Sinhala, Soyombo, Sundanese, Syloti Nagri,
 * Tagalog, Tagbanwa, Tai Le, Tai Tham, Tai Viet, Takri, Tamil,
 * Telugu, Thai, Tibetan, Tirhuta, and Zanabazar Square.
 *
 * All characters for scripts not in this list take the default value for this property.
 */
export interface IndicSyllabicCategory {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+0900 or U+0900-U+097F
     */
    unicode_code_point: string;
    /**
     * Indic Syllabic Category property value.
     * Example: "Vowel", "Consonant"
     */
    indic_syllabic_category: "Vowel" | "Consonant" | "Other";
    /**
     * General Category property value, Unicode character name, and code point count in square brackets.
     * Example: "Lu # LATIN CAPITAL LETTER A [1]"
     */
    comment: string;
}

export const INDIC_SYLLABIC_CATEGORY_FIELDS = [
    "unicode_code_point",
    "indic_syllabic_category",
    "comment"
];
//#endregion

//#region data-files/v11.0.0/Jamo.txt
/**
 * Interface representing the Jamo_Short_Name property.
 */
export interface JamoShortName {
    /**
     * The code point of a conjoining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo_Short_Name as a one-, two-, or three-character ASCII string.
     * Example: 'G', 'GG', 'N'
     */
    jamo_short_name: string;
}

export const JAMO_SHORT_NAME_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v11.0.0/LineBreak.txt
/**
 * This interface represents the Line Break Property data from the Unicode Character Database.
 */
export interface LineBreak {
  /**
   * Unicode code point value or range of code point values.
   * Example: U+0041 or U+0041..U+005A
   */
  code_point: string;

  /**
   * Line_Break property, which can be one of the following:
   * - Non-tailorable: "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
   * - Tailorable: "AI", "AL", "B2", "BA", "BB", "CB", "CJ", "CL", "CP", "EB",
   *   "EM", "EX", "H2", "H3", "HL", "HY", "ID", "IN", "IS", "JL",
   *   "JT", "JV", "NS", "NU", "OP", "PO", "PR", "QU", "RI", "SA",
   *   "SG", "SY", "XX"
   * Example: "BK"
   */
  line_break_property: "BK" | "CM" | "CR" | "GL" | "LF" | "NL" | "SP" | "WJ" | "ZW" | "ZWJ" | 
                     "AI" | "AL" | "B2" | "BA" | "BB" | "CB" | "CJ" | "CL" | "CP" | "EB" | 
                     "EM" | "EX" | "H2" | "H3" | "HL" | "HY" | "ID" | "IN" | "IS" | "JL" | 
                     "JT" | "JV" | "NS" | "NU" | "OP" | "PO" | "PR" | "QU" | "RI" | "SA" | 
                     "SG" | "SY" | "XX";
}

export const LINE_BREAK_FIELDS = [
  "code_point",
  "line_break_property"
] as const;
//#endregion

//#region data-files/v11.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
  /**
   * The code point of the Unicode character, represented as a hexadecimal string.
   * Example: "U+0041" for the character 'A'.
   */
  code_point: string;

  /**
   * The alias name for the Unicode character.
   * Example: "LATIN CAPITAL LETTER A".
   */
  alias: string;

  /**
   * The type of the alias, which can be one of the following: "correction", "control", "alternate", "figment", "abbreviation".
   * Comparisons of type labels should ignore case.
   */
  type: "correction" | "control" | "alternate" | "figment" | "abbreviation";
}

export const NAME_ALIASES_FIELDS = [
  "code_point",
  "alias",
  "type"
];
//#endregion

//#region data-files/v11.0.0/NamedSequences.txt
/**
 * Unicode Named Character Sequences
 *
 * This interface represents the named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v11.0.0/NamedSequencesProv.txt
/**
 * Provisional Unicode Named Character Sequences
 *
 * This interface represents the provisional named character sequences as defined in the Unicode Character Database.
 */
export interface NamedSequencesProv {
    /**
     * The name of the sequence.
     * Example: "EXAMPLE NAME"
     */
    name: string;

    /**
     * The code point sequence for the USI, represented as a string of space-separated code points.
     * Example: "1000 1001 1002"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v11.0.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections as defined in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041" for 'A').
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered into UnicodeData.txt, in n.n.n format (e.g., "11.0.0").
     */
    unicode_version: string;

    /**
     * Comment indicating the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v11.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite data.
 */
export interface NormalizationTest {
    /**
     * The source code points.
     * Example: "U+0041; U+0061"
     */
    source: string;

    /**
     * The NFC normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfc: string;

    /**
     * The NFD normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfd: string;

    /**
     * The NFKC normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfkc: string;

    /**
     * The NFKD normalized code points.
     * Example: "U+0041; U+0061"
     */
    nfkd: string;
}

export const NORMALIZATION_TEST_FIELDS = [
    "source",
    "nfc",
    "nfd",
    "nfkc",
    "nfkd"
];
//#endregion

//#region data-files/v11.0.0/NushuSources.txt
/**
 * Interface representing the Unicode Character Database for Nushu sources.
 */
export interface NushuSources {
    /**
     * The date of the data entry in GMT format.
     * Example: "2017-12-06T01:00:00Z"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2017 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const NUSHU_SOURCES_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date when the file was created or last modified.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2018-03-15, 04:28:35 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/PropertyAliases.txt
/**
 * This interface defines the aliases for properties used in the Unicode Character Database (UCD).
 * The aliases can be used for XML formats of UCD data, regular-expression property tests, and other programmatic textual descriptions of Unicode data.
 *
 * Each property has an abbreviated name and a long name, with additional aliases available.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyAliases {
    /**
     * Abbreviated name for the property.
     * Example: "AL"
     */
    abbreviated_name: string;

    /**
     * Long name for the property.
     * Example: "Arabic Letter"
     */
    long_name: string;

    /**
     * Additional aliases for the property, if any.
     * Example: "Arabic Letter, AL"
     */
    additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
    "abbreviated_name",
    "long_name",
    "additional_aliases"
];
//#endregion

//#region data-files/v11.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database (UCD).
 * Each property value name consists of a property, an abbreviated name, and a long name.
 * 
 * The first field describes the property for which that property value name is used.
 * The second field is an abbreviated name.
 * The third field is a long name.
 * 
 * In the case of ccc, there are 4 fields. The second field is numeric, third is abbreviated, and fourth is long.
 * 
 * Loose matching should be applied to all property names and property values, with the exception of String Property values.
 * Numeric Property values apply numeric equivalence.
 * 
 * Note: Property value names are NOT unique across properties. The combination of property value and property name is unique.
 */
export interface PropertyValueAliases {
  property: string;
  abbreviated_name: string;
  long_name: string;
  additional_aliases?: string[];
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
  "property",
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v11.0.0/ScriptExtensions.txt
/**
 * The ScriptExtensions interface represents the mapping of script extensions to their associated code points.
 */
export interface ScriptExtensions {
    /**
     * A set of one or more abbreviated Script property values that indicate the scripts commonly used with the characters.
     * Example: "Latin", "Cyrillic"
     */
    script_extensions: "string"[];
    /**
     * A list of code points associated with the script extensions, listed in code point order.
     * Example: 0x0041, 0x0042
     */
    code_points: number[];
}

export const SCRIPT_EXTENSIONS_FIELDS = [
    "script_extensions",
    "code_points"
];
//#endregion

//#region data-files/v11.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database Scripts.
 */
export interface Scripts {
    /**
     * The script name, e.g., "Latin".
     */
    script_name: string;
    /**
     * The script code, e.g., "Latn".
     */
    script_code: string;
    /**
     * The range of Unicode code points for this script, e.g., "U+0000-U+007F".
     */
    code_point_range: string;
    /**
     * The direction of the script, e.g., "LTR" or "RTL".
     */
    direction: "LTR" | "RTL";
    /**
     * Indicates if the script is a right-to-left script.
     */
    is_rtl: boolean;
}

export const SCRIPTS_FIELDS = [
    "script_name",
    "script_code",
    "code_point_range",
    "direction",
    "is_rtl"
];
//#endregion

//#region data-files/v11.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing mappings for Unicode characters.
 *
 * The entries in this interface are derived from the Special Casing file, which provides
 * additional information about the casing of Unicode characters, including lowercase,
 * titlecase, and uppercase mappings. The mappings are expressed in hexadecimal character
 * values, and conditions may apply based on language IDs or casing contexts.
 */
export interface SpecialCasing {
  /**
   * The Unicode code point of the character, expressed in hexadecimal.
   * Example: "0041" for 'A'
   */
  code: string;

  /**
   * The lowercase mapping of the character, expressed in hexadecimal.
   * If there are multiple characters, they are separated by spaces.
   * Example: "0061" for 'a'
   */
  lower: string;

  /**
   * The titlecase mapping of the character, expressed in hexadecimal.
   * If there are multiple characters, they are separated by spaces.
   * Example: "0041" for 'A'
   */
  title: string;

  /**
   * The uppercase mapping of the character, expressed in hexadecimal.
   * If there are multiple characters, they are separated by spaces.
   * Example: "0041" for 'A'
   */
  upper: string;

  /**
   * An optional list of conditions that override the normal casing behavior.
   * This may include language IDs or casing contexts, separated by spaces.
   * Example: "en-US Not_Capitalized"
   */
  condition_list?: string;

  /**
   * A comment providing additional information about the mapping.
   * Example: "Latin Capital Letter A"
   */
  comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
  "code",
  "lower",
  "title",
  "upper",
  "condition_list",
  "comment"
];
//#endregion

//#region data-files/v11.0.0/StandardizedVariants.txt
/**
 * Interface representing standardized variation sequences defined in the Unicode Standard.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: "[0;31m"
   */
  variation_sequence: string;

  /**
   * The description of the desired appearance.
   * Example: "Red text"
   */
  description: string;

  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Terminal, Web"
   */
  shaping_environments: string;
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v11.0.0/TangutSources.txt
/**
 * This interface represents the data structure for TangutSources.
 */
export interface TangutSources {
    /**
     * The name of the file.
     * Example: "TangutSources-11.0.0.txt"
     */
    file_name: string;
    /**
     * The date of the file creation.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2017-12-06, 01:00:00 GMT"
     */
    date: string;
    /**
     * The copyright information.
     * Example: "© 2017 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The trademark information.
     * Example: "Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries."
     */
    trademark: string;
    /**
     * The terms of use URL.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation URL.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation: string;
    /**
     * The description of the file's purpose.
     * Example: "This file is a normative contributory data file in the Unicode Character Database."
     */
    description: string;
}

export const TANGUT_SOURCES_FIELDS = [
    "file_name",
    "date",
    "copyright",
    "trademark",
    "terms_of_use",
    "documentation",
    "description"
];
//#endregion

//#region data-files/v11.0.0/USourceData.txt
/**
 * Interface representing the U-source ideographs data.
 */
export interface USourceData {
    /**
     * The U-source ID.
     */
    u_source_id: string;

    /**
     * Text indicating the ideograph's status. Possible values include:
     * - "C": Encoded in Extension C
     * - "D": Encoded in Extension D
     * - "E": Encoded in Extension E
     * - "F": Encoded in Extension F
     * - "G": Submitted by the UTC for IRG Working Set 2015
     * - "N": Planned to be submitted for a future extension
     * - "U": Encoded
     * - "UNC-2013": Included in the UTC's 2013 "Urgently Needed Characters" proposal
     * - "UNC-2015": Included in the UTC's 2015 "Urgently Needed Characters" proposal
     * - "UK-2015": Submitted by the UK for IRG Working Set 2015
     * - "V": Variant of an encoded character
     * - "W": Not suitable for encoding as a CJK Unified Ideograph
     * - "WS-2017": Submitted by the UTC for IRG Working Set 2017
     * - "X": No action taken
     * - "(UTC-\d{5})|(UCI-\d{5})": Duplicate entries deprecated in favor of other entries; the status value is the identifier of the non-deprecated character
     */
    status: "C" | "D" | "E" | "F" | "G" | "N" | "U" | "UNC-2013" | "UNC-2015" | "UK-2015" | "V" | "W" | "WS-2017" | "X" | `"(UTC-\d{5})|(UCI-\d{5})`;

    /**
     * A Unicode code point. If the status is "V", this specifies the encoded character for which this entry is a variant.
     */
    unicode_code_point: string;

    /**
     * Radical-stroke count.
     */
    radical_stroke_count: number;

    /**
     * Virtual KangXi dictionary position.
     */
    virtual_kangxi_position: number;

    /**
     * Ideographic Description Sequence (IDS), if possible.
     */
    ideographic_description_sequence?: string;

    /**
     * Source(s) of the ideograph.
     */
    sources: string;
}

export const USOURCE_DATA_FIELDS = [
    "u_source_id",
    "status",
    "unicode_code_point",
    "radical_stroke_count",
    "virtual_kangxi_position",
    "ideographic_description_sequence",
    "sources"
];
//#endregion

//#region data-files/v11.0.0/VerticalOrientation.txt
/**
 * Interface representing the Vertical Orientation property as defined in the Unicode Character Database.
 */
export interface VerticalOrientation {
    /**
     * Unicode code point value or range of code point values in hexadecimal form.
     * Example: U+18B0 or U+18B0..U+18FF
     */
    code_point: string;

    /**
     * Vertical Orientation property value, which can be one of the following:
     * - "U" for Upright, the same orientation as in the code charts
     * - "R" for Rotated 90 degrees clockwise compared to the code charts
     * - "Tu" for Transformed typographically, with fallback to Upright
     * - "Tr" for Transformed typographically, with fallback to Rotated
     */
    vertical_orientation: "U" | "R" | "Tu" | "Tr";
}

export const VERTICAL_ORIENTATION_FIELDS = [
    "code_point",
    "vertical_orientation"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the DerivedBidiClass.
 */
export interface DerivedBidiClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2018-02-21T05:34:00Z"
     */
    date: string;
    /**
     * The copyright information for the document.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The URL for the documentation.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * Indicates whether the character is a control character.
     * Example: "true" or "false"
     */
    control: "true" | "false";

    /**
     * Indicates whether the character is a digit.
     * Example: "true" or "false"
     */
    digit: "true" | "false";

    /**
     * Indicates whether the character is a letter.
     * Example: "true" or "false"
     */
    letter: "true" | "false";

    /**
     * Indicates whether the character is a punctuation mark.
     * Example: "true" or "false"
     */
    punctuation: "true" | "false";

    /**
     * Indicates whether the character is a whitespace character.
     * Example: "true" or "false"
     */
    whitespace: "true" | "false";
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "control",
    "digit",
    "letter",
    "punctuation",
    "whitespace"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the DerivedCombiningClass.
 */
export interface DerivedCombiningClass {
    /**
     * The date of the document in ISO 8601 format.
     * Example: "2018-02-21T05:34:01Z"
     */
    date: string;
    /**
     * The copyright information for the document.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;
    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The character that is being decomposed.
     * Example: 'A'
     */
    character: string;

    /**
     * The decomposition type of the character.
     * Example: "canonical"
     */
    decomposition_type: "canonical" | "compatibility";

    /**
     * The decomposition mapping for the character.
     * Example: 'A' -> 'A'
     */
    decomposition_mapping: string;

    /**
     * The source of the decomposition information.
     * Example: "Unicode Character Database"
     */
    source: string;
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition_type",
    "decomposition_mapping",
    "source"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The Unicode character.
     * Example: 'U+0041'
     */
    character: string;
    
    /**
     * The East Asian Width property of the character.
     * Example: 'W' for Wide, 'N' for Narrow
     */
    east_asian_width: "W" | "H" | "N" | "F" | "Na";
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "character",
    "east_asian_width"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the Unicode Character Database derived general category.
 */
export interface DerivedGeneralCategory {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2018-02-21, 05:34:04 GMT"
     */
    date: string;

    /**
     * Copyright information for the Unicode data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * Documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup data structure.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode character or character sequence that this group represents.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The joining type of the character, which can be one of the following: "U", "L", "R", "D", "C", "T", "A".
     * Example: "L" for Left joining.
     */
    joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "A";

    /**
     * The direction of the joining, which can be either "L" for left-to-right or "R" for right-to-left.
     * Example: "L" for left-to-right direction.
     */
    joining_direction: "L" | "R";

    /**
     * The code point of the character in hexadecimal format.
     * Example: "0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The name of the character as defined in the Unicode standard.
     * Example: "LATIN CAPITAL LETTER A" for the character 'A'.
     */
    character_name: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "character",
    "joining_type",
    "joining_direction",
    "code_point",
    "character_name"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining types.
 */
export interface DerivedJoiningType {
    /**
     * The character's derived joining type.
     * Example: "D" for Dual Joining
     */
    derived_joining_type: "D" | "L" | "R" | "U" | "C" | "T" | "A";

    /**
     * The character's code point in hexadecimal format.
     * Example: "U+0061" for the character 'a'
     */
    code_point: string;

    /**
     * The character's name in Unicode.
     * Example: "LATIN SMALL LETTER A"
     */
    character_name: string;

    /**
     * The character's numeric value, if applicable.
     * Example: 1 for 'A'
     */
    numeric_value?: number;
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "derived_joining_type",
    "code_point",
    "character_name",
    "numeric_value"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was generated, in ISO 8601 format.
     * Example: "2018-03-23T05:50:46Z"
     */
    date: string;

    /**
     * The copyright information for the data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use_url: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use_url",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedName.txt
/**
 * This interface represents the derived names of Unicode characters based on their code points.
 */
export interface DerivedName {
    /**
     * Unicode code point value or range of code point values.
     * Example: U+4E12 or U+2F89F
     */
    code_point: string;

    /**
     * Name property value or pattern derived from the code point.
     * Patterns may contain a '*' character which is replaced by the code point in hexadecimal format.
     * Example: CJK UNIFIED IDEOGRAPH-* becomes CJK UNIFIED IDEOGRAPH-4E12 for U+4E12.
     */
    name_property: string;
}

export const DERIVED_NAME_FIELDS = [
    "code_point",
    "name_property"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The version of the Unicode data.
     * Format: "11.0.0"
     */
    version: "11.0.0";
    
    /**
     * The date of the data release.
     * Format: "YYYY-MM-DD, HH:MM:SS GMT"
     * Example: "2018-01-31, 08:20:16 GMT"
     */
    date: "2018-01-31, 08:20:16 GMT";
    
    /**
     * The copyright information.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: "© 2018 Unicode®, Inc.";
    
    /**
     * The URL for terms of use.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: "http://www.unicode.org/terms_of_use.html";
    
    /**
     * The documentation URL for the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: "http://www.unicode.org/reports/tr44/";
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "version",
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values as per Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value of the character.
     * Example: "1.0"
     */
    numeric_value: string;
    
    /**
     * The numeric type of the character.
     * Example: "decimal"
     */
    numeric_type: "decimal" | "fraction" | "integer";
    
    /**
     * The character associated with the numeric value.
     * Example: "U+0031" for the character '1'
     */
    character: string;
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "character"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character for which the grapheme break property is defined.
     * Example: 'a'
     */
    character: string;
    /**
     * The grapheme break property value for the character.
     * Example: "CR" (Carriage Return)
     */
    property: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "property"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * Interface representing the Grapheme Break Test data.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    code_points: string;
    /**
     * An optional comment associated with the code points.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "code_points",
    "comment"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/LineBreakTest.txt
/**
 * Default Line Break Test
 *
 * This interface represents the default line break test format.
 *
 * The format consists of a string that may contain hex Unicode code points,
 * optionally followed by a comment in parentheses.
 */
export interface LineBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "U+0041 U+0042" 
     */
    line_break: string;

    /**
     * An optional comment that may provide additional context.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const LINE_BREAK_TEST_FIELDS = [
    "line_break",
    "comment"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties defined in the SentenceBreakProperty Unicode Character Database.
 */
export interface SentenceBreakProperty {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2018-03-15, 04:28:45 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode data.
     * Example: "© 2018 Unicode®, Inc."
     */
    copyright: string;

    /**
     * The URL for the terms of use for the Unicode data.
     * Example: "http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The URL for the documentation of the Unicode Character Database.
     * Example: "http://www.unicode.org/reports/tr44/"
     */
    documentation_url: string;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation_url"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the Sentence Break Test data.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty data structure.
 */
export interface WordBreakProperty {
    /**
     * The Unicode character property value for word breaking.
     * Example: "word_break"
     */
    word_break: "word_break" | "break_all" | "keep_all" | "normal";

    /**
     * The description of the word break property.
     * Example: "This property determines how text is broken into words."
     */
    description: string;

    /**
     * The version of the Unicode standard that this property applies to.
     * Example: "11.0.0"
     */
    version: string;
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break",
    "description",
    "version"
];
//#endregion

//#region data-files/v11.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the WordBreakTest data structure.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

