// This file is generated by ucd codegen. Do not edit this file directly.
// Unicode Version: 5

//#region data-files/v5.0.0/ArabicShaping.txt
/**
 * This interface defines the shaping classes for Arabic and Syriac positional shaping.
 */
export interface ArabicShaping {
    /**
     * The code point, in 4-digit hexadecimal form, of an Arabic or Syriac character.
     * Example: "0629"
     */
    code_point: string;

    /**
     * A short schematic name for that character, abbreviated from the normative Unicode character name.
     * Example: "TEH MARBUTA"
     */
    short_schematic_name: string;

    /**
     * Defines the joining type of the character.
     * Possible values: "R", "L", "D", "C", "U", "T"
     * - R: Right_Joining
     * - L: Left_Joining
     * - D: Dual_Joining
     * - C: Join_Causing
     * - U: Non_Joining
     * - T: Transparent
     */
    joining_type: "R" | "L" | "D" | "C" | "U" | "T";

    /**
     * Defines the joining group based on character names, with parts joined by underscores.
     * Example: "Teh_Marbuta"
     */
    joining_group: string;
}

export const ARABIC_SHAPING_FIELDS = [
    "code_point",
    "short_schematic_name",
    "joining_type",
    "joining_group"
];
//#endregion

//#region data-files/v5.0.0/BidiMirroring.txt
/**
 * This interface represents the Bidi_Mirroring_Glyph property data from the Unicode Character Database.
 */
export interface BidiMirroring {
    /**
     * The code point of the original character represented as a hexadecimal value.
     * Example: '0041' for 'A'.
     */
    original_code_point: string;

    /**
     * The code point of the mirrored character represented as a hexadecimal value.
     * Example: '0061' for 'a' which is the mirror image of 'A'.
     */
    mirrored_code_point: string;
}

export const BIDI_MIRRORING_FIELDS = [
    "original_code_point",
    "mirrored_code_point"
];
//#endregion

//#region data-files/v5.0.0/Blocks.txt
/**
 * Interface representing Unicode Character Database blocks.
 */
export interface Blocks {
    /**
     * The starting code point of the block.
     * Format: U+XXXX (e.g., U+0041 for 'A')
     */
    start_code: string;

    /**
     * The ending code point of the block.
     * Format: U+XXXX (e.g., U+007A for 'z')
     */
    end_code: string;

    /**
     * The name of the block.
     * Example: "Basic Latin"
     */
    block_name: string;
}

export const BLOCKS_FIELDS = [
    "start_code",
    "end_code",
    "block_name"
];
//#endregion

//#region data-files/v5.0.0/CaseFolding.txt
/**
 * This interface represents the case folding properties as defined in the Unicode Character Database.
 */
export interface CaseFolding {
    /**
     * The Unicode code point of the character.
     * Format: Hexadecimal (e.g., U+0041 for 'A')
     */
    code: string;

    /**
     * The status of the case folding mapping.
     * Possible values: "C", "F", "S", "T"
     * - "C": common case folding, shared by both simple and full mappings.
     * - "F": full case folding, mappings that may cause strings to grow in length.
     * - "S": simple case folding, mappings to single characters.
     * - "T": special case for uppercase I and dotted uppercase I, used in Turkic languages.
     */
    status: "C" | "F" | "S" | "T";

    /**
     * The mapping for the case folding.
     * Format: A string of characters, separated by spaces for full mappings.
     * Example: "a" for simple mapping, "a ss" for full mapping.
     */
    mapping: string;

    /**
     * The name of the character.
     * This is a descriptive name for the character represented by the code point.
     */
    name: string;
}

export const CASE_FOLDING_FIELDS = [
    "code",
    "status",
    "mapping",
    "name"
];
//#endregion

//#region data-files/v5.0.0/CompositionExclusions.txt
/**
 * This interface lists the characters for the Composition Exclusion Table defined in UAX #15, Unicode Normalization Forms.
 *
 * This file is a normative contributory data file in the Unicode Character Database.
 *
 * @property {string} character - The character that is excluded from composition. Example: "U+0020"
 * @property {string} description - A description of the character's exclusion. Example: "SPACE"
 */
export interface CompositionExclusions {
  character: string;
  description: string;
}

export const COMPOSITION_EXCLUSIONS_FIELDS = [
  "character",
  "description"
];
//#endregion

//#region data-files/v5.0.0/DerivedAge.txt
/**
 * This interface represents the Unicode Character Database Derived Property Data.
 */
export interface DerivedAge {
    /**
     * The date when the code points were first assigned in Unicode.
     * Format: YYYY-MM-DD, HH:MM:SS TZ
     * Example: "2006-07-14, 17:25:00 PST"
     */
    date: string;

    /**
     * The version of Unicode when the code points were assigned.
     * Example: "1.1"
     */
    version: string;

    /**
     * The type of code point assigned.
     * Possible values: "graphic", "format", "control", "private-use", "surrogate", "noncharacter"
     */
    code_point_type: "graphic" | "format" | "control" | "private-use" | "surrogate" | "noncharacter";

    /**
     * Indicates whether the code point is assigned or reserved.
     * Example: true for assigned, false for reserved.
     */
    assigned: boolean;
}

export const DERIVED_AGE_FIELDS = [
    "date",
    "version",
    "code_point_type",
    "assigned"
];
//#endregion

//#region data-files/v5.0.0/DerivedCoreProperties.txt
/**
 * Interface representing the derived core properties from the Unicode Character Database.
 */
export interface DerivedCoreProperties {
    /**
     * The Unicode character's general category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character's script.
     * Example: "Latn" for Latin script.
     */
    script: string;

    /**
     * The Unicode character's numeric value, if applicable.
     * Example: "1.5" for a character representing the number one and a half.
     */
    numeric_value?: string;

    /**
     * The Unicode character's bidirectional category.
     * Example: "L" for left-to-right.
     */
    bidi_category: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B";

    /**
     * The Unicode character's combining class.
     * Example: "0" for a base character.
     */
    combining_class: number;

    /**
     * The Unicode character's decimal digit value, if applicable.
     * Example: "5" for the character representing the digit five.
     */
    decimal_digit_value?: string;

    /**
     * The Unicode character's uppercase mapping.
     * Example: "A" for the uppercase version of "a".
     */
    uppercase_mapping?: string;

    /**
     * The Unicode character's lowercase mapping.
     * Example: "a" for the lowercase version of "A".
     */
    lowercase_mapping?: string;

    /**
     * The Unicode character's titlecase mapping.
     * Example: "A" for the titlecase version of "a".
     */
    titlecase_mapping?: string;
}

export const DERIVED_CORE_PROPERTIES_FIELDS = [
    "general_category",
    "script",
    "numeric_value",
    "bidi_category",
    "combining_class",
    "decimal_digit_value",
    "uppercase_mapping",
    "lowercase_mapping",
    "titlecase_mapping"
];
//#endregion

//#region data-files/v5.0.0/DerivedNormalizationProps.txt
/**
 * Interface representing the properties of DerivedNormalizationProps.
 */
export interface DerivedNormalizationProps {
    /**
     * The normalization form, which can be one of the following: "NFC", "NFD", "NFKC", "NFKD".
     * Example: "NFC"
     */
    normalization_form: "NFC" | "NFD" | "NFKC" | "NFKD";

    /**
     * A boolean indicating whether to use the default normalization.
     * Example: true
     */
    use_default: boolean;

    /**
     * An optional string that specifies the locale for normalization.
     * Example: "en-US"
     */
    locale?: string;
}

export const DERIVED_NORMALIZATION_PROPS_FIELDS = [
    "normalization_form",
    "use_default",
    "locale"
];
//#endregion

//#region data-files/v5.0.0/EastAsianWidth.txt
/**
 * EastAsianWidth
 *
 * This interface represents the East Asian Width properties for Unicode characters.
 * Each character is associated with a Unicode value and its corresponding East Asian Width property.
 *
 * The East Asian Width property can take one of the following values:
 * - "N": Neutral
 * - "A": Ambiguous
 * - "H": Half-width
 * - "W": Full-width
 * - "F": Full-width (for compatibility)
 * - "Na": Narrow
 *
 * All code points, assigned or unassigned, that are not listed explicitly are given the value "N".
 *
 * Character ranges are specified as for other property files in the Unicode Character Database.
 *
 * @see UAX #11: East Asian Character Width for more information.
 */
export interface EastAsianWidth {
    unicode_value: string;
    east_asian_width_property: "N" | "A" | "H" | "W" | "F" | "Na";
}

export const EAST_ASIAN_WIDTH_FIELDS = [
    "unicode_value",
    "east_asian_width_property"
];
//#endregion

//#region data-files/v5.0.0/HangulSyllableType.txt
/**
 * Interface representing the Hangul Syllable Type.
 */
export interface HangulSyllableType {
    /**
     * The Hangul syllable type code.
     * Format: "A", "B", "C"
     */
    code: "A" | "B" | "C";

    /**
     * The description of the syllable type.
     * Example: "Consonant + Vowel"
     */
    description: string;

    /**
     * The number of characters in the syllable.
     * Format: integer
     * Example: 2
     */
    character_count: number;

    /**
     * Indicates if the syllable type is complex.
     * Format: boolean
     * Example: true
     */
    is_complex: boolean;
}

export const HANGUL_SYLLABLE_TYPE_FIELDS = [
    "code",
    "description",
    "character_count",
    "is_complex"
];
//#endregion

//#region data-files/v5.0.0/Jamo.txt
/**
 * Interface representing the Jamo Short Name property.
 */
export interface Jamo {
    /**
     * The code point of a combining jamo character in 4-digit hexadecimal form.
     * Example: '1100'
     */
    code_point: string;

    /**
     * The Jamo Short Name as a one-, two-, or three-character ASCII string.
     * Example: 'G', 'GG', 'N'
     */
    jamo_short_name: string;
}

export const JAMO_FIELDS = [
    "code_point",
    "jamo_short_name"
];
//#endregion

//#region data-files/v5.0.0/LineBreak.txt
/**
 * LineBreak properties interface representing Unicode line break properties.
 *
 * This interface defines the properties associated with Unicode line breaks,
 * including the Unicode value and the corresponding line break property.
 *
 * The line break property can be one of the following:
 * - Normative: "BK", "CR", "LF", "CM", "SG", "GL", "CB", "SP", "ZW",
 *   "NL", "WJ", "JL", "JV", "JT", "H2", "H3"
 * - Informative: "XX", "OP", "CL", "QU", "NS", "EX", "SY",
 *   "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY",
 *   "BB", "BA", "SA", "AI", "B2"
 *
 * All code points not explicitly listed are given the value "XX".
 *
 * @property unicode_value - The Unicode value of the character, represented as a string.
 * @property line_break_property - The line break property associated with the Unicode value,
 *   which can be one of the specified normative or informative values.
 */
export interface LineBreak {
  unicode_value: string;
  line_break_property: "BK" | "CR" | "LF" | "CM" | "SG" | "GL" | "CB" | "SP" | "ZW" | "NL" | "WJ" | "JL" | "JV" | "JT" | "H2" | "H3" | "XX" | "OP" | "CL" | "QU" | "NS" | "EX" | "SY" | "IS" | "PR" | "PO" | "NU" | "AL" | "ID" | "IN" | "HY" | "BB" | "BA" | "SA" | "AI" | "B2";
}

export const LINE_BREAK_FIELDS = [
  "unicode_value",
  "line_break_property"
];
//#endregion

//#region data-files/v5.0.0/NameAliases.txt
/**
 * This interface defines the formal name aliases for Unicode characters.
 */
export interface NameAliases {
    /**
     * The code point of the Unicode character, represented as a hexadecimal value.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The alias assigned to the Unicode character.
     * Example: "LATIN CAPITAL LETTER A" for the character 'A'.
     */
    alias: string;
}

export const NAME_ALIASES_FIELDS = ["code_point", "alias"];
//#endregion

//#region data-files/v5.0.0/NamedSequences.txt
/**
 * Interface representing the NamedSequences data structure.
 */
export interface NamedSequences {
    /**
     * The name of the sequence.
     * Example: "Basic Latin"
     */
    name: string;
    /**
     * The code point sequence for USI.
     * Example: "U+0041 U+0042 U+0043"
     */
    code_point_sequence: string;
}

export const NAMED_SEQUENCES_FIELDS = [
    "name",
    "code_point_sequence"
];
//#endregion

//#region data-files/v5.0.0/NamedSequencesProv.txt
/**
 * Interface representing the provisional named sequences from the Unicode Character Database.
 */
export interface NamedSequencesProv {
  /**
   * The name of the sequence.
   */
  name_of_sequence: string;

  /**
   * The code point sequence for USI, represented as a string of hexadecimal values.
   * Example: "U+0041 U+0042 U+0043"
   */
  code_point_sequence: string;
}

export const NAMED_SEQUENCES_PROV_FIELDS = [
  "name_of_sequence",
  "code_point_sequence"
];
//#endregion

//#region data-files/v5.0.0/NormalizationCorrections.txt
/**
 * This interface represents the normalization corrections as defined in the Unicode Character Database.
 */
export interface NormalizationCorrections {
    /**
     * Unicode code point, represented as a hexadecimal string (e.g., "U+0041").
     */
    unicode_code_point: string;

    /**
     * Original (erroneous) decomposition of the character.
     */
    original_decomposition: string;

    /**
     * Corrected decomposition of the character.
     */
    corrected_decomposition: string;

    /**
     * Version of Unicode for which the correction was entered into UnicodeData.txt, in n.n.n format (e.g., "5.0.0").
     */
    unicode_version: string;

    /**
     * Indicates the Unicode Corrigendum which documents the correction.
     */
    comment: string;
}

export const NORMALIZATION_CORRECTIONS_FIELDS = [
    "unicode_code_point",
    "original_decomposition",
    "corrected_decomposition",
    "unicode_version",
    "comment"
];
//#endregion

//#region data-files/v5.0.0/NormalizationTest.txt
/**
 * Interface representing the normalization test suite as defined in the Unicode Character Database.
 */
export interface NormalizationTest {
  /**
   * Conformance for NFC normalization.
   * Must satisfy: c2 == NFC(c1) == NFC(c2) == NFC(c3)
   * Example: c2 == NFC(c1)
   */
  c2: string;

  /**
   * Conformance for NFD normalization.
   * Must satisfy: c3 == NFD(c1) == NFD(c2) == NFD(c3)
   * Example: c3 == NFD(c1)
   */
  c3: string;

  /**
   * Conformance for NFKC normalization.
   * Must satisfy: c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)
   * Example: c4 == NFKC(c1)
   */
  c4: string;

  /**
   * Conformance for NFKD normalization.
   * Must satisfy: c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)
   * Example: c5 == NFKD(c1)
   */
  c5: string;

  /**
   * Code point X must satisfy: X == NFC(X) == NFD(X) == NFKC(X) == NFKD(X)
   * Example: X == NFC(X)
   */
  X: string;
}

export const NORMALIZATION_TEST_FIELDS = [
  "c2",
  "c3",
  "c4",
  "c5",
  "X"
];
//#endregion

//#region data-files/v5.0.0/PropList.txt
/**
 * Interface representing the Unicode Character Database properties.
 */
export interface PropList {
    /**
     * The date of the file creation in GMT format.
     * Example: "2006-06-07, 23:22:52 GMT"
     */
    date: string;
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2006 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation reference for the Unicode Character Database.
     * Example: "For documentation, see UCD.html"
     */
    documentation: string;
}

export const PROP_LIST_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.0.0/PropertyAliases.txt
/**
 * This interface defines the property aliases used in the Unicode Character Database (UCD).
 *
 * The properties include:
 * - abbreviated_name: A short name for the property.
 * - long_name: A detailed name for the property.
 * - additional_aliases: Any other aliases that may be useful.
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 *
 * Example:
 * - abbreviated_name: "AL"
 * - long_name: "Arabic Letter"
 * - additional_aliases: ["Arabic_Letter", "AL"]
 */
export interface PropertyAliases {
  abbreviated_name: string;
  long_name: string;
  additional_aliases?: string[];
}

export const PROPERTY_ALIASES_FIELDS = [
  "abbreviated_name",
  "long_name",
  "additional_aliases"
];
//#endregion

//#region data-files/v5.0.0/PropertyValueAliases.txt
/**
 * This interface represents the property value aliases used in the Unicode Character Database.
 * Each property value is associated with a specific property and may have multiple aliases.
 *
 * The structure of each entry includes:
 * - property: The property for which the value is used (e.g., Bidi_Class).
 * - abbreviated_name: An abbreviated name for the property value (e.g., AL).
 * - long_name: A long descriptive name for the property value (e.g., Arabic Letter).
 *
 * Note: Property value names are not unique across properties, and some property names may be the same as property value names.
 */
export interface PropertyValueAliases {
    property: string;
    abbreviated_name: "n/a" | string;
    long_name: string;
}

export const PROPERTY_VALUE_ALIASES_FIELDS = [
    "property",
    "abbreviated_name",
    "long_name"
];
//#endregion

//#region data-files/v5.0.0/Scripts.txt
/**
 * Interface representing the Unicode Character Database.
 */
export interface Scripts {
    /**
     * The date when the database was created or last modified.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2006-03-09, 23:14:25 GMT"
     */
    date: string;

    /**
     * The version of the database.
     * Format: Major.Minor.Patch
     * Example: "5.0.0"
     */
    version: string;

    /**
     * Copyright information for the database.
     * Example: "Copyright (c) 1991-2006 Unicode, Inc."
     */
    copyright: string;

    /**
     * Terms of use for the database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * Documentation link for the database.
     * Example: "For documentation, see UCD.html"
     */
    documentation: string;
}

export const SCRIPTS_FIELDS = [
    "date",
    "version",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.0.0/SpecialCasing.txt
/**
 * This interface represents the special casing properties of Unicode characters.
 */
export interface SpecialCasing {
    /**
     * The code point of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    code: string;

    /**
     * The lowercase mapping of the character in hexadecimal format.
     * Example: "0061" for 'a'
     */
    lower: string;

    /**
     * The titlecase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    title: string;

    /**
     * The uppercase mapping of the character in hexadecimal format.
     * Example: "0041" for 'A'
     */
    upper: string;

    /**
     * A list of conditions that override the normal behavior if all are true.
     * Example: "en_US" for English (United States)
     */
    condition_list?: string;

    /**
     * A comment providing additional information about the entry.
     */
    comment?: string;
}

export const SPECIAL_CASING_FIELDS = [
    "code",
    "lower",
    "title",
    "upper",
    "condition_list",
    "comment"
];
//#endregion

//#region data-files/v5.0.0/StandardizedVariants.txt
/**
 * Specification of the variant sequences that are defined in the Unicode Standard.
 * This interface represents the variation sequences, their descriptions, and any specific shaping environments.
 */
export interface StandardizedVariants {
  /**
   * The variation sequence.
   * Example: U+1F600
   */
  variation_sequence: string;
  
  /**
   * The description of the desired appearance.
   * Example: Grinning Face
   */
  description: string;
  
  /**
   * Indicates where the appearance is only different in particular shaping environments.
   * Example: "Arabic"
   */
  shaping_environments: "string";
}

export const STANDARDIZED_VARIANTS_FIELDS = [
  "variation_sequence",
  "description",
  "shaping_environments"
];
//#endregion

//#region data-files/v5.0.0/Unihan.txt
/**
 * Interface representing the configuration for a user profile.
 */
export interface UserProfile {
    /**
     * The unique identifier for the user.
     * Must be a string of alphanumeric characters.
     * Example: "user123"
     */
    user_id: string;

    /**
     * The name of the user.
     * Must be a string with a minimum length of 1.
     * Example: "John Doe"
     */
    name: string;

    /**
     * The email address of the user.
     * Must be a valid email format.
     * Example: "john.doe@example.com"
     */
    email: string;

    /**
     * The age of the user.
     * Must be a number between 0 and 120.
     * Example: 30
     */
    age: number;

    /**
     * The user's subscription status.
     * Can be either "active" or "inactive".
     */
    subscription_status: "active" | "inactive";
}

export const USER_PROFILE_FIELDS = [
    "user_id",
    "name",
    "email",
    "age",
    "subscription_status"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedBidiClass.txt
/**
 * Interface representing the Unicode Character Database derived from DerivedBidiClass-5.0.0.txt.
 */
export interface DerivedBidiClass {
    /**
     * The character or character range.
     * Example: "U+0041" for the character 'A'.
     */
    character: string;

    /**
     * The bidirectional class of the character.
     * Example: "L" for Left-to-Right characters.
     */
    bidi_class: "L" | "R" | "AL" | "EN" | "ES" | "ET" | "AN" | "CS" | "NSM" | "B" | "S" | "WS" | "ON";

    /**
     * The numeric value associated with the character, if applicable.
     * Example: 1.0 for a numeric character.
     */
    numeric_value?: number;

    /**
     * The character's directionality.
     * Example: "LTR" for Left-to-Right.
     */
    directionality: "LTR" | "RTL";
}

export const DERIVED_BIDI_CLASS_FIELDS = [
    "character",
    "bidi_class",
    "numeric_value",
    "directionality"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedBinaryProperties.txt
/**
 * Interface representing the derived binary properties from the Unicode Character Database.
 */
export interface DerivedBinaryProperties {
    /**
     * The name of the property.
     * Example: "Bidi_Control"
     */
    property_name: string;
    
    /**
     * The value of the property.
     * Example: "True" or "False"
     */
    property_value: "True" | "False";
    
    /**
     * The description of the property.
     * Example: "Indicates whether the character is a bidirectional control character."
     */
    description: string;
}

export const DERIVED_BINARY_PROPERTIES_FIELDS = [
    "property_name",
    "property_value",
    "description"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedCombiningClass.txt
/**
 * Interface representing the Unicode Character Database derived combining class.
 */
export interface DerivedCombiningClass {
    /**
     * The date of the file creation in GMT format.
     * Example: "2006-03-09T23:13:37Z"
     */
    date: string;
    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2006 Unicode, Inc."
     */
    copyright: string;
    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;
    /**
     * The documentation reference for the Unicode Character Database.
     * Example: "For documentation, see UCD.html"
     */
    documentation: string;
}

export const DERIVED_COMBINING_CLASS_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedDecompositionType.txt
/**
 * Interface representing the DerivedDecompositionType.
 */
export interface DerivedDecompositionType {
    /**
     * The character for which the decomposition is defined.
     * Example: 'A'
     */
    character: string;

    /**
     * The decomposition mapping for the character.
     * Example: 'A' -> ['A', 'A']
     */
    decomposition: string[];

    /**
     * The type of decomposition.
     * Example: 'canonical' or 'compat'
     */
    type: "canonical" | "compat";
}

export const DERIVED_DECOMPOSITION_TYPE_FIELDS = [
    "character",
    "decomposition",
    "type"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedEastAsianWidth.txt
/**
 * Interface representing the DerivedEastAsianWidth data.
 */
export interface DerivedEastAsianWidth {
    /**
     * The character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The East Asian width category of the character.
     * Possible values: "N" (Narrow), "W" (Wide), "F" (Full-width), "H" (Half-width), "Na" (Narrow Ambiguous), "A" (Ambiguous).
     * Example: "W" for wide characters.
     */
    east_asian_width: "N" | "W" | "F" | "H" | "Na" | "A";

    /**
     * The Unicode version in which the character was introduced.
     * Example: "1.1" for characters introduced in Unicode version 1.1.
     */
    unicode_version: string;
}

export const DERIVED_EAST_ASIAN_WIDTH_FIELDS = [
    "code_point",
    "east_asian_width",
    "unicode_version"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedGeneralCategory.txt
/**
 * Interface representing the DerivedGeneralCategory data structure.
 */
export interface DerivedGeneralCategory {
    /**
     * The Unicode character category.
     * Example: "Lu" for uppercase letters.
     */
    general_category: "Lu" | "Ll" | "Lt" | "Lm" | "Lo" | "Mn" | "Mc" | "Me" | "Nd" | "Nl" | "No" | "Pc" | "Pd" | "Ps" | "Pe" | "Pi" | "Pf" | "Po" | "Sm" | "Sc" | "Sk" | "So" | "Zs" | "Zl" | "Zp";

    /**
     * The Unicode character subcategory.
     * Example: "Lu" for uppercase letters.
     */
    sub_category: string;

    /**
     * The Unicode character name.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;

    /**
     * The Unicode code point.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;
}

export const DERIVED_GENERAL_CATEGORY_FIELDS = [
    "general_category",
    "sub_category",
    "character_name",
    "code_point"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedJoiningGroup.txt
/**
 * Interface representing the DerivedJoiningGroup.
 */
export interface DerivedJoiningGroup {
    /**
     * The Unicode character code point in hexadecimal format.
     * Example: "U+0041" for the character 'A'.
     */
    code_point: string;

    /**
     * The joining type of the character.
     * Example: "L" for Left, "R" for Right.
     */
    joining_type: "L" | "R" | "D" | "T" | "U" | "C";

    /**
     * The character's directionality.
     * Example: "LTR" for Left-to-Right, "RTL" for Right-to-Left.
     */
    directionality: "LTR" | "RTL";

    /**
     * The character's category.
     * Example: "Lu" for Uppercase Letter.
     */
    category: string;

    /**
     * The character's name in Unicode.
     * Example: "LATIN CAPITAL LETTER A".
     */
    character_name: string;
}

export const DERIVED_JOINING_GROUP_FIELDS = [
    "code_point",
    "joining_type",
    "directionality",
    "category",
    "character_name"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedJoiningType.txt
/**
 * Interface representing the Unicode Character Database derived joining type.
 */
export interface DerivedJoiningType {
    /**
     * The character that represents the joining type.
     * Example: "U+0020" for space character.
     */
    joining_character: string;
    
    /**
     * The type of joining, which can be one of the following: "U", "L", "R", "D", "C", "T", "B".
     * - "U": Unjoined
     * - "L": Left joined
     * - "R": Right joined
     * - "D": Dual joined
     * - "C": Join control
     * - "T": Transparent
     * - "B": Bottom
     */
    joining_type: "U" | "L" | "R" | "D" | "C" | "T" | "B";
}

export const DERIVED_JOINING_TYPE_FIELDS = [
    "joining_character",
    "joining_type"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedLineBreak.txt
/**
 * Interface representing the Unicode Character Database derived line break properties.
 */
export interface DerivedLineBreak {
    /**
     * The date when the data was last updated.
     * Format: YYYY-MM-DD, HH:MM:SS GMT
     * Example: "2006-06-07, 17:42:43 GMT"
     */
    date: string;

    /**
     * The copyright information for the Unicode Character Database.
     * Example: "Copyright (c) 1991-2006 Unicode, Inc."
     */
    copyright: string;

    /**
     * The terms of use for the Unicode Character Database.
     * Example: "For terms of use, see http://www.unicode.org/terms_of_use.html"
     */
    terms_of_use: string;

    /**
     * The documentation reference for the Unicode Character Database.
     * Example: "For documentation, see UCD.html"
     */
    documentation: string;
}

export const DERIVED_LINE_BREAK_FIELDS = [
    "date",
    "copyright",
    "terms_of_use",
    "documentation"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedNumericType.txt
/**
 * Interface representing the Unicode Character Database derived numeric types.
 */
export interface DerivedNumericType {
    /**
     * The numeric value associated with the character.
     * Example: 1.0, 2.5
     */
    value: number;

    /**
     * The type of the numeric value.
     * Example: "integer", "decimal"
     */
    type: "integer" | "decimal";

    /**
     * The character associated with the numeric value.
     * Example: 'A', 'B'
     */
    character: string;

    /**
     * The source of the numeric value.
     * Example: "derived", "explicit"
     */
    source: "derived" | "explicit";

    /**
     * The date when the numeric value was last updated.
     * Format: YYYY-MM-DD
     * Example: "2006-03-09"
     */
    last_updated: string;
}

export const DERIVED_NUMERIC_TYPE_FIELDS = [
    "value",
    "type",
    "character",
    "source",
    "last_updated"
];
//#endregion

//#region data-files/v5.0.0/extracted/DerivedNumericValues.txt
/**
 * Interface representing the derived numeric values from the Unicode Character Database.
 */
export interface DerivedNumericValues {
    /**
     * The numeric value associated with a character.
     * Example: "1.0"
     */
    numeric_value: "string";
    
    /**
     * The type of the numeric value.
     * Example: "integer" or "decimal"
     */
    numeric_type: "string";
    
    /**
     * The source of the numeric value.
     * Example: "derived" or "explicit"
     */
    source: "string";
}

export const DERIVED_NUMERIC_VALUES_FIELDS = [
    "numeric_value",
    "numeric_type",
    "source"
];
//#endregion

//#region data-files/v5.0.0/auxiliary/GraphemeBreakProperty.txt
/**
 * Interface representing the Grapheme Break Property data.
 */
export interface GraphemeBreakProperty {
    /**
     * The character that represents the grapheme break property.
     * Example: "CR" for Carriage Return.
     */
    character: "CR" | "LF" | "Control" | "Extend" | "Regional_Indicator" | "Prepend" | "SpacingMark" | "L" | "V" | "T" | "LV" | "LVT";

    /**
     * The description of the grapheme break property.
     * Example: "Line Feed" for LF.
     */
    description: string;

    /**
     * The Unicode code point of the character.
     * Example: 0x000A for LF.
     */
    code_point: number;
}

export const GRAPHEME_BREAK_PROPERTY_FIELDS = [
    "character",
    "description",
    "code_point"
];
//#endregion

//#region data-files/v5.0.0/auxiliary/GraphemeBreakTest.txt
/**
 * GraphemeBreakTest
 *
 * This interface represents the default grapheme break test data format.
 */
export interface GraphemeBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "U+0041 U+030A"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const GRAPHEME_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

//#region data-files/v5.0.0/auxiliary/SentenceBreakProperty.txt
/**
 * Interface representing the properties of SentenceBreak.
 */
export interface SentenceBreakProperty {
    /**
     * Represents the character type for sentence breaks.
     * Can be one of the following: "CR", "LF", "Control", "Extend", "Format", "Spacers", "L", "U", "S", "Z", "P", "C", "X".
     * Example: "CR" indicates a carriage return.
     */
    character_type: "CR" | "LF" | "Control" | "Extend" | "Format" | "Spacers" | "L" | "U" | "S" | "Z" | "P" | "C" | "X";

    /**
     * Indicates whether the character is a sentence break.
     * Example: true means it is a sentence break character.
     */
    is_sentence_break: boolean;

    /**
     * The Unicode code point of the character.
     * Example: 0x0A for LF (Line Feed).
     */
    code_point: number;
}

export const SENTENCE_BREAK_PROPERTY_FIELDS = [
    "character_type",
    "is_sentence_break",
    "code_point"
];
//#endregion

//#region data-files/v5.0.0/auxiliary/SentenceBreakTest.txt
/**
 * Interface representing the Default Sentence Break Test.
 */
export interface SentenceBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Format: <string> (# <comment>)?
     * Example: "0041 0042 0043 (# Latin Capital Letters A, B, C)"
     */
    string: string;
}

export const SENTENCE_BREAK_TEST_FIELDS = [
    "string"
];
//#endregion

//#region data-files/v5.0.0/auxiliary/WordBreakProperty.txt
/**
 * Interface representing the WordBreakProperty.
 */
export interface WordBreakProperty {
    /**
     * Represents the word break property value.
     * Can be one of the following: "normal", "break-all", "keep-all", "break-word".
     * Example: "normal"
     */
    word_break: "normal" | "break-all" | "keep-all" | "break-word";
}

export const WORD_BREAK_PROPERTY_FIELDS = [
    "word_break"
];
//#endregion

//#region data-files/v5.0.0/auxiliary/WordBreakTest.txt
/**
 * Interface representing the Word Break Test data.
 */
export interface WordBreakTest {
    /**
     * A string containing hex Unicode code points.
     * Example: "0041 0042 0043"
     */
    string: string;
    /**
     * An optional comment associated with the string.
     * Example: "# This is a comment"
     */
    comment?: string;
}

export const WORD_BREAK_TEST_FIELDS = [
    "string",
    "comment"
];
//#endregion

